import{_ as c,C as l,c as d,o as r,a8 as t,j as n,G as a,w as p}from"./chunks/framework.bOCt8wBo.js";const h="/sealdice-core/assets/edit-reply-random-pic.BERq9XNC.png",u="/sealdice-core/assets/edit-reply-single-person-mod1.CcMT0-k7.png",k="/sealdice-core/assets/edit-reply-single-person-mod2.RQYejdzJ.png",m="/sealdice-core/assets/edit-reply-single-person-mod3.a_KOIlqv.png",T=JSON.parse('{"title":"编写自定义回复","description":"","frontmatter":{"lang":"zh-cn","title":"编写自定义回复"},"headers":[],"relativePath":"advanced/edit_reply.md","filePath":"advanced/edit_reply.md","lastUpdated":1758531130000}'),g={name:"advanced/edit_reply.md"},b={class:"info custom-block"},$={class:"info custom-block"},x={class:"info custom-block"},v={class:"info custom-block"},y={class:"info custom-block"};function _(f,s,q,E,C,P){const e=l("ChatBox"),i=l("PluginTabsTab"),o=l("PluginTabs");return r(),d("div",null,[s[5]||(s[5]=t(`<h1 id="编写自定义回复" tabindex="-1">编写自定义回复 <a class="header-anchor" href="#编写自定义回复" aria-label="Permalink to &quot;编写自定义回复&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">本节内容</p><p>本节将展示自定义回复编写的进阶部分，请善用侧边栏和搜索，按需阅读文档。</p><p>我们假定你已经阅读了自定义回复编写的 <a href="./../config/reply.html">基础部分</a>（「配置 - 自定义回复」节）。如果你还没有阅读该章节，请先阅读这一节。</p><p>在部分内容中，我们假定你了解海豹变量机制和正则表达式。如果你对正则表达式还很陌生，可以参考以下材料，或在互联网自行搜索学习。</p><ul><li><a href="https://www.runoob.com/regexp/regexp-tutorial.html" target="_blank" rel="noreferrer">正则表达式 - 菜鸟教程</a></li><li><a href="https://regex101.com/" target="_blank" rel="noreferrer">Regex 101</a>，提供正则表达式在线解析和验证，并且为表达式中不同元素给出解释</li></ul><p>海豹核心跟随 Go 语言，采用 <a href="https://github.com/google/re2/wiki/Syntax" target="_blank" rel="noreferrer">RE2</a> 规范。该规范与其他规范在个别扩展语法上存在细微差别，请注意辨析。</p><p>在使用 Regex 101 网站时，请注意在左侧的「FLAVOR」栏选中「Golang」，以确保正则表达式的表现一致。</p></div><h2 id="第一个自定义回复" tabindex="-1">第一个自定义回复 <a class="header-anchor" href="#第一个自定义回复" aria-label="Permalink to &quot;第一个自定义回复&quot;">​</a></h2><p>首先我们打开「自定义回复」页，新建一项自定义回复。</p><div class="tip custom-block"><p class="custom-block-title">提示：使用 .text 帮助测试</p><p><code>.text &lt;文本&gt;</code> 将是你的一大助力，它会输出后面文本的执行结果，你可以将它看成不需要触发词的自定义回复。</p><p>当然，在采用 <code>.text</code> 指令进行 debug 时，可能出现因为测试的内容对变量造成影响，而不得不频繁复制黏贴清空指令的情况。此时建议专门开一个一两个字即可触发的自定义回复，用来测试。</p></div><div class="tip custom-block"><p class="custom-block-title">提示：嵌入 CQ 码</p><p>返回内容可以嵌入 CQ 码。CQ 码文档见 <a href="https://docs.go-cqhttp.org/cqcode" target="_blank" rel="noreferrer">CQ 码列表</a>。</p></div><p>自定义回复中分「条件」和「结果」两个部分。在 <a href="./../config/reply.html">配置 - 自定义回复</a> 中，我们已经了解了一些简单的回复编写，下面将补充介绍进阶内容。</p><h2 id="触发条件" tabindex="-1">触发条件 <a class="header-anchor" href="#触发条件" aria-label="Permalink to &quot;触发条件&quot;">​</a></h2><h3 id="文本匹配-模糊匹配" tabindex="-1">文本匹配：模糊匹配 <a class="header-anchor" href="#文本匹配-模糊匹配" aria-label="Permalink to &quot;文本匹配：模糊匹配&quot;">​</a></h3><p>模糊匹配将比较收到的消息与指定文本，内容相似时触发。</p><p>比较定义在 <code>dice/ext_reply_logic.go</code> 中，内容 jaro 和 hamming 平均值高于阈值（0.7）被认为是相似：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> strCompare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	va </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strsim.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b, strsim.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Jaro</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	vb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> strsim.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Compare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a, b, strsim.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hamming</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (va </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vb) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">提示：模糊匹配未命中</p><p>模糊匹配可能出现感觉能匹配上，但实际上没办法匹配上的情况。我们更建议你使用「包含文本」或「正则匹配」。</p></div><h3 id="文本匹配-正则匹配" tabindex="-1">文本匹配：正则匹配 <a class="header-anchor" href="#文本匹配-正则匹配" aria-label="Permalink to &quot;文本匹配：正则匹配&quot;">​</a></h3><p>使用正则匹配时，直接在要匹配的文本一栏中写入正则表达式即可。当正则表达式获得匹配时，该条件得到满足。</p><p>对于正则表达式中的捕获组，海豹遵循命令行脚本的通行做法，将其按顺序存储于多个变量 <code>$t1</code> <code>$t2</code> 等。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>正则匹配：^购买(.+)</span></span>
<span class="line"><span>输出文本：{$t玩家}购买了{$t1}</span></span></code></pre></div>`,17)),n("div",b,[s[0]||(s[0]=n("p",{class:"custom-block-title"},"示例",-1)),a(e,{messages:[{content:"购买猫粮",send:!0},{username:"海豹牌猫粮店",content:"<木落>购买了猫粮"}]})]),s[6]||(s[6]=t('<p>可以发现第 1 捕获组命中的字符串 <code>猫粮</code>，被存储于变量 <code>$t1</code> 中。</p><p>此外，对于正则表达式匹配的完整内容将被存储于变量 <code>$t0</code>。如果捕获组存在命名，如命名为 <code>A</code> 的捕获组 <code>(?P&lt;A&gt;cc)</code>，命中的字符串也将额外存入变量 <code>$tA</code>。</p><div class="warning custom-block"><p class="custom-block-title">注意：不要使用某些前缀！</p><p>由于 <code>.</code> <code>。</code> <code>/</code> <code>!</code> 等符号会作为海豹中指令的前缀，因此作为前缀时可能导致将其识别为指令而非自定义回复的情况，建议换成别的前缀。</p></div><div class="tip custom-block"><p class="custom-block-title">提示：正则中匹配 CQ 码</p><p>海豹支持用正则匹配 CQ 码。但是，由于 <code>[</code> <code>]</code> 符号在正则表达式中含有特殊含义，如果你这么做了，请对它们进行转义。</p><p>示例：<code>^\\[CQ:xxx,xx=xxx\\]</code></p></div><h3 id="表达式为真" tabindex="-1">表达式为真 <a class="header-anchor" href="#表达式为真" aria-label="Permalink to &quot;表达式为真&quot;">​</a></h3><p>在「表达式为真」匹配中，只需要直接在匹配文本中写出形如 <code>变量名 == 需要的值</code> 的形式即可，不需要使用任何 <code>{}</code> 。</p><h2 id="回复结果" tabindex="-1">回复结果 <a class="header-anchor" href="#回复结果" aria-label="Permalink to &quot;回复结果&quot;">​</a></h2><p>在回复文本中，可以调用一些 <a href="./script.html#变量">变量</a>，也可以嵌入 <a href="./script.html">内置脚本语言</a>。</p><h3 id="嵌入脚本语言" tabindex="-1">嵌入脚本语言 <a class="header-anchor" href="#嵌入脚本语言" aria-label="Permalink to &quot;嵌入脚本语言&quot;">​</a></h3>',9)),n("div",$,[s[1]||(s[1]=n("p",{class:"custom-block-title"},"示例",-1)),a(e,{messages:[{content:".text {$t玩家}进行测试",send:!0},{content:"<木落>进行测试"},{content:".text {d100}",send:!0},{content:"1"}]})]),s[7]||(s[7]=t(`<div class="tip custom-block"><p class="custom-block-title">提示：未赋值的变量</p><p>所有变量在未被赋值时被调用的值都为 0。</p></div><h3 id="执行块" tabindex="-1">执行块 <a class="header-anchor" href="#执行块" aria-label="Permalink to &quot;执行块&quot;">​</a></h3><p><code>{% %}</code> 被称为执行块。由 <code>{% %}</code> 括起来的部分会被作为代码执行，输出最后一个语句的结果。执行块中的两个语句之间要使用 <code>;</code> 隔开。</p><p>如果想要输出字符串，则应该用 <code>\`</code> / <code>&quot;</code> / <code>&#39;</code> 括上。</p><ul><li>例：形如 <code>{% \\$t1=&quot;114514&quot; %}</code> 的式子会输出 <code>114514</code>。</li></ul><div class="tip custom-block"><p class="custom-block-title">提示：结果中调用变量</p><p>若想在结果中调用变量，请用反引号。目前海豹只支持在反引号中调用变量。</p></div><p>下面是一个简单的示例，这里的第一句也是最后一句，所以它的结果会被输出。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.text {% $t测试=1 %}</span></span></code></pre></div><h4 id="示例-使用-if" tabindex="-1">示例：使用 <code>if</code> <a class="header-anchor" href="#示例-使用-if" aria-label="Permalink to &quot;示例：使用 \`if\`&quot;">​</a></h4><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{%</span></span>
<span class="line"><span>$t测试=1;</span></span>
<span class="line"><span>if $t测试==1 {$t输出=&quot;赞美木落&quot;};</span></span>
<span class="line"><span>if $t测试==2 {$t输出=&quot;快点更新&quot;};</span></span>
<span class="line"><span>if $t测试!=2&amp;&amp;$t测试!=1 {$t输出=&quot;群主女装&quot;}</span></span>
<span class="line"><span>%}</span></span>
<span class="line"><span>{$t输出}</span></span></code></pre></div><p>首先给 <code>$t测试</code>赋值为 1，然后进入判断：</p><ol><li>如果 <code>$t测试</code> 等于 1，则变量 <code>$t输出</code> 等于 <code>&quot;赞美木落&quot;</code>；</li><li>如果 <code>$t测试</code> 等于 2，则变量 <code>$t输出</code> 等于 <code>&quot;快点更新&quot;</code>；</li><li>如果 <code>$t测试</code> 既不等于 2 也不等于 1，则变量 <code>$t输出</code> 等于 <code>&quot;群主女装&quot;</code>;</li></ol><p>最后，输出变量 <code>$t输出</code>。</p><div class="tip custom-block"><p class="custom-block-title">提示：容易误解的 if 使用</p><p>目前海豹语并不支持 <code>else if</code> / <code>elif</code>，<code>if</code> 和 <code>else</code> 是一对一匹配的。所以当形如：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if &lt;条件 1&gt; {&lt;执行 1&gt;};</span></span>
<span class="line"><span>if &lt;条件 2&gt; {&lt;执行 2&gt;}</span></span>
<span class="line"><span>else {&lt;执行 3&gt;}</span></span></code></pre></div><p>的语句出现时，第二个 <code>if</code> 与 <code>else</code> 为一个整体，且不与第一个 <code>if</code> 构成 <code>if elseif else</code> 的关系！即使 <code>&lt;条件 1&gt;</code> 满足，其仍会对 <code>&lt;条件 2&gt;</code> 进行判断，并在 <code>&lt;执行 2&gt;</code> 与 <code>&lt;执行 3&gt;</code> 中择一执行！</p></div><h4 id="示例-变量运算" tabindex="-1">示例：变量运算 <a class="header-anchor" href="#示例-变量运算" aria-label="Permalink to &quot;示例：变量运算&quot;">​</a></h4><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{%</span></span>
<span class="line"><span>$t0 = 1;</span></span>
<span class="line"><span>$tRand = d6;</span></span>
<span class="line"><span>if $t0 == 1 { $t0 = $t0 + $tRand }</span></span>
<span class="line"><span>%}</span></span>
<span class="line"><span>{$t0}</span></span></code></pre></div><p>在这个例子里，我们先给 <code>$t0</code> 赋值为 1，然后判断 <code>$t0</code> 是否等于 1，若通过则 <code>$t0</code> 的值增加 1d6，最后输出结果。</p><h2 id="更多示例片段" tabindex="-1">更多示例片段 <a class="header-anchor" href="#更多示例片段" aria-label="Permalink to &quot;更多示例片段&quot;">​</a></h2><h3 id="牌堆与自定义回复的结合" tabindex="-1">牌堆与自定义回复的结合 <a class="header-anchor" href="#牌堆与自定义回复的结合" aria-label="Permalink to &quot;牌堆与自定义回复的结合&quot;">​</a></h3><p>以养猫功能中猫好感度为例：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{%</span></span>
<span class="line"><span>$mCatFavor&lt;=100 ? \`#{DRAW-第一档猫好感}\`,</span></span>
<span class="line"><span>$mCatFavor&lt;=250 ? \`#{DRAW-第二档猫好感}\`,</span></span>
<span class="line"><span>$mCatFavor&lt;=600 ? \`#{DRAW-第三档猫好感}\`,</span></span>
<span class="line"><span>$mCatFavor&lt;=1500 ? \`#{DRAW-第四档猫好感}\`,</span></span>
<span class="line"><span>$mCatFavor&lt;=2500 ? \`#{DRAW-第五档猫好感}\`,</span></span>
<span class="line"><span>1 ? \`#{DRAW-第六档猫好感}\`</span></span>
<span class="line"><span>%}</span></span></code></pre></div><p>在这一脚本中，根据猫好感度 <code>$mCatFavor</code>不同，需要输出不同回复的机制。</p><details class="details custom-block"><summary>补充：其它写法</summary><p>除了形如</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{%</span></span>
<span class="line"><span>判断1 ? \`#{DRAW-牌组1}\`,</span></span>
<span class="line"><span>判断2 ? \`#{DRAW-牌组2}\`,</span></span>
<span class="line"><span>判断3 ? \`#{DRAW-牌组3}\`,</span></span>
<span class="line"><span>1 ? \`#{DRAW-牌组4}\`,</span></span>
<span class="line"><span>%}</span></span></code></pre></div><p>的写法外，还可以使用：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{%</span></span>
<span class="line"><span>if 判断1 {</span></span>
<span class="line"><span>  $tRand=d6;</span></span>
<span class="line"><span>  $t输出=$tRand==1 ? \`内容1\`,</span></span>
<span class="line"><span>  $t输出=$tRand==2 ? \`内容2\`,</span></span>
<span class="line"><span>  $t输出=$tRand==3 ? \`内容3\`,</span></span>
<span class="line"><span>  $t输出=$tRand==4 ? \`内容4\`,</span></span>
<span class="line"><span>  $t输出=$tRand==5 ? \`内容5\`,</span></span>
<span class="line"><span>  $t输出=$tRand==6 ? \`内容6\`</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>if 判断2 { $tRand=d10; $t输出 = $tRand==1 ? \`内容1\`, …… };</span></span>
<span class="line"><span>if 判断3 { $tRand=d10; $t输出 = $tRand==1 ? \`内容1\`, …… };</span></span>
<span class="line"><span>%}</span></span></code></pre></div><p>实质上没有太大区别，可根据喜好选择。</p></details><h3 id="多行回复的错误使用" tabindex="-1">多行回复的错误使用 <a class="header-anchor" href="#多行回复的错误使用" aria-label="Permalink to &quot;多行回复的错误使用&quot;">​</a></h3><p>自定义回复中的多行输出通常并不是：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{$t输出0}</span></span>
<span class="line"><span>{$t输出1}</span></span>
<span class="line"><span>{$t输出2}</span></span>
<span class="line"><span>{$t输出3}</span></span></code></pre></div><p>而是在为四个 <code>$t输出</code> 变量赋值时，于内部写入 <code>\\n</code>，自定义回复中则采用 <code>{$t输出0}{$t输出1}{$t输出2}{$t输出3}</code> 的形式。</p><p>这是因为如果某一变量可能为空时，如果采用第一种分行的写法，会出现这样的效果：</p>`,28)),n("div",x,[s[2]||(s[2]=n("p",{class:"custom-block-title"},"示例",-1)),a(e,{messages:[{content:"踢海豹",send:!0},{content:`<木落>一脚踢向海豹，踢了3格。
海豹现在离终点还有37格。

海豹的逃走骰：1d100=60，海豹没能逃脱凶猛恶汉们的掌控！`}]})]),s[8]||(s[8]=t(`<p>可以看见，在中间会出现突兀的空行。这是因为虽然 <code>$t输出2</code> 变量为空，海豹仍会按照自定义回复中设置的格式输出。因此在对应 <code>$t输出2</code> 的一行中，海豹会首先输出空变量 <code>{$t输出2}</code>，随后按自定义回复的格式进行换行，导致发生空行。</p><p>所以，如果想要在某个变量为空时，不让用户注意到突兀的空缺，就最好多做几次实验，好好规划一下换行符 <code>\\n</code> 的位置。</p><h3 id="限定每人-每群每天一次" tabindex="-1">限定每人/每群每天一次 <a class="header-anchor" href="#限定每人-每群每天一次" aria-label="Permalink to &quot;限定每人/每群每天一次&quot;">​</a></h3><p>海豹提供了一系列时间变量来调用，以打卡指令为例，可以采用如下两种写法中的一种（示例为每人每天一次，如要每群自行将 <code>$m</code> 换成 <code>$g</code>）：</p><p><strong>写法 1</strong><br> 文本匹配：你需要的文本<br> 表达式为真：<code>$m变量 != $tDate</code><br> 回复：<code>{if 1 {$m变量=$tDate}}你需要的回复文本</code></p><ul><li><code>$m变量</code> 作为标记变量，用 <code>if</code> 是防止它出现在回复文本中。</li></ul><p>文本匹配：你需要的文本<br> 表达式为真：<code>$m变量==$tDate</code></p><ul><li>可以不写在另一条里，选择放到相较于上一条的后面，利用海豹从上往下逐个匹配的机制达成相同效果</li></ul><p>回复：<code>在一天触发多次时的回复</code></p><p><strong>写法 2</strong><br> 文本匹配：你需要的文本<br> 回复：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{%</span></span>
<span class="line"><span>if $m变量 != $tDate {</span></span>
<span class="line"><span>  $t输出 = \`你需要的回复文本\`;</span></span>
<span class="line"><span>  $m变量 = $tDate //对其赋值，作为标记</span></span>
<span class="line"><span>} else {</span></span>
<span class="line"><span>  $t输出 = \`在一天触发多次时的回复\`</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>%}</span></span>
<span class="line"><span>{$t输出}</span></span></code></pre></div><p>以上两种写法实现效果没有差别，具体使用哪种请自行决断。</p><h3 id="条件语句嵌套条件算符-多条件条件语句" tabindex="-1">条件语句嵌套条件算符，多条件条件语句 <a class="header-anchor" href="#条件语句嵌套条件算符-多条件条件语句" aria-label="Permalink to &quot;条件语句嵌套条件算符，多条件条件语句&quot;">​</a></h3><p>以石头剪刀布为例，为了实现骰子随机出招的效果，令 <code>$tRand=d3</code>，然后根据 <code>$tRand</code> 的情况赋值 <code>$tDicePlay</code>。通过骰子出招和玩家出招两个变量判断，输出游戏结果，并记录场次。</p><p>为了防止直接使用 <code>{%%}</code> 进行赋值导致的变量显示，需要在最外面写 <code>if 1</code> ，则在生成 <code>$tRand</code>之后再次判断的时候，可以使用 <code>$tDicePlay=条件算符</code>，或是再新开一行用条件算符或者条件语句实现。</p><p>以下给出在同一个 <code>if</code> 内直接赋值的写法和新开一行使用条件语句的写法：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{% //在同一个if内直接赋值。可以在赋值时使用条件算符。</span></span>
<span class="line"><span>if 1 {</span></span>
<span class="line"><span>    $tRand=d3;</span></span>
<span class="line"><span>    $tDicePlay = $tRand==1 ? &quot;石头&quot;,</span></span>
<span class="line"><span>                 $tRand==2 ? &quot;剪刀&quot;,</span></span>
<span class="line"><span>                 1 ? &quot;布&quot;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>%}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{% //新开一行赋值</span></span>
<span class="line"><span>if 1 {</span></span>
<span class="line"><span>    $tRand=d3;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>if $tRand==1 {$tDicePlay=&quot;石头&quot;};</span></span>
<span class="line"><span>if $tRand==2 {$tDicePlay=&quot;剪刀&quot;};</span></span>
<span class="line"><span>if $tRand==3 {$tDicePlay=&quot;布&quot;}</span></span>
<span class="line"><span>%}</span></span></code></pre></div><p>两种写法实现效果相同，石头剪刀布内在这里采用了第一种，实际上没有差别。</p><p>生成骰子出招并获取玩家出招之后，就开始判断。这里除了平局可以使用 <code>$tDicePlay==$t0</code> 省事之外，其他的都需要在条件中用多个进行嵌套。</p><div class="warning custom-block"><p class="custom-block-title">注意：条件判断</p><p>豹语语法中，判断时条件中的 <code>||</code> 和 <code>&amp;&amp;</code> 是从左往右计算的，如果后面有需要优先计算与或的东西，请加好括号。</p></div><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>if $t0 == $tDicePlay {</span></span>
<span class="line"><span>    $t输出 = \`那我出{$tDicePlay}！{$t玩家}出的是{$t0}啊，我们平局了。\`;</span></span>
<span class="line"><span>    $mPlayerTime = $mPlayerTime + 1</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>if ($t0==&quot;剪刀&quot; &amp;&amp; $tDicePlay==&quot;石头&quot;) || ($t0==&quot;石头&quot; &amp;&amp; $tDicePlay==&quot;布&quot;) || ($t0==&quot;布&quot; &amp;&amp; $tDicePlay==&quot;剪刀&quot;) {</span></span>
<span class="line"><span>    $t输出 = \`那我出{$tDicePlay}！{$t玩家}出的是{$t0}啊，我赢了。\`;</span></span>
<span class="line"><span>    $mPlayerTime = $mPlayerTime + 1;</span></span>
<span class="line"><span>    $mPlayerLose = $mPlayerLose + 1</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span>if ($t0==&quot;石头&quot; &amp;&amp; $tDicePlay==&quot;剪刀&quot;) || ($t0==&quot;布&quot; &amp;&amp; $tDicePlay==&quot;石头&quot;) || ($t0==&quot;剪刀&quot; &amp;&amp; $tDicePlay==&quot;布&quot;) {</span></span>
<span class="line"><span>    $t输出 = \`那我出{$tDicePlay}！{$t玩家}出的是{$t0}啊，你赢了。\`;</span></span>
<span class="line"><span>    $mPlayerTime = $mPlayerTime + 1;</span></span>
<span class="line"><span>    $mPlayerWin = $mPlayerWin + 1</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="同时使用前缀和后缀匹配-以匹配-axxxxxxxb-型文本" tabindex="-1">同时使用前缀和后缀匹配，以匹配 <code>AxxxxxxxB</code> 型文本 <a class="header-anchor" href="#同时使用前缀和后缀匹配-以匹配-axxxxxxxb-型文本" aria-label="Permalink to &quot;同时使用前缀和后缀匹配，以匹配 \`AxxxxxxxB\` 型文本&quot;">​</a></h3><p>前缀匹配：<code>A</code><br> 后缀匹配：<code>B</code><br> 回复：<code>怎么辉石呢</code></p>`,23)),n("div",v,[s[3]||(s[3]=n("p",{class:"custom-block-title"},"示例",-1)),a(o,null,{default:p(()=>[a(i,{label:"输入：AB"},{default:p(()=>[a(e,{messages:[{content:"AB",send:!0},{content:"怎么辉石呢"}]})]),_:1}),a(i,{label:"输入：A间隔B"},{default:p(()=>[a(e,{messages:[{content:"A间隔B",send:!0},{content:"怎么辉石呢"}]})]),_:1}),a(i,{label:"输入：A（无回复）"},{default:p(()=>[a(e,{messages:[{content:"A",send:!0}]})]),_:1}),a(i,{label:"输入：B（无回复）"},{default:p(()=>[a(e,{messages:[{content:"B",send:!0}]})]),_:1})]),_:1})]),s[9]||(s[9]=t('<h3 id="随机看图" tabindex="-1">随机看图 <a class="header-anchor" href="#随机看图" aria-label="Permalink to &quot;随机看图&quot;">​</a></h3><p><img src="'+h+'" alt="随机看图"></p><h3 id="单人模组" tabindex="-1">单人模组 <a class="header-anchor" href="#单人模组" aria-label="Permalink to &quot;单人模组&quot;">​</a></h3>',3)),n("div",y,[s[4]||(s[4]=n("p",{class:"custom-block-title"},"示例",-1)),a(e,{messages:[{content:"开始吧 @海豹核心",send:!0},{content:"那么，故事就这么开始了？如果你想听的话，回复我：说下去"},{content:"说下去 @海豹核心",send:!0},{content:"那么，故事要从一个村子说起……（说下去）"},{content:"说下去 @海豹核心",send:!0},{content:"这个村子有一户人家，门前有两棵树"},{content:"说下去 @海豹核心",send:!0},{content:"一棵是函树，一棵是反函树"},{content:"说下去 @海豹核心",send:!0},{content:"我讲完了。"}]})]),s[10]||(s[10]=t('<p>具体实现，第一段</p><p><img src="'+u+'" alt="单人模组第一段"></p><p>第二段</p><p><img src="'+k+'" alt="单人模组第二段"></p><p>这两段较为常规，第三段开始变形了：</p><p><img src="'+m+`" alt="单人模组第三段"></p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{%</span></span>
<span class="line"><span>    if $mStory == 4 { $mStory = 5 };</span></span>
<span class="line"><span>    if $mStory == 3 { $mStory = 4 };</span></span>
<span class="line"><span>    if $mStory == 2 { $mStory = 3 };</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    $mStory == 3 ? &#39;这个村子有一户人家，门前有两棵树&#39;,</span></span>
<span class="line"><span>    $mStory == 4 ? &#39;一棵是函树，一棵是反函树&#39;,</span></span>
<span class="line"><span>    $mStory == 5 ? &#39;我讲完了。&#39;,</span></span>
<span class="line"><span>    1 ? &#39;？&#39;</span></span>
<span class="line"><span>%}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>{% if $mStory == 5 { $mStory=0 } %}</span></span></code></pre></div>`,7))])}const D=c(g,[["render",_]]);export{T as __pageData,D as default};
