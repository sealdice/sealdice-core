import{_ as o,C as n,c as p,o as h,a8 as d,G as a,j as s,w as i}from"./chunks/framework.bOCt8wBo.js";const f=JSON.parse('{"title":"插件的工程化编写","description":"","frontmatter":{"lang":"zh-cn","title":"插件的工程化编写"},"headers":[],"relativePath":"advanced/js_project.md","filePath":"advanced/js_project.md","lastUpdated":1758531130000}'),c={name:"advanced/js_project.md"};function r(k,e,u,g,b,m){const l=n("PluginTabsTab"),t=n("PluginTabs");return h(),p("div",null,[e[4]||(e[4]=d('<h1 id="插件的工程化编写" tabindex="-1">插件的工程化编写 <a class="header-anchor" href="#插件的工程化编写" aria-label="Permalink to &quot;插件的工程化编写&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">本节内容</p><p>本节将介绍如何使用 Node.js 项目编译出海豹可使用的插件，面向有前端经验的开发者。</p><p>我们假定你了解如何使用前端工具链，你应当具备诸如命令行、Node.js、npm/pnpm 等工具的使用知识。如果你对这些内容感到陌生，请自行了解或转至 <a href="./js_start.html#单-js-文件编写插件">使用单 JS 文件编写</a>，手册不会介绍这些相关背景知识。</p></div><p>如果你打算使用 TypeScript，或者需要编写大型插件，希望更加工程化以方便维护，可以创建项目使用前端工具链来编译出插件。</p><p>海豹提供了相应的 <a href="https://github.com/sealdice/sealdice-js-ext-template" target="_blank" rel="noreferrer">模板项目</a>。注册扩展和指令的代码已经写好，可以直接编译出一个可直接装载的 JS 扩展文件。</p><h2 id="clone-或下载模板项目" tabindex="-1">Clone 或下载模板项目 <a class="header-anchor" href="#clone-或下载模板项目" aria-label="Permalink to &quot;Clone 或下载模板项目&quot;">​</a></h2><p>推荐的流程：</p><ol><li>在 <a href="https://github.com/sealdice/sealdice-js-ext-template" target="_blank" rel="noreferrer">模板项目仓库</a> 点击 Use this template 按钮，使用该模板在自己的 GitHub 上创建一个扩展的仓库，并设置为自己的扩展的名字；</li><li><code>git clone</code> 到本地，进行开发。</li></ol><p>如果不打算使用 GitHub 托管仓库，希望先在本地编写：</p><ol><li>在 <a href="https://github.com/sealdice/sealdice-js-ext-template" target="_blank" rel="noreferrer">模板项目仓库</a> 点击 Code 按钮，在出现的浮窗中选择 Download ZIP，这样就会下载一个压缩包；</li><li>解压后进行开发。</li></ol><h2 id="补全信息" tabindex="-1">补全信息 <a class="header-anchor" href="#补全信息" aria-label="Permalink to &quot;补全信息&quot;">​</a></h2><p>当插件开发完成后（或者开始开发时），你还需要修改几处地方：</p><ul><li><code>header.txt</code>：这个文件是你插件的描述信息；</li><li><code>tools/build-config.js</code>：最开头一行 <code>var filename = &#39;sealdce-js-ext.js&#39;;</code> 改成你中意的名字，注意不要与现有的重名。<strong>这决定了编译时输出的插件文件名。</strong></li><li>（可选）<code>package.json</code>：修改其中 <code>name</code> <code>version</code> <code>description</code> 等项目描述信息，不过不修改也不会影响编译。</li></ul><h2 id="使用和编译" tabindex="-1">使用和编译 <a class="header-anchor" href="#使用和编译" aria-label="Permalink to &quot;使用和编译&quot;">​</a></h2><p>在确认你所使用的包管理器后，在命令行使用如下命令安装依赖：</p>',14)),a(t,{sharedStateKey:"npm"},{default:i(()=>[a(l,{label:"npm"},{default:i(()=>[...e[0]||(e[0]=[s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"npm"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," install")])])])],-1)])]),_:1}),a(l,{label:"pnpm"},{default:i(()=>[...e[1]||(e[1]=[s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"pnpm"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," install")])])])],-1)])]),_:1})]),_:1}),e[5]||(e[5]=s("p",null,"当你写好了代码，需要工程编译为插件的单 js 文件以便上传到海豹骰时，在命令行使用如下命令：",-1)),a(t,{sharedStateKey:"npm"},{default:i(()=>[a(l,{label:"npm"},{default:i(()=>[...e[2]||(e[2]=[s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"npm"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," run"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," build")])])])],-1)])]),_:1}),a(l,{label:"pnpm"},{default:i(()=>[...e[3]||(e[3]=[s("div",{class:"language-bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"pnpm"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," run"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," build")])])])],-1)])]),_:1})]),_:1}),e[6]||(e[6]=d(`<p>编译成功的 js 文件在 <code>dist</code> 目录下，默认的名字是 <code>sealdce-js-ext.js</code>。</p><h2 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h2><p>只列出其中主要的一些文件</p><ul><li><code>src</code><ul><li><code>index.ts</code>：你的扩展的代码就写在这个文件里。</li></ul></li><li><code>tools</code><ul><li><code>build-config.js</code>：一些编译的配置，影响 <code>index.ts</code> 编译成 js 文件的方式；</li><li><code>build.js</code>：在命令 <code>npm run build</code> 执行时所运行的脚本，用于读取 <code>build-config</code> 并按照配置进行编译。</li></ul></li><li><code>types</code><ul><li><code>seal.d.ts</code>：类型文件，海豹核心提供的扩展 API。</li></ul></li><li><code>header.txt</code>：扩展头信息，会在编译时自动加到目标文件头部；</li><li><code>package.json</code>：命令 <code>npm install</code> 时就在安装这个文件里面所指示的依赖包；</li><li><code>tsconfig.json</code>：TypeScript 的配置文件。</li></ul><h2 id="其他问题" tabindex="-1">其他问题 <a class="header-anchor" href="#其他问题" aria-label="Permalink to &quot;其他问题&quot;">​</a></h2><h3 id="我能在项目中引用-npm-包吗" tabindex="-1">我能在项目中引用 npm 包吗？ <a class="header-anchor" href="#我能在项目中引用-npm-包吗" aria-label="Permalink to &quot;我能在项目中引用 npm 包吗？&quot;">​</a></h3><p>当然可以，像正常的前端项目一样，你可以在其中引用其他 npm 包，比如模板项目中就为你引入了常用的 <code>lodash-es</code>。</p><p>一般来说纯 JS 编写的包都是可以引用的，一些强 native 相关的包可能存在兼容性问题，你需要自行尝试。</p><p>推荐你尽量使用 esm 格式的包，不过 commonjs 格式的包也是可以使用的，如 <code>dayjs</code>。其他格式的支持和更多问题排查，请查阅模板项目所使用的构建工具 esbuild 的文档，<code>tools/build-config.js</code> 中即是 esbuild 的配置项。</p><h3 id="我想使用的-api-没有被自动提示-直接使用被提示错误-如何解决" tabindex="-1">我想使用的 API 没有被自动提示，直接使用被提示错误，如何解决？ <a class="header-anchor" href="#我想使用的-api-没有被自动提示-直接使用被提示错误-如何解决" aria-label="Permalink to &quot;我想使用的 API 没有被自动提示，直接使用被提示错误，如何解决？&quot;">​</a></h3><p><code>types/seal.d.ts</code> 文件中维护了海豹提供的 API，但目前来说维护的并不完全。如果你发现有一些存在的 API 未被提示，可以手动在 <code>types/seal.d.ts</code> 补上来解决报错。</p><p><strong>有时 <code>seal.d.ts</code> 会有更新，可以去模板项目仓库看看有没有最新的，有的话可以替换到你的项目中。也非常欢迎你向模板仓库提 PR 来帮忙完善。</strong></p><h3 id="默认输出的插件代码是压缩过的-如何尽量保持产物的可读性" tabindex="-1">默认输出的插件代码是压缩过的，如何尽量保持产物的可读性？ <a class="header-anchor" href="#默认输出的插件代码是压缩过的-如何尽量保持产物的可读性" aria-label="Permalink to &quot;默认输出的插件代码是压缩过的，如何尽量保持产物的可读性？&quot;">​</a></h3><p>调整 <code>tools/build-config.js</code> 中的选项，关闭 minify：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  build: {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    minify: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,15))])}const _=o(c,[["render",r]]);export{f as __pageData,_ as default};
