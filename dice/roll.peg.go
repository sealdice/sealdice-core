package dice

// Code generated by C:\Users\fy0\go\bin\peg.exe -switch -inline dice/roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleeBase
	rulee
	ruleeOne
	ruleassign_expr
	rules0
	ruleblock
	rulestmtElse
	rulestmtIf
	rulee0
	ruleeSimpleSwitch
	ruleeTernary
	ruleeBitwise
	ruleeBitwise1
	ruleeComp
	rulee1
	rulee2
	rulee3
	rulee4
	rulee5
	ruledndDiceSuffix
	rulekqDiceOp
	rule_dnumber
	rulesimpleDice2
	rulewodDicePool
	ruledoubleCrossDicePool
	ruleeDice
	rulelaNumberOrLeftParen
	ruleeDice2
	ruleeDice3
	ruleeDice4
	rulevalue
	rulenumber
	ruleidentifier
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulebitwiseOr
	rulelogicOr
	rulebitwiseAnd
	rulelogicAnd
	rulesp
	rulelt
	rulegt
	rulele
	rulege
	ruleeq
	rulene
	rulestrPart
	rulestrPart1
	rulestrPart2
	rulestrPart3
	rulefstring
	ruleescape
	rulest_expr
	ruleest
	rulest_assign_multi
	rulest_assign
	rulest_modify_multi_1
	rulest_modify_rest1
	rulest_modify_multi_2
	rulest_modify_multi_rest
	rulest_modify2
	rulest_modify_rest
	rulest_name1
	rulest_name2
	ruleid_ch0
	ruleid_ch
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
	ruleAction49
	ruleAction50
	ruleAction51
	ruleAction52
	ruleAction53
	ruleAction54
	ruleAction55
	ruleAction56
	ruleAction57
	ruleAction58
	ruleAction59
	ruleAction60
	ruleAction61
	ruleAction62
	ruleAction63
	ruleAction64
	ruleAction65
	ruleAction66
	ruleAction67
	ruleAction68
	ruleAction69
	ruleAction70
	ruleAction71
	ruleAction72
	ruleAction73
	ruleAction74
	ruleAction75
	ruleAction76
	ruleAction77
	ruleAction78
	rulePegText
	ruleAction79
	ruleAction80
	ruleAction81
	ruleAction82
	ruleAction83
	ruleAction84
	ruleAction85
	ruleAction86
	ruleAction87
	ruleAction88
	ruleAction89
	ruleAction90
	ruleAction91
	ruleAction92
	ruleAction93
	ruleAction94
	ruleAction95
	ruleAction96
	ruleAction97
	ruleAction98
	ruleAction99
	ruleAction100
	ruleAction101
	ruleAction102
	ruleAction103
	ruleAction104
	ruleAction105
)

var rul3s = [...]string{
	"Unknown",
	"eBase",
	"e",
	"eOne",
	"assign_expr",
	"s0",
	"block",
	"stmtElse",
	"stmtIf",
	"e0",
	"eSimpleSwitch",
	"eTernary",
	"eBitwise",
	"eBitwise1",
	"eComp",
	"e1",
	"e2",
	"e3",
	"e4",
	"e5",
	"dndDiceSuffix",
	"kqDiceOp",
	"_dnumber",
	"simpleDice2",
	"wodDicePool",
	"doubleCrossDicePool",
	"eDice",
	"laNumberOrLeftParen",
	"eDice2",
	"eDice3",
	"eDice4",
	"value",
	"number",
	"identifier",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"bitwiseOr",
	"logicOr",
	"bitwiseAnd",
	"logicAnd",
	"sp",
	"lt",
	"gt",
	"le",
	"ge",
	"eq",
	"ne",
	"strPart",
	"strPart1",
	"strPart2",
	"strPart3",
	"fstring",
	"escape",
	"st_expr",
	"est",
	"st_assign_multi",
	"st_assign",
	"st_modify_multi_1",
	"st_modify_rest1",
	"st_modify_multi_2",
	"st_modify_multi_rest",
	"st_modify2",
	"st_modify_rest",
	"st_name1",
	"st_name2",
	"id_ch0",
	"id_ch",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
	"Action49",
	"Action50",
	"Action51",
	"Action52",
	"Action53",
	"Action54",
	"Action55",
	"Action56",
	"Action57",
	"Action58",
	"Action59",
	"Action60",
	"Action61",
	"Action62",
	"Action63",
	"Action64",
	"Action65",
	"Action66",
	"Action67",
	"Action68",
	"Action69",
	"Action70",
	"Action71",
	"Action72",
	"Action73",
	"Action74",
	"Action75",
	"Action76",
	"Action77",
	"Action78",
	"PegText",
	"Action79",
	"Action80",
	"Action81",
	"Action82",
	"Action83",
	"Action84",
	"Action85",
	"Action86",
	"Action87",
	"Action88",
	"Action89",
	"Action90",
	"Action91",
	"Action92",
	"Action93",
	"Action94",
	"Action95",
	"Action96",
	"Action97",
	"Action98",
	"Action99",
	"Action100",
	"Action101",
	"Action102",
	"Action103",
	"Action104",
	"Action105",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type DiceRollParser struct {
	RollExpression

	Buffer string
	buffer []rune
	rules  [181]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *DiceRollParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *DiceRollParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *DiceRollParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *DiceRollParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *DiceRollParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *DiceRollParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *DiceRollParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeHalt)
		case ruleAction1:
			p.AddOperator(TypeClearDetail)
		case ruleAction2:
			p.AddValueStr(string(text))
		case ruleAction3:
			p.AddStore()
		case ruleAction4:
			p.AddOperator(TypePop)
		case ruleAction5:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction6:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction7:
			p.PopAndSetOffset()
		case ruleAction8:
			p.AddValueStr("")
		case ruleAction9:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction10:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction11:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction12:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction13:
			p.PopAndSetOffset()
		case ruleAction14:
			p.CounterPush()
		case ruleAction15:
			p.CounterAdd(1)
		case ruleAction16:
			p.AddValueStr("")
			limit := p.CounterPop() + 1
			for i := int64(0); i < limit; i++ {
				p.PopAndSetOffset()
			}
		case ruleAction17:
			p.AddLeftValueMark()
		case ruleAction18:
			p.AddOperator(TypeBitwiseOr)
		case ruleAction19:
			p.AddLeftValueMark()
		case ruleAction20:
			p.AddOperator(TypeBitwiseAnd)
		case ruleAction21:
			p.AddLeftValueMark()
		case ruleAction22:
			p.AddOperator(TypeCompLT)
		case ruleAction23:
			p.AddLeftValueMark()
		case ruleAction24:
			p.AddOperator(TypeCompLE)
		case ruleAction25:
			p.AddLeftValueMark()
		case ruleAction26:
			p.AddOperator(TypeCompEQ)
		case ruleAction27:
			p.AddLeftValueMark()
		case ruleAction28:
			p.AddOperator(TypeCompNE)
		case ruleAction29:
			p.AddLeftValueMark()
		case ruleAction30:
			p.AddOperator(TypeCompGE)
		case ruleAction31:
			p.AddLeftValueMark()
		case ruleAction32:
			p.AddOperator(TypeCompGT)
		case ruleAction33:
			p.AddLeftValueMark()
		case ruleAction34:
			p.AddOperator(TypeAdd)
		case ruleAction35:
			p.AddLeftValueMark()
		case ruleAction36:
			p.AddOperator(TypeSubtract)
		case ruleAction37:
			p.AddLeftValueMark()
		case ruleAction38:
			p.AddOperator(TypeMultiply)
		case ruleAction39:
			p.AddLeftValueMark()
		case ruleAction40:
			p.AddOperator(TypeDivide)
		case ruleAction41:
			p.AddLeftValueMark()
		case ruleAction42:
			p.AddOperator(TypeModulus)
		case ruleAction43:
			p.AddLeftValueMark()
		case ruleAction44:
			p.AddOperator(TypeExponentiation)
		case ruleAction45:
			p.AddOperator(TypeNegation)
		case ruleAction46:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetK)
		case ruleAction47:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetQ)
		case ruleAction48:
			p.AddOperator(TypeDiceSetK)
		case ruleAction49:
			p.AddOperator(TypeDiceSetQ)
		case ruleAction50:
			p.AddOperatorWithInt64(TypeDiceSetK, 1)
		case ruleAction51:
			p.AddOperatorWithInt64(TypeDiceSetQ, 1)
		case ruleAction52:
			p.AddOperator(TypeWodSetInit)
		case ruleAction53:
			p.AddOperator(TypeWodSetPool)
		case ruleAction54:
			p.AddOperator(TypeDCSetInit)
		case ruleAction55:
			p.AddOperator(TypeDCSetPool)
		case ruleAction56:
			p.AddValue("2")
			p.AddLeftValueMark()
		case ruleAction57:
			p.AddOperator(TypeDice)
		case ruleAction58:
			p.AddValue("1")
			p.AddLeftValueMark()
		case ruleAction59:
			p.AddOperator(TypeDice)
		case ruleAction60:
			p.AddValue("2")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction61:
			p.AddValue("1")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction62:
			p.AddOperator(TypeWodSetPoints)
		case ruleAction63:
			p.AddOperator(TypeWodSetThreshold)
		case ruleAction64:
			p.AddOperator(TypeWodSetThresholdQ)
		case ruleAction65:
			p.AddOperator(TypeDiceWod)
		case ruleAction66:
			p.AddOperator(TypeDCSetPoints)
		case ruleAction67:
			p.AddOperator(TypeDiceDC)
		case ruleAction68:
			p.AddLeftValueMark()
		case ruleAction69:
			p.AddOperator(TypeDice)
		case ruleAction70:
			p.AddOperator(TypeDicePenalty)
		case ruleAction71:
			p.AddValue("1")
			p.AddOperator(TypeDicePenalty)
		case ruleAction72:
			p.AddOperator(TypeDiceBonus)
		case ruleAction73:
			p.AddValue("1")
			p.AddOperator(TypeDiceBonus)
		case ruleAction74:
			p.AddValue("0")
			p.AddValue("0")
			p.AddOperator(TypeDiceFate)
		case ruleAction75:
			p.AddLoadVarnameForThis(text)
		case ruleAction76:
			p.WriteCode(TypeConvertInt, 0, "")
		case ruleAction77:
			p.WriteCode(TypeConvertStr, 0, "")
		case ruleAction78:
			p.AddLoadVarname(string(text))
		case ruleAction79:
			p.AddValue(string(text))
		case ruleAction80:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction81:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction82:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction83:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction84:
			p.CounterPush()
		case ruleAction85:
			p.CounterAdd(1)
		case ruleAction86:
			p.CounterAdd(1)
		case ruleAction87:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction88:
			p.CounterPush()
		case ruleAction89:
			p.CounterAdd(1)
		case ruleAction90:
			p.CounterAdd(1)
		case ruleAction91:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction92:
			p.CounterPush()
		case ruleAction93:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction94:
			p.CounterPush()
		case ruleAction95:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction96:
			p.AddStName()
		case ruleAction97:
			p.AddStName()
		case ruleAction98:
			p.CodePush()
		case ruleAction99:
			p.CodePop()
			p.AddStoreComputed(text)
			p.AddStName()
		case ruleAction100:
			p.AddStModify("+", text)
		case ruleAction101:
			p.AddStModify("-", text)
		case ruleAction102:
			p.AddStModify("+", text)
		case ruleAction103:
			p.AddStModify("-", text)
		case ruleAction104:
			p.AddValueStr(text)
		case ruleAction105:
			p.AddValueStr(text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *DiceRollParser) Init(options ...func(*DiceRollParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 eBase <- <(e Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulee]() {
					goto l0
				}
				{
					add(ruleAction0, position)
				}
				add(ruleeBase, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e <- <(('^' 's' 't' st_expr) / (eOne (';' sp Action1 eOne?)*))> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				{
					position5, tokenIndex5 := position, tokenIndex
					if buffer[position] != rune('^') {
						goto l6
					}
					position++
					if buffer[position] != rune('s') {
						goto l6
					}
					position++
					if buffer[position] != rune('t') {
						goto l6
					}
					position++
					{
						position7 := position
						{
							position8, tokenIndex8 := position, tokenIndex
							{
								position10 := position
								{
									position11, tokenIndex11 := position, tokenIndex
									if !_rules[rulest_name2]() {
										goto l12
									}
									{
										position13 := position
										if !_rules[rulesp]() {
											goto l12
										}
										{
											position14, tokenIndex14 := position, tokenIndex
											if buffer[position] != rune('+') {
												goto l15
											}
											position++
											if buffer[position] != rune('=') {
												goto l15
											}
											position++
											if !_rules[rulesp]() {
												goto l15
											}
											{
												position16 := position
												if !_rules[rulee0]() {
													goto l15
												}
												add(rulePegText, position16)
											}
											{
												add(ruleAction100, position)
											}
											goto l14
										l15:
											position, tokenIndex = position14, tokenIndex14
											if buffer[position] != rune('-') {
												goto l12
											}
											position++
											if buffer[position] != rune('=') {
												goto l12
											}
											position++
											if !_rules[rulesp]() {
												goto l12
											}
											{
												position18 := position
												if !_rules[rulee0]() {
													goto l12
												}
												add(rulePegText, position18)
											}
											{
												add(ruleAction101, position)
											}
										}
									l14:
										add(rulest_modify_rest1, position13)
									}
									goto l11
								l12:
									position, tokenIndex = position11, tokenIndex11
									if !_rules[rulest_name1]() {
										goto l9
									}
									if !_rules[rulest_modify_rest]() {
										goto l9
									}
								}
							l11:
								if !_rules[rulesp]() {
									goto l9
								}
								{
									position20, tokenIndex20 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l20
									}
									position++
									goto l21
								l20:
									position, tokenIndex = position20, tokenIndex20
								}
							l21:
								if !_rules[rulesp]() {
									goto l9
								}
								if !_rules[rulest_modify_multi_rest]() {
									goto l9
								}
								add(rulest_modify_multi_1, position10)
							}
							goto l8
						l9:
							position, tokenIndex = position8, tokenIndex8
							{
								position23 := position
								{
									position26 := position
									{
										position27, tokenIndex27 := position, tokenIndex
										if !_rules[rulest_name2]() {
											goto l28
										}
										if !_rules[rulesp]() {
											goto l28
										}
										{
											position29, tokenIndex29 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l30
											}
											position++
											goto l29
										l30:
											position, tokenIndex = position29, tokenIndex29
											if buffer[position] != rune('=') {
												goto l28
											}
											position++
										}
									l29:
										if !_rules[rulesp]() {
											goto l28
										}
										if !_rules[ruleest]() {
											goto l28
										}
										{
											add(ruleAction96, position)
										}
										goto l27
									l28:
										position, tokenIndex = position27, tokenIndex27
										if !_rules[rulest_name1]() {
											goto l32
										}
										if !_rules[ruleest]() {
											goto l32
										}
										{
											add(ruleAction97, position)
										}
										goto l27
									l32:
										position, tokenIndex = position27, tokenIndex27
										if buffer[position] != rune('&') {
											goto l22
										}
										position++
										if !_rules[rulest_name2]() {
											goto l22
										}
										if !_rules[rulesp]() {
											goto l22
										}
										{
											position34, tokenIndex34 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l35
											}
											position++
											goto l34
										l35:
											position, tokenIndex = position34, tokenIndex34
											if buffer[position] != rune('=') {
												goto l22
											}
											position++
										}
									l34:
										if !_rules[rulesp]() {
											goto l22
										}
										{
											add(ruleAction98, position)
										}
										{
											position37 := position
											if !_rules[ruleest]() {
												goto l22
											}
											add(rulePegText, position37)
										}
										{
											add(ruleAction99, position)
										}
									}
								l27:
									add(rulest_assign, position26)
								}
								if !_rules[rulesp]() {
									goto l22
								}
								{
									position39, tokenIndex39 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l39
									}
									position++
									goto l40
								l39:
									position, tokenIndex = position39, tokenIndex39
								}
							l40:
								if !_rules[rulesp]() {
									goto l22
								}
							l24:
								{
									position25, tokenIndex25 := position, tokenIndex
									{
										position41 := position
										{
											position42, tokenIndex42 := position, tokenIndex
											if !_rules[rulest_name2]() {
												goto l43
											}
											if !_rules[rulesp]() {
												goto l43
											}
											{
												position44, tokenIndex44 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l45
												}
												position++
												goto l44
											l45:
												position, tokenIndex = position44, tokenIndex44
												if buffer[position] != rune('=') {
													goto l43
												}
												position++
											}
										l44:
											if !_rules[rulesp]() {
												goto l43
											}
											if !_rules[ruleest]() {
												goto l43
											}
											{
												add(ruleAction96, position)
											}
											goto l42
										l43:
											position, tokenIndex = position42, tokenIndex42
											if !_rules[rulest_name1]() {
												goto l47
											}
											if !_rules[ruleest]() {
												goto l47
											}
											{
												add(ruleAction97, position)
											}
											goto l42
										l47:
											position, tokenIndex = position42, tokenIndex42
											if buffer[position] != rune('&') {
												goto l25
											}
											position++
											if !_rules[rulest_name2]() {
												goto l25
											}
											if !_rules[rulesp]() {
												goto l25
											}
											{
												position49, tokenIndex49 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l50
												}
												position++
												goto l49
											l50:
												position, tokenIndex = position49, tokenIndex49
												if buffer[position] != rune('=') {
													goto l25
												}
												position++
											}
										l49:
											if !_rules[rulesp]() {
												goto l25
											}
											{
												add(ruleAction98, position)
											}
											{
												position52 := position
												if !_rules[ruleest]() {
													goto l25
												}
												add(rulePegText, position52)
											}
											{
												add(ruleAction99, position)
											}
										}
									l42:
										add(rulest_assign, position41)
									}
									if !_rules[rulesp]() {
										goto l25
									}
									{
										position54, tokenIndex54 := position, tokenIndex
										if buffer[position] != rune(',') {
											goto l54
										}
										position++
										goto l55
									l54:
										position, tokenIndex = position54, tokenIndex54
									}
								l55:
									if !_rules[rulesp]() {
										goto l25
									}
									goto l24
								l25:
									position, tokenIndex = position25, tokenIndex25
								}
								add(rulest_assign_multi, position23)
							}
							goto l8
						l22:
							position, tokenIndex = position8, tokenIndex8
							{
								position56 := position
								if !_rules[rulest_modify2]() {
									goto l6
								}
								if !_rules[rulesp]() {
									goto l6
								}
								{
									position57, tokenIndex57 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l57
									}
									position++
									goto l58
								l57:
									position, tokenIndex = position57, tokenIndex57
								}
							l58:
								if !_rules[rulesp]() {
									goto l6
								}
								if !_rules[rulest_modify_multi_rest]() {
									goto l6
								}
								add(rulest_modify_multi_2, position56)
							}
						}
					l8:
						add(rulest_expr, position7)
					}
					goto l5
				l6:
					position, tokenIndex = position5, tokenIndex5
					if !_rules[ruleeOne]() {
						goto l3
					}
				l59:
					{
						position60, tokenIndex60 := position, tokenIndex
						if buffer[position] != rune(';') {
							goto l60
						}
						position++
						if !_rules[rulesp]() {
							goto l60
						}
						{
							add(ruleAction1, position)
						}
						{
							position62, tokenIndex62 := position, tokenIndex
							if !_rules[ruleeOne]() {
								goto l62
							}
							goto l63
						l62:
							position, tokenIndex = position62, tokenIndex62
						}
					l63:
						goto l59
					l60:
						position, tokenIndex = position60, tokenIndex60
					}
				}
			l5:
				add(rulee, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 eOne <- <(sp (s0 / e0 / assign_expr))> */
		func() bool {
			position64, tokenIndex64 := position, tokenIndex
			{
				position65 := position
				if !_rules[rulesp]() {
					goto l64
				}
				{
					position66, tokenIndex66 := position, tokenIndex
					{
						position68 := position
						{
							position69 := position
							if buffer[position] != rune('i') {
								goto l67
							}
							position++
							if buffer[position] != rune('f') {
								goto l67
							}
							position++
							if !_rules[rulesp]() {
								goto l67
							}
							if !_rules[rulee0]() {
								goto l67
							}
							{
								add(ruleAction5, position)
							}
							if !_rules[ruleblock]() {
								goto l67
							}
							{
								add(ruleAction6, position)
							}
							{
								position72, tokenIndex72 := position, tokenIndex
								{
									position74 := position
									if buffer[position] != rune('e') {
										goto l72
									}
									position++
									if buffer[position] != rune('l') {
										goto l72
									}
									position++
									if buffer[position] != rune('s') {
										goto l72
									}
									position++
									if buffer[position] != rune('e') {
										goto l72
									}
									position++
									if !_rules[rulesp]() {
										goto l72
									}
									if !_rules[ruleblock]() {
										goto l72
									}
									add(rulestmtElse, position74)
								}
								goto l73
							l72:
								position, tokenIndex = position72, tokenIndex72
							}
						l73:
							{
								add(ruleAction7, position)
							}
							{
								add(ruleAction8, position)
							}
							add(rulestmtIf, position69)
						}
						add(rules0, position68)
					}
					goto l66
				l67:
					position, tokenIndex = position66, tokenIndex66
					if !_rules[rulee0]() {
						goto l77
					}
					goto l66
				l77:
					position, tokenIndex = position66, tokenIndex66
					if !_rules[ruleassign_expr]() {
						goto l64
					}
				}
			l66:
				add(ruleeOne, position65)
			}
			return true
		l64:
			position, tokenIndex = position64, tokenIndex64
			return false
		},
		/* 3 assign_expr <- <(identifier Action2 '=' sp e0 Action3)> */
		func() bool {
			position78, tokenIndex78 := position, tokenIndex
			{
				position79 := position
				if !_rules[ruleidentifier]() {
					goto l78
				}
				{
					add(ruleAction2, position)
				}
				if buffer[position] != rune('=') {
					goto l78
				}
				position++
				if !_rules[rulesp]() {
					goto l78
				}
				if !_rules[rulee0]() {
					goto l78
				}
				{
					add(ruleAction3, position)
				}
				add(ruleassign_expr, position79)
			}
			return true
		l78:
			position, tokenIndex = position78, tokenIndex78
			return false
		},
		/* 4 s0 <- <stmtIf> */
		nil,
		/* 5 block <- <((('{' sp '}') / ('{' sp e Action4 '}')) sp)> */
		func() bool {
			position83, tokenIndex83 := position, tokenIndex
			{
				position84 := position
				{
					position85, tokenIndex85 := position, tokenIndex
					if buffer[position] != rune('{') {
						goto l86
					}
					position++
					if !_rules[rulesp]() {
						goto l86
					}
					if buffer[position] != rune('}') {
						goto l86
					}
					position++
					goto l85
				l86:
					position, tokenIndex = position85, tokenIndex85
					if buffer[position] != rune('{') {
						goto l83
					}
					position++
					if !_rules[rulesp]() {
						goto l83
					}
					if !_rules[rulee]() {
						goto l83
					}
					{
						add(ruleAction4, position)
					}
					if buffer[position] != rune('}') {
						goto l83
					}
					position++
				}
			l85:
				if !_rules[rulesp]() {
					goto l83
				}
				add(ruleblock, position84)
			}
			return true
		l83:
			position, tokenIndex = position83, tokenIndex83
			return false
		},
		/* 6 stmtElse <- <('e' 'l' 's' 'e' sp block)> */
		nil,
		/* 7 stmtIf <- <('i' 'f' sp e0 Action5 block Action6 stmtElse? Action7 Action8)> */
		nil,
		/* 8 e0 <- <eTernary> */
		func() bool {
			position90, tokenIndex90 := position, tokenIndex
			{
				position91 := position
				{
					position92 := position
					{
						position93, tokenIndex93 := position, tokenIndex
						if !_rules[ruleeBitwise]() {
							goto l94
						}
						if buffer[position] != rune('?') {
							goto l94
						}
						position++
						if !_rules[rulesp]() {
							goto l94
						}
						{
							add(ruleAction11, position)
						}
						if !_rules[ruleeBitwise]() {
							goto l94
						}
						if buffer[position] != rune(':') {
							goto l94
						}
						position++
						if !_rules[rulesp]() {
							goto l94
						}
						{
							add(ruleAction12, position)
						}
						if !_rules[ruleeBitwise]() {
							goto l94
						}
						{
							add(ruleAction13, position)
						}
						goto l93
					l94:
						position, tokenIndex = position93, tokenIndex93
						if !_rules[ruleeSimpleSwitch]() {
							goto l98
						}
						{
							add(ruleAction14, position)
						}
					l100:
						{
							position101, tokenIndex101 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l101
							}
							position++
							if !_rules[rulesp]() {
								goto l101
							}
							if !_rules[ruleeSimpleSwitch]() {
								goto l101
							}
							{
								add(ruleAction15, position)
							}
							goto l100
						l101:
							position, tokenIndex = position101, tokenIndex101
						}
						{
							add(ruleAction16, position)
						}
						goto l93
					l98:
						position, tokenIndex = position93, tokenIndex93
						if !_rules[ruleeBitwise]() {
							goto l90
						}
					}
				l93:
					add(ruleeTernary, position92)
				}
				add(rulee0, position91)
			}
			return true
		l90:
			position, tokenIndex = position90, tokenIndex90
			return false
		},
		/* 9 eSimpleSwitch <- <(eBitwise '?' sp Action9 eBitwise Action10)> */
		func() bool {
			position104, tokenIndex104 := position, tokenIndex
			{
				position105 := position
				if !_rules[ruleeBitwise]() {
					goto l104
				}
				if buffer[position] != rune('?') {
					goto l104
				}
				position++
				if !_rules[rulesp]() {
					goto l104
				}
				{
					add(ruleAction9, position)
				}
				if !_rules[ruleeBitwise]() {
					goto l104
				}
				{
					add(ruleAction10, position)
				}
				add(ruleeSimpleSwitch, position105)
			}
			return true
		l104:
			position, tokenIndex = position104, tokenIndex104
			return false
		},
		/* 10 eTernary <- <((eBitwise '?' sp Action11 eBitwise ':' sp Action12 eBitwise Action13) / (eSimpleSwitch Action14 (',' sp eSimpleSwitch Action15)* Action16) / eBitwise)> */
		nil,
		/* 11 eBitwise <- <((&{p.flags.DisableBitwiseOp} eComp) / eBitwise1)> */
		func() bool {
			position109, tokenIndex109 := position, tokenIndex
			{
				position110 := position
				{
					position111, tokenIndex111 := position, tokenIndex
					if !(p.flags.DisableBitwiseOp) {
						goto l112
					}
					if !_rules[ruleeComp]() {
						goto l112
					}
					goto l111
				l112:
					position, tokenIndex = position111, tokenIndex111
					{
						position113 := position
						if !_rules[ruleeComp]() {
							goto l109
						}
					l114:
						{
							position115, tokenIndex115 := position, tokenIndex
							{
								position116, tokenIndex116 := position, tokenIndex
								{
									position118, tokenIndex118 := position, tokenIndex
									{
										position120 := position
										if buffer[position] != rune('|') {
											goto l119
										}
										position++
										if buffer[position] != rune('|') {
											goto l119
										}
										position++
										if !_rules[rulesp]() {
											goto l119
										}
										add(rulelogicOr, position120)
									}
									goto l118
								l119:
									position, tokenIndex = position118, tokenIndex118
									{
										position121 := position
										if buffer[position] != rune('|') {
											goto l117
										}
										position++
										if !_rules[rulesp]() {
											goto l117
										}
										add(rulebitwiseOr, position121)
									}
								}
							l118:
								{
									add(ruleAction17, position)
								}
								if !_rules[ruleeComp]() {
									goto l117
								}
								{
									add(ruleAction18, position)
								}
								goto l116
							l117:
								position, tokenIndex = position116, tokenIndex116
								{
									position124, tokenIndex124 := position, tokenIndex
									{
										position126 := position
										{
											position127, tokenIndex127 := position, tokenIndex
											if buffer[position] != rune('&') {
												goto l128
											}
											position++
											if buffer[position] != rune('&') {
												goto l128
											}
											position++
											goto l127
										l128:
											position, tokenIndex = position127, tokenIndex127
											if buffer[position] != rune('&') {
												goto l125
											}
											position++
											if buffer[position] != rune('a') {
												goto l125
											}
											position++
											if buffer[position] != rune('m') {
												goto l125
											}
											position++
											if buffer[position] != rune('p') {
												goto l125
											}
											position++
											if buffer[position] != rune(';') {
												goto l125
											}
											position++
											if buffer[position] != rune('&') {
												goto l125
											}
											position++
											if buffer[position] != rune('a') {
												goto l125
											}
											position++
											if buffer[position] != rune('m') {
												goto l125
											}
											position++
											if buffer[position] != rune('p') {
												goto l125
											}
											position++
											if buffer[position] != rune(';') {
												goto l125
											}
											position++
										}
									l127:
										if !_rules[rulesp]() {
											goto l125
										}
										add(rulelogicAnd, position126)
									}
									goto l124
								l125:
									position, tokenIndex = position124, tokenIndex124
									{
										position129 := position
										{
											position130, tokenIndex130 := position, tokenIndex
											if buffer[position] != rune('&') {
												goto l131
											}
											position++
											goto l130
										l131:
											position, tokenIndex = position130, tokenIndex130
											if buffer[position] != rune('&') {
												goto l115
											}
											position++
											if buffer[position] != rune('a') {
												goto l115
											}
											position++
											if buffer[position] != rune('m') {
												goto l115
											}
											position++
											if buffer[position] != rune('p') {
												goto l115
											}
											position++
											if buffer[position] != rune(';') {
												goto l115
											}
											position++
										}
									l130:
										if !_rules[rulesp]() {
											goto l115
										}
										add(rulebitwiseAnd, position129)
									}
								}
							l124:
								{
									add(ruleAction19, position)
								}
								if !_rules[ruleeComp]() {
									goto l115
								}
								{
									add(ruleAction20, position)
								}
							}
						l116:
							goto l114
						l115:
							position, tokenIndex = position115, tokenIndex115
						}
						add(ruleeBitwise1, position113)
					}
				}
			l111:
				add(ruleeBitwise, position110)
			}
			return true
		l109:
			position, tokenIndex = position109, tokenIndex109
			return false
		},
		/* 12 eBitwise1 <- <(eComp (((logicOr / bitwiseOr) Action17 eComp Action18) / ((logicAnd / bitwiseAnd) Action19 eComp Action20))*)> */
		nil,
		/* 13 eComp <- <(e1 ((lt Action21 e1 Action22) / (ge Action29 e1 Action30) / ((&('>') (gt Action31 e1 Action32)) | (&('!') (ne Action27 e1 Action28)) | (&('=') (eq Action25 e1 Action26)) | (&('<') (le Action23 e1 Action24))))*)> */
		func() bool {
			position135, tokenIndex135 := position, tokenIndex
			{
				position136 := position
				if !_rules[rulee1]() {
					goto l135
				}
			l137:
				{
					position138, tokenIndex138 := position, tokenIndex
					{
						position139, tokenIndex139 := position, tokenIndex
						{
							position141 := position
							{
								position142, tokenIndex142 := position, tokenIndex
								if buffer[position] != rune('<') {
									goto l143
								}
								position++
								goto l142
							l143:
								position, tokenIndex = position142, tokenIndex142
								if buffer[position] != rune('＜') {
									goto l140
								}
								position++
							}
						l142:
							if !_rules[rulesp]() {
								goto l140
							}
							add(rulelt, position141)
						}
						{
							add(ruleAction21, position)
						}
						if !_rules[rulee1]() {
							goto l140
						}
						{
							add(ruleAction22, position)
						}
						goto l139
					l140:
						position, tokenIndex = position139, tokenIndex139
						{
							position147 := position
							{
								position148, tokenIndex148 := position, tokenIndex
								if buffer[position] != rune('>') {
									goto l149
								}
								position++
								if buffer[position] != rune('=') {
									goto l149
								}
								position++
								goto l148
							l149:
								position, tokenIndex = position148, tokenIndex148
								if buffer[position] != rune('＞') {
									goto l146
								}
								position++
								if buffer[position] != rune('＝') {
									goto l146
								}
								position++
							}
						l148:
							if !_rules[rulesp]() {
								goto l146
							}
							add(rulege, position147)
						}
						{
							add(ruleAction29, position)
						}
						if !_rules[rulee1]() {
							goto l146
						}
						{
							add(ruleAction30, position)
						}
						goto l139
					l146:
						position, tokenIndex = position139, tokenIndex139
						{
							switch buffer[position] {
							case '>':
								{
									position153 := position
									{
										position154, tokenIndex154 := position, tokenIndex
										if buffer[position] != rune('>') {
											goto l155
										}
										position++
										goto l154
									l155:
										position, tokenIndex = position154, tokenIndex154
										if buffer[position] != rune('＞') {
											goto l138
										}
										position++
									}
								l154:
									if !_rules[rulesp]() {
										goto l138
									}
									add(rulegt, position153)
								}
								{
									add(ruleAction31, position)
								}
								if !_rules[rulee1]() {
									goto l138
								}
								{
									add(ruleAction32, position)
								}
							case '!':
								{
									position158 := position
									{
										position159, tokenIndex159 := position, tokenIndex
										if buffer[position] != rune('!') {
											goto l160
										}
										position++
										if buffer[position] != rune('=') {
											goto l160
										}
										position++
										goto l159
									l160:
										position, tokenIndex = position159, tokenIndex159
										if buffer[position] != rune('！') {
											goto l138
										}
										position++
										if buffer[position] != rune('＝') {
											goto l138
										}
										position++
									}
								l159:
									if !_rules[rulesp]() {
										goto l138
									}
									add(rulene, position158)
								}
								{
									add(ruleAction27, position)
								}
								if !_rules[rulee1]() {
									goto l138
								}
								{
									add(ruleAction28, position)
								}
							case '=':
								{
									position163 := position
									{
										position164, tokenIndex164 := position, tokenIndex
										if buffer[position] != rune('=') {
											goto l165
										}
										position++
										if buffer[position] != rune('=') {
											goto l165
										}
										position++
										goto l164
									l165:
										position, tokenIndex = position164, tokenIndex164
										if buffer[position] != rune('＝') {
											goto l138
										}
										position++
										if buffer[position] != rune('＝') {
											goto l138
										}
										position++
									}
								l164:
									if !_rules[rulesp]() {
										goto l138
									}
									add(ruleeq, position163)
								}
								{
									add(ruleAction25, position)
								}
								if !_rules[rulee1]() {
									goto l138
								}
								{
									add(ruleAction26, position)
								}
							default:
								{
									position168 := position
									{
										position169, tokenIndex169 := position, tokenIndex
										if buffer[position] != rune('<') {
											goto l170
										}
										position++
										if buffer[position] != rune('=') {
											goto l170
										}
										position++
										goto l169
									l170:
										position, tokenIndex = position169, tokenIndex169
										if buffer[position] != rune('＜') {
											goto l138
										}
										position++
										if buffer[position] != rune('＝') {
											goto l138
										}
										position++
									}
								l169:
									if !_rules[rulesp]() {
										goto l138
									}
									add(rulele, position168)
								}
								{
									add(ruleAction23, position)
								}
								if !_rules[rulee1]() {
									goto l138
								}
								{
									add(ruleAction24, position)
								}
							}
						}

					}
				l139:
					goto l137
				l138:
					position, tokenIndex = position138, tokenIndex138
				}
				add(ruleeComp, position136)
			}
			return true
		l135:
			position, tokenIndex = position135, tokenIndex135
			return false
		},
		/* 14 e1 <- <(e2 ((add Action33 e2 Action34) / (minus Action35 e2 Action36))*)> */
		func() bool {
			position173, tokenIndex173 := position, tokenIndex
			{
				position174 := position
				if !_rules[rulee2]() {
					goto l173
				}
			l175:
				{
					position176, tokenIndex176 := position, tokenIndex
					{
						position177, tokenIndex177 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l178
						}
						{
							add(ruleAction33, position)
						}
						if !_rules[rulee2]() {
							goto l178
						}
						{
							add(ruleAction34, position)
						}
						goto l177
					l178:
						position, tokenIndex = position177, tokenIndex177
						if !_rules[ruleminus]() {
							goto l176
						}
						{
							add(ruleAction35, position)
						}
						if !_rules[rulee2]() {
							goto l176
						}
						{
							add(ruleAction36, position)
						}
					}
				l177:
					goto l175
				l176:
					position, tokenIndex = position176, tokenIndex176
				}
				add(rulee1, position174)
			}
			return true
		l173:
			position, tokenIndex = position173, tokenIndex173
			return false
		},
		/* 15 e2 <- <(e3 ((&('%') (modulus Action41 e3 Action42)) | (&('/') (divide Action39 e3 Action40)) | (&('*') (multiply Action37 e3 Action38)))*)> */
		func() bool {
			position183, tokenIndex183 := position, tokenIndex
			{
				position184 := position
				if !_rules[rulee3]() {
					goto l183
				}
			l185:
				{
					position186, tokenIndex186 := position, tokenIndex
					{
						switch buffer[position] {
						case '%':
							{
								position188 := position
								if buffer[position] != rune('%') {
									goto l186
								}
								position++
								if !_rules[rulesp]() {
									goto l186
								}
								add(rulemodulus, position188)
							}
							{
								add(ruleAction41, position)
							}
							if !_rules[rulee3]() {
								goto l186
							}
							{
								add(ruleAction42, position)
							}
						case '/':
							{
								position191 := position
								{
									position192, tokenIndex192 := position, tokenIndex
									if buffer[position] != rune('/') {
										goto l193
									}
									position++
									goto l192
								l193:
									position, tokenIndex = position192, tokenIndex192
									if buffer[position] != rune('／') {
										goto l186
									}
									position++
								}
							l192:
								if !_rules[rulesp]() {
									goto l186
								}
								add(ruledivide, position191)
							}
							{
								add(ruleAction39, position)
							}
							if !_rules[rulee3]() {
								goto l186
							}
							{
								add(ruleAction40, position)
							}
						default:
							{
								position196 := position
								{
									position197, tokenIndex197 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l198
									}
									position++
									goto l197
								l198:
									position, tokenIndex = position197, tokenIndex197
									if buffer[position] != rune('＊') {
										goto l186
									}
									position++
								}
							l197:
								if !_rules[rulesp]() {
									goto l186
								}
								add(rulemultiply, position196)
							}
							{
								add(ruleAction37, position)
							}
							if !_rules[rulee3]() {
								goto l186
							}
							{
								add(ruleAction38, position)
							}
						}
					}

					goto l185
				l186:
					position, tokenIndex = position186, tokenIndex186
				}
				add(rulee2, position184)
			}
			return true
		l183:
			position, tokenIndex = position183, tokenIndex183
			return false
		},
		/* 16 e3 <- <(e4 (exponentiation Action43 e4 Action44)*)> */
		func() bool {
			position201, tokenIndex201 := position, tokenIndex
			{
				position202 := position
				if !_rules[rulee4]() {
					goto l201
				}
			l203:
				{
					position204, tokenIndex204 := position, tokenIndex
					{
						position205 := position
						{
							position206, tokenIndex206 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l207
							}
							position++
							if !_rules[rulesp]() {
								goto l207
							}
							goto l206
						l207:
							position, tokenIndex = position206, tokenIndex206
							if buffer[position] != rune('*') {
								goto l204
							}
							position++
							if buffer[position] != rune('*') {
								goto l204
							}
							position++
							if !_rules[rulesp]() {
								goto l204
							}
						}
					l206:
						add(ruleexponentiation, position205)
					}
					{
						add(ruleAction43, position)
					}
					if !_rules[rulee4]() {
						goto l204
					}
					{
						add(ruleAction44, position)
					}
					goto l203
				l204:
					position, tokenIndex = position204, tokenIndex204
				}
				add(rulee3, position202)
			}
			return true
		l201:
			position, tokenIndex = position201, tokenIndex201
			return false
		},
		/* 17 e4 <- <((minus e5 Action45) / e5)> */
		func() bool {
			position210, tokenIndex210 := position, tokenIndex
			{
				position211 := position
				{
					position212, tokenIndex212 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l213
					}
					if !_rules[rulee5]() {
						goto l213
					}
					{
						add(ruleAction45, position)
					}
					goto l212
				l213:
					position, tokenIndex = position212, tokenIndex212
					if !_rules[rulee5]() {
						goto l210
					}
				}
			l212:
				add(rulee4, position211)
			}
			return true
		l210:
			position, tokenIndex = position210, tokenIndex210
			return false
		},
		/* 18 e5 <- <((add eDice) / eDice)> */
		func() bool {
			position215, tokenIndex215 := position, tokenIndex
			{
				position216 := position
				{
					position217, tokenIndex217 := position, tokenIndex
					if !_rules[ruleadd]() {
						goto l218
					}
					if !_rules[ruleeDice]() {
						goto l218
					}
					goto l217
				l218:
					position, tokenIndex = position217, tokenIndex217
					if !_rules[ruleeDice]() {
						goto l215
					}
				}
			l217:
				add(rulee5, position216)
			}
			return true
		l215:
			position, tokenIndex = position215, tokenIndex215
			return false
		},
		/* 19 dndDiceSuffix <- <(((('优' '势') / ('k' 'h')) Action46 sp) / ((('劣' '势') / ('k' 'l')) Action47 sp))> */
		func() bool {
			position219, tokenIndex219 := position, tokenIndex
			{
				position220 := position
				{
					position221, tokenIndex221 := position, tokenIndex
					{
						position223, tokenIndex223 := position, tokenIndex
						if buffer[position] != rune('优') {
							goto l224
						}
						position++
						if buffer[position] != rune('势') {
							goto l224
						}
						position++
						goto l223
					l224:
						position, tokenIndex = position223, tokenIndex223
						if buffer[position] != rune('k') {
							goto l222
						}
						position++
						if buffer[position] != rune('h') {
							goto l222
						}
						position++
					}
				l223:
					{
						add(ruleAction46, position)
					}
					if !_rules[rulesp]() {
						goto l222
					}
					goto l221
				l222:
					position, tokenIndex = position221, tokenIndex221
					{
						position226, tokenIndex226 := position, tokenIndex
						if buffer[position] != rune('劣') {
							goto l227
						}
						position++
						if buffer[position] != rune('势') {
							goto l227
						}
						position++
						goto l226
					l227:
						position, tokenIndex = position226, tokenIndex226
						if buffer[position] != rune('k') {
							goto l219
						}
						position++
						if buffer[position] != rune('l') {
							goto l219
						}
						position++
					}
				l226:
					{
						add(ruleAction47, position)
					}
					if !_rules[rulesp]() {
						goto l219
					}
				}
			l221:
				add(ruledndDiceSuffix, position220)
			}
			return true
		l219:
			position, tokenIndex = position219, tokenIndex219
			return false
		},
		/* 20 kqDiceOp <- <(('k' eDice2 Action48)? ('q' eDice2 Action49)? ('d' 'l' eDice2 Action50)? ('d' 'h' eDice2 Action51)?)> */
		func() bool {
			{
				position230 := position
				{
					position231, tokenIndex231 := position, tokenIndex
					if buffer[position] != rune('k') {
						goto l231
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l231
					}
					{
						add(ruleAction48, position)
					}
					goto l232
				l231:
					position, tokenIndex = position231, tokenIndex231
				}
			l232:
				{
					position234, tokenIndex234 := position, tokenIndex
					if buffer[position] != rune('q') {
						goto l234
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l234
					}
					{
						add(ruleAction49, position)
					}
					goto l235
				l234:
					position, tokenIndex = position234, tokenIndex234
				}
			l235:
				{
					position237, tokenIndex237 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l237
					}
					position++
					if buffer[position] != rune('l') {
						goto l237
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l237
					}
					{
						add(ruleAction50, position)
					}
					goto l238
				l237:
					position, tokenIndex = position237, tokenIndex237
				}
			l238:
				{
					position240, tokenIndex240 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l240
					}
					position++
					if buffer[position] != rune('h') {
						goto l240
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l240
					}
					{
						add(ruleAction51, position)
					}
					goto l241
				l240:
					position, tokenIndex = position240, tokenIndex240
				}
			l241:
				add(rulekqDiceOp, position230)
			}
			return true
		},
		/* 21 _dnumber <- <&(('d' / 'D') (number / '('))> */
		func() bool {
			position243, tokenIndex243 := position, tokenIndex
			{
				position244 := position
				{
					position245, tokenIndex245 := position, tokenIndex
					{
						position246, tokenIndex246 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l247
						}
						position++
						goto l246
					l247:
						position, tokenIndex = position246, tokenIndex246
						if buffer[position] != rune('D') {
							goto l243
						}
						position++
					}
				l246:
					{
						position248, tokenIndex248 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l249
						}
						goto l248
					l249:
						position, tokenIndex = position248, tokenIndex248
						if buffer[position] != rune('(') {
							goto l243
						}
						position++
					}
				l248:
					position, tokenIndex = position245, tokenIndex245
				}
				add(rule_dnumber, position244)
			}
			return true
		l243:
			position, tokenIndex = position243, tokenIndex243
			return false
		},
		/* 22 simpleDice2 <- <(&(number / '(') eDice2)> */
		func() bool {
			position250, tokenIndex250 := position, tokenIndex
			{
				position251 := position
				{
					position252, tokenIndex252 := position, tokenIndex
					{
						position253, tokenIndex253 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l254
						}
						goto l253
					l254:
						position, tokenIndex = position253, tokenIndex253
						if buffer[position] != rune('(') {
							goto l250
						}
						position++
					}
				l253:
					position, tokenIndex = position252, tokenIndex252
				}
				if !_rules[ruleeDice2]() {
					goto l250
				}
				add(rulesimpleDice2, position251)
			}
			return true
		l250:
			position, tokenIndex = position250, tokenIndex250
			return false
		},
		/* 23 wodDicePool <- <(Action52 (simpleDice2 Action53)?)> */
		nil,
		/* 24 doubleCrossDicePool <- <(Action54 (simpleDice2 Action55))> */
		nil,
		/* 25 eDice <- <((_dnumber ('d' / 'D') Action56 eDice2 dndDiceSuffix Action57) / (_dnumber ('d' / 'D') Action58 eDice2 kqDiceOp Action59) / (('d' / 'D') dndDiceSuffix Action60) / (('d' / 'D') !(!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .) sp Action61) / (wodDicePool ('a' / 'A') simpleDice2 ((&('Q' | 'q') (('q' / 'Q') simpleDice2 Action64)) | (&('K' | 'k') (('k' / 'K') simpleDice2 Action63)) | (&('M' | 'm') (('m' / 'M') simpleDice2 Action62)))* Action65) / (doubleCrossDicePool ('c' / 'C') simpleDice2 (('m' / 'M') simpleDice2 Action66)* Action67) / (eDice2 (('d' / 'D') Action68 simpleDice2 kqDiceOp Action69)*))> */
		func() bool {
			position257, tokenIndex257 := position, tokenIndex
			{
				position258 := position
				{
					position259, tokenIndex259 := position, tokenIndex
					if !_rules[rule_dnumber]() {
						goto l260
					}
					{
						position261, tokenIndex261 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l262
						}
						position++
						goto l261
					l262:
						position, tokenIndex = position261, tokenIndex261
						if buffer[position] != rune('D') {
							goto l260
						}
						position++
					}
				l261:
					{
						add(ruleAction56, position)
					}
					if !_rules[ruleeDice2]() {
						goto l260
					}
					if !_rules[ruledndDiceSuffix]() {
						goto l260
					}
					{
						add(ruleAction57, position)
					}
					goto l259
				l260:
					position, tokenIndex = position259, tokenIndex259
					if !_rules[rule_dnumber]() {
						goto l265
					}
					{
						position266, tokenIndex266 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l267
						}
						position++
						goto l266
					l267:
						position, tokenIndex = position266, tokenIndex266
						if buffer[position] != rune('D') {
							goto l265
						}
						position++
					}
				l266:
					{
						add(ruleAction58, position)
					}
					if !_rules[ruleeDice2]() {
						goto l265
					}
					if !_rules[rulekqDiceOp]() {
						goto l265
					}
					{
						add(ruleAction59, position)
					}
					goto l259
				l265:
					position, tokenIndex = position259, tokenIndex259
					{
						position271, tokenIndex271 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l272
						}
						position++
						goto l271
					l272:
						position, tokenIndex = position271, tokenIndex271
						if buffer[position] != rune('D') {
							goto l270
						}
						position++
					}
				l271:
					if !_rules[ruledndDiceSuffix]() {
						goto l270
					}
					{
						add(ruleAction60, position)
					}
					goto l259
				l270:
					position, tokenIndex = position259, tokenIndex259
					{
						position275, tokenIndex275 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l276
						}
						position++
						goto l275
					l276:
						position, tokenIndex = position275, tokenIndex275
						if buffer[position] != rune('D') {
							goto l274
						}
						position++
					}
				l275:
					{
						position277, tokenIndex277 := position, tokenIndex
						{
							position278, tokenIndex278 := position, tokenIndex
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l278
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l278
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l278
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l278
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l278
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l278
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l278
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l278
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l278
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l278
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l278
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l278
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l278
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l278
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l278
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l278
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l278
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l278
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l278
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l278
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l278
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l278
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l278
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l278
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l278
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l278
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l278
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l278
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l278
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l278
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l278
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l278
									}
									position++
								}
							}

							goto l277
						l278:
							position, tokenIndex = position278, tokenIndex278
						}
						if !matchDot() {
							goto l277
						}
						goto l274
					l277:
						position, tokenIndex = position277, tokenIndex277
					}
					if !_rules[rulesp]() {
						goto l274
					}
					{
						add(ruleAction61, position)
					}
					goto l259
				l274:
					position, tokenIndex = position259, tokenIndex259
					{
						position282 := position
						{
							add(ruleAction52, position)
						}
						{
							position284, tokenIndex284 := position, tokenIndex
							if !_rules[rulesimpleDice2]() {
								goto l284
							}
							{
								add(ruleAction53, position)
							}
							goto l285
						l284:
							position, tokenIndex = position284, tokenIndex284
						}
					l285:
						add(rulewodDicePool, position282)
					}
					{
						position287, tokenIndex287 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l288
						}
						position++
						goto l287
					l288:
						position, tokenIndex = position287, tokenIndex287
						if buffer[position] != rune('A') {
							goto l281
						}
						position++
					}
				l287:
					if !_rules[rulesimpleDice2]() {
						goto l281
					}
				l289:
					{
						position290, tokenIndex290 := position, tokenIndex
						{
							switch buffer[position] {
							case 'Q', 'q':
								{
									position292, tokenIndex292 := position, tokenIndex
									if buffer[position] != rune('q') {
										goto l293
									}
									position++
									goto l292
								l293:
									position, tokenIndex = position292, tokenIndex292
									if buffer[position] != rune('Q') {
										goto l290
									}
									position++
								}
							l292:
								if !_rules[rulesimpleDice2]() {
									goto l290
								}
								{
									add(ruleAction64, position)
								}
							case 'K', 'k':
								{
									position295, tokenIndex295 := position, tokenIndex
									if buffer[position] != rune('k') {
										goto l296
									}
									position++
									goto l295
								l296:
									position, tokenIndex = position295, tokenIndex295
									if buffer[position] != rune('K') {
										goto l290
									}
									position++
								}
							l295:
								if !_rules[rulesimpleDice2]() {
									goto l290
								}
								{
									add(ruleAction63, position)
								}
							default:
								{
									position298, tokenIndex298 := position, tokenIndex
									if buffer[position] != rune('m') {
										goto l299
									}
									position++
									goto l298
								l299:
									position, tokenIndex = position298, tokenIndex298
									if buffer[position] != rune('M') {
										goto l290
									}
									position++
								}
							l298:
								if !_rules[rulesimpleDice2]() {
									goto l290
								}
								{
									add(ruleAction62, position)
								}
							}
						}

						goto l289
					l290:
						position, tokenIndex = position290, tokenIndex290
					}
					{
						add(ruleAction65, position)
					}
					goto l259
				l281:
					position, tokenIndex = position259, tokenIndex259
					{
						position303 := position
						{
							add(ruleAction54, position)
						}
						if !_rules[rulesimpleDice2]() {
							goto l302
						}
						{
							add(ruleAction55, position)
						}
						add(ruledoubleCrossDicePool, position303)
					}
					{
						position306, tokenIndex306 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l307
						}
						position++
						goto l306
					l307:
						position, tokenIndex = position306, tokenIndex306
						if buffer[position] != rune('C') {
							goto l302
						}
						position++
					}
				l306:
					if !_rules[rulesimpleDice2]() {
						goto l302
					}
				l308:
					{
						position309, tokenIndex309 := position, tokenIndex
						{
							position310, tokenIndex310 := position, tokenIndex
							if buffer[position] != rune('m') {
								goto l311
							}
							position++
							goto l310
						l311:
							position, tokenIndex = position310, tokenIndex310
							if buffer[position] != rune('M') {
								goto l309
							}
							position++
						}
					l310:
						if !_rules[rulesimpleDice2]() {
							goto l309
						}
						{
							add(ruleAction66, position)
						}
						goto l308
					l309:
						position, tokenIndex = position309, tokenIndex309
					}
					{
						add(ruleAction67, position)
					}
					goto l259
				l302:
					position, tokenIndex = position259, tokenIndex259
					if !_rules[ruleeDice2]() {
						goto l257
					}
				l314:
					{
						position315, tokenIndex315 := position, tokenIndex
						{
							position316, tokenIndex316 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l317
							}
							position++
							goto l316
						l317:
							position, tokenIndex = position316, tokenIndex316
							if buffer[position] != rune('D') {
								goto l315
							}
							position++
						}
					l316:
						{
							add(ruleAction68, position)
						}
						if !_rules[rulesimpleDice2]() {
							goto l315
						}
						if !_rules[rulekqDiceOp]() {
							goto l315
						}
						{
							add(ruleAction69, position)
						}
						goto l314
					l315:
						position, tokenIndex = position315, tokenIndex315
					}
				}
			l259:
				add(ruleeDice, position258)
			}
			return true
		l257:
			position, tokenIndex = position257, tokenIndex257
			return false
		},
		/* 26 laNumberOrLeftParen <- <&(number / '(')> */
		func() bool {
			position320, tokenIndex320 := position, tokenIndex
			{
				position321 := position
				{
					position322, tokenIndex322 := position, tokenIndex
					{
						position323, tokenIndex323 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l324
						}
						goto l323
					l324:
						position, tokenIndex = position323, tokenIndex323
						if buffer[position] != rune('(') {
							goto l320
						}
						position++
					}
				l323:
					position, tokenIndex = position322, tokenIndex322
				}
				add(rulelaNumberOrLeftParen, position321)
			}
			return true
		l320:
			position, tokenIndex = position320, tokenIndex320
			return false
		},
		/* 27 eDice2 <- <((('p' / 'P') laNumberOrLeftParen eDice3 Action70) / (('p' / 'P') Action71) / eDice3)> */
		func() bool {
			position325, tokenIndex325 := position, tokenIndex
			{
				position326 := position
				{
					position327, tokenIndex327 := position, tokenIndex
					{
						position329, tokenIndex329 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l330
						}
						position++
						goto l329
					l330:
						position, tokenIndex = position329, tokenIndex329
						if buffer[position] != rune('P') {
							goto l328
						}
						position++
					}
				l329:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l328
					}
					if !_rules[ruleeDice3]() {
						goto l328
					}
					{
						add(ruleAction70, position)
					}
					goto l327
				l328:
					position, tokenIndex = position327, tokenIndex327
					{
						position333, tokenIndex333 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l334
						}
						position++
						goto l333
					l334:
						position, tokenIndex = position333, tokenIndex333
						if buffer[position] != rune('P') {
							goto l332
						}
						position++
					}
				l333:
					{
						add(ruleAction71, position)
					}
					goto l327
				l332:
					position, tokenIndex = position327, tokenIndex327
					if !_rules[ruleeDice3]() {
						goto l325
					}
				}
			l327:
				add(ruleeDice2, position326)
			}
			return true
		l325:
			position, tokenIndex = position325, tokenIndex325
			return false
		},
		/* 28 eDice3 <- <((('b' / 'B') laNumberOrLeftParen value Action72) / (('b' / 'B') Action73) / eDice4)> */
		func() bool {
			position336, tokenIndex336 := position, tokenIndex
			{
				position337 := position
				{
					position338, tokenIndex338 := position, tokenIndex
					{
						position340, tokenIndex340 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l341
						}
						position++
						goto l340
					l341:
						position, tokenIndex = position340, tokenIndex340
						if buffer[position] != rune('B') {
							goto l339
						}
						position++
					}
				l340:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l339
					}
					if !_rules[rulevalue]() {
						goto l339
					}
					{
						add(ruleAction72, position)
					}
					goto l338
				l339:
					position, tokenIndex = position338, tokenIndex338
					{
						position344, tokenIndex344 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l345
						}
						position++
						goto l344
					l345:
						position, tokenIndex = position344, tokenIndex344
						if buffer[position] != rune('B') {
							goto l343
						}
						position++
					}
				l344:
					{
						add(ruleAction73, position)
					}
					goto l338
				l343:
					position, tokenIndex = position338, tokenIndex338
					{
						position347 := position
						{
							position348, tokenIndex348 := position, tokenIndex
							{
								position350, tokenIndex350 := position, tokenIndex
								if buffer[position] != rune('f') {
									goto l351
								}
								position++
								goto l350
							l351:
								position, tokenIndex = position350, tokenIndex350
								if buffer[position] != rune('F') {
									goto l349
								}
								position++
							}
						l350:
							if !_rules[rulesp]() {
								goto l349
							}
							{
								add(ruleAction74, position)
							}
							goto l348
						l349:
							position, tokenIndex = position348, tokenIndex348
							if !_rules[rulevalue]() {
								goto l336
							}
						}
					l348:
						add(ruleeDice4, position347)
					}
				}
			l338:
				add(ruleeDice3, position337)
			}
			return true
		l336:
			position, tokenIndex = position336, tokenIndex336
			return false
		},
		/* 29 eDice4 <- <((('f' / 'F') sp Action74) / value)> */
		nil,
		/* 30 value <- <(number / ('t' 'h' 'i' 's' sp '.' sp identifier sp Action75) / ('i' 'n' 't' '(' sp e0 sp ')' sp Action76) / ('s' 't' 'r' '(' sp e0 sp ')' sp Action77) / assign_expr / (identifier Action78) / sub / fstring)> */
		func() bool {
			position354, tokenIndex354 := position, tokenIndex
			{
				position355 := position
				{
					position356, tokenIndex356 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l357
					}
					goto l356
				l357:
					position, tokenIndex = position356, tokenIndex356
					if buffer[position] != rune('t') {
						goto l358
					}
					position++
					if buffer[position] != rune('h') {
						goto l358
					}
					position++
					if buffer[position] != rune('i') {
						goto l358
					}
					position++
					if buffer[position] != rune('s') {
						goto l358
					}
					position++
					if !_rules[rulesp]() {
						goto l358
					}
					if buffer[position] != rune('.') {
						goto l358
					}
					position++
					if !_rules[rulesp]() {
						goto l358
					}
					if !_rules[ruleidentifier]() {
						goto l358
					}
					if !_rules[rulesp]() {
						goto l358
					}
					{
						add(ruleAction75, position)
					}
					goto l356
				l358:
					position, tokenIndex = position356, tokenIndex356
					if buffer[position] != rune('i') {
						goto l360
					}
					position++
					if buffer[position] != rune('n') {
						goto l360
					}
					position++
					if buffer[position] != rune('t') {
						goto l360
					}
					position++
					if buffer[position] != rune('(') {
						goto l360
					}
					position++
					if !_rules[rulesp]() {
						goto l360
					}
					if !_rules[rulee0]() {
						goto l360
					}
					if !_rules[rulesp]() {
						goto l360
					}
					if buffer[position] != rune(')') {
						goto l360
					}
					position++
					if !_rules[rulesp]() {
						goto l360
					}
					{
						add(ruleAction76, position)
					}
					goto l356
				l360:
					position, tokenIndex = position356, tokenIndex356
					if buffer[position] != rune('s') {
						goto l362
					}
					position++
					if buffer[position] != rune('t') {
						goto l362
					}
					position++
					if buffer[position] != rune('r') {
						goto l362
					}
					position++
					if buffer[position] != rune('(') {
						goto l362
					}
					position++
					if !_rules[rulesp]() {
						goto l362
					}
					if !_rules[rulee0]() {
						goto l362
					}
					if !_rules[rulesp]() {
						goto l362
					}
					if buffer[position] != rune(')') {
						goto l362
					}
					position++
					if !_rules[rulesp]() {
						goto l362
					}
					{
						add(ruleAction77, position)
					}
					goto l356
				l362:
					position, tokenIndex = position356, tokenIndex356
					if !_rules[ruleassign_expr]() {
						goto l364
					}
					goto l356
				l364:
					position, tokenIndex = position356, tokenIndex356
					if !_rules[ruleidentifier]() {
						goto l365
					}
					{
						add(ruleAction78, position)
					}
					goto l356
				l365:
					position, tokenIndex = position356, tokenIndex356
					{
						position368 := position
						{
							position369 := position
							if buffer[position] != rune('(') {
								goto l367
							}
							position++
							if !_rules[rulesp]() {
								goto l367
							}
							add(ruleopen, position369)
						}
						if !_rules[rulee0]() {
							goto l367
						}
						{
							position370 := position
							if buffer[position] != rune(')') {
								goto l367
							}
							position++
							if !_rules[rulesp]() {
								goto l367
							}
							add(ruleclose, position370)
						}
						add(rulesub, position368)
					}
					goto l356
				l367:
					position, tokenIndex = position356, tokenIndex356
					{
						position371 := position
						{
							switch buffer[position] {
							case '\'':
								if buffer[position] != rune('\'') {
									goto l354
								}
								position++
								{
									add(ruleAction94, position)
								}
								{
									position374 := position
								l375:
									{
										position376, tokenIndex376 := position, tokenIndex
										{
											position377 := position
											{
												position378 := position
												{
													position381, tokenIndex381 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l382
													}
													goto l381
												l382:
													position, tokenIndex = position381, tokenIndex381
													{
														position383, tokenIndex383 := position, tokenIndex
														{
															switch buffer[position] {
															case '\r':
																if buffer[position] != rune('\r') {
																	goto l383
																}
																position++
															case '\n':
																if buffer[position] != rune('\n') {
																	goto l383
																}
																position++
															case '\\':
																if buffer[position] != rune('\\') {
																	goto l383
																}
																position++
															default:
																if buffer[position] != rune('\'') {
																	goto l383
																}
																position++
															}
														}

														goto l376
													l383:
														position, tokenIndex = position383, tokenIndex383
													}
													if !matchDot() {
														goto l376
													}
												}
											l381:
											l379:
												{
													position380, tokenIndex380 := position, tokenIndex
													{
														position385, tokenIndex385 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l386
														}
														goto l385
													l386:
														position, tokenIndex = position385, tokenIndex385
														{
															position387, tokenIndex387 := position, tokenIndex
															{
																switch buffer[position] {
																case '\r':
																	if buffer[position] != rune('\r') {
																		goto l387
																	}
																	position++
																case '\n':
																	if buffer[position] != rune('\n') {
																		goto l387
																	}
																	position++
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l387
																	}
																	position++
																default:
																	if buffer[position] != rune('\'') {
																		goto l387
																	}
																	position++
																}
															}

															goto l380
														l387:
															position, tokenIndex = position387, tokenIndex387
														}
														if !matchDot() {
															goto l380
														}
													}
												l385:
													goto l379
												l380:
													position, tokenIndex = position380, tokenIndex380
												}
												add(rulePegText, position378)
											}
											{
												add(ruleAction83, position)
											}
											add(rulestrPart3, position377)
										}
										goto l375
									l376:
										position, tokenIndex = position376, tokenIndex376
									}
									add(rulePegText, position374)
								}
								if buffer[position] != rune('\'') {
									goto l354
								}
								position++
								{
									add(ruleAction95, position)
								}
							case '"':
								if buffer[position] != rune('"') {
									goto l354
								}
								position++
								{
									add(ruleAction92, position)
								}
								{
									position392 := position
								l393:
									{
										position394, tokenIndex394 := position, tokenIndex
										{
											position395 := position
											{
												position396 := position
												{
													position399, tokenIndex399 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l400
													}
													goto l399
												l400:
													position, tokenIndex = position399, tokenIndex399
													{
														position401, tokenIndex401 := position, tokenIndex
														{
															switch buffer[position] {
															case '\r':
																if buffer[position] != rune('\r') {
																	goto l401
																}
																position++
															case '\n':
																if buffer[position] != rune('\n') {
																	goto l401
																}
																position++
															case '\\':
																if buffer[position] != rune('\\') {
																	goto l401
																}
																position++
															default:
																if buffer[position] != rune('"') {
																	goto l401
																}
																position++
															}
														}

														goto l394
													l401:
														position, tokenIndex = position401, tokenIndex401
													}
													if !matchDot() {
														goto l394
													}
												}
											l399:
											l397:
												{
													position398, tokenIndex398 := position, tokenIndex
													{
														position403, tokenIndex403 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l404
														}
														goto l403
													l404:
														position, tokenIndex = position403, tokenIndex403
														{
															position405, tokenIndex405 := position, tokenIndex
															{
																switch buffer[position] {
																case '\r':
																	if buffer[position] != rune('\r') {
																		goto l405
																	}
																	position++
																case '\n':
																	if buffer[position] != rune('\n') {
																		goto l405
																	}
																	position++
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l405
																	}
																	position++
																default:
																	if buffer[position] != rune('"') {
																		goto l405
																	}
																	position++
																}
															}

															goto l398
														l405:
															position, tokenIndex = position405, tokenIndex405
														}
														if !matchDot() {
															goto l398
														}
													}
												l403:
													goto l397
												l398:
													position, tokenIndex = position398, tokenIndex398
												}
												add(rulePegText, position396)
											}
											{
												add(ruleAction82, position)
											}
											add(rulestrPart2, position395)
										}
										goto l393
									l394:
										position, tokenIndex = position394, tokenIndex394
									}
									add(rulePegText, position392)
								}
								if buffer[position] != rune('"') {
									goto l354
								}
								position++
								{
									add(ruleAction93, position)
								}
							case '\x1e':
								if buffer[position] != rune('\x1e') {
									goto l354
								}
								position++
								{
									add(ruleAction88, position)
								}
								{
									position410 := position
								l411:
									{
										position412, tokenIndex412 := position, tokenIndex
										{
											position413, tokenIndex413 := position, tokenIndex
											if buffer[position] != rune('{') {
												goto l414
											}
											position++
											if !_rules[rulesp]() {
												goto l414
											}
											if !_rules[rulee]() {
												goto l414
											}
											{
												add(ruleAction89, position)
											}
											if buffer[position] != rune('}') {
												goto l414
											}
											position++
											goto l413
										l414:
											position, tokenIndex = position413, tokenIndex413
											if buffer[position] != rune('{') {
												goto l416
											}
											position++
											if buffer[position] != rune('%') {
												goto l416
											}
											position++
											if !_rules[rulesp]() {
												goto l416
											}
											if !_rules[rulee]() {
												goto l416
											}
											{
												add(ruleAction90, position)
											}
											if buffer[position] != rune('%') {
												goto l416
											}
											position++
											if buffer[position] != rune('}') {
												goto l416
											}
											position++
											goto l413
										l416:
											position, tokenIndex = position413, tokenIndex413
											{
												position418 := position
												{
													position419 := position
													{
														position422, tokenIndex422 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l423
														}
														goto l422
													l423:
														position, tokenIndex = position422, tokenIndex422
														{
															position424, tokenIndex424 := position, tokenIndex
															{
																switch buffer[position] {
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l424
																	}
																	position++
																case '\x1e':
																	if buffer[position] != rune('\x1e') {
																		goto l424
																	}
																	position++
																default:
																	if buffer[position] != rune('{') {
																		goto l424
																	}
																	position++
																}
															}

															goto l412
														l424:
															position, tokenIndex = position424, tokenIndex424
														}
														if !matchDot() {
															goto l412
														}
													}
												l422:
												l420:
													{
														position421, tokenIndex421 := position, tokenIndex
														{
															position426, tokenIndex426 := position, tokenIndex
															if !_rules[ruleescape]() {
																goto l427
															}
															goto l426
														l427:
															position, tokenIndex = position426, tokenIndex426
															{
																position428, tokenIndex428 := position, tokenIndex
																{
																	switch buffer[position] {
																	case '\\':
																		if buffer[position] != rune('\\') {
																			goto l428
																		}
																		position++
																	case '\x1e':
																		if buffer[position] != rune('\x1e') {
																			goto l428
																		}
																		position++
																	default:
																		if buffer[position] != rune('{') {
																			goto l428
																		}
																		position++
																	}
																}

																goto l421
															l428:
																position, tokenIndex = position428, tokenIndex428
															}
															if !matchDot() {
																goto l421
															}
														}
													l426:
														goto l420
													l421:
														position, tokenIndex = position421, tokenIndex421
													}
													add(rulePegText, position419)
												}
												{
													add(ruleAction81, position)
												}
												add(rulestrPart1, position418)
											}
										}
									l413:
										goto l411
									l412:
										position, tokenIndex = position412, tokenIndex412
									}
									add(rulePegText, position410)
								}
								if buffer[position] != rune('\x1e') {
									goto l354
								}
								position++
								{
									add(ruleAction91, position)
								}
							default:
								if buffer[position] != rune('`') {
									goto l354
								}
								position++
								{
									add(ruleAction84, position)
								}
								{
									position433 := position
								l434:
									{
										position435, tokenIndex435 := position, tokenIndex
										{
											position436, tokenIndex436 := position, tokenIndex
											if buffer[position] != rune('{') {
												goto l437
											}
											position++
											if !_rules[rulesp]() {
												goto l437
											}
											if !_rules[rulee]() {
												goto l437
											}
											{
												add(ruleAction85, position)
											}
											if buffer[position] != rune('}') {
												goto l437
											}
											position++
											goto l436
										l437:
											position, tokenIndex = position436, tokenIndex436
											if buffer[position] != rune('{') {
												goto l439
											}
											position++
											if buffer[position] != rune('{') {
												goto l439
											}
											position++
											if !_rules[rulesp]() {
												goto l439
											}
											if !_rules[rulee]() {
												goto l439
											}
											{
												add(ruleAction86, position)
											}
											if buffer[position] != rune('}') {
												goto l439
											}
											position++
											if buffer[position] != rune('}') {
												goto l439
											}
											position++
											goto l436
										l439:
											position, tokenIndex = position436, tokenIndex436
											{
												position441 := position
												{
													position442 := position
													{
														position445, tokenIndex445 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l446
														}
														goto l445
													l446:
														position, tokenIndex = position445, tokenIndex445
														{
															position447, tokenIndex447 := position, tokenIndex
															{
																switch buffer[position] {
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l447
																	}
																	position++
																case '`':
																	if buffer[position] != rune('`') {
																		goto l447
																	}
																	position++
																default:
																	if buffer[position] != rune('{') {
																		goto l447
																	}
																	position++
																}
															}

															goto l435
														l447:
															position, tokenIndex = position447, tokenIndex447
														}
														if !matchDot() {
															goto l435
														}
													}
												l445:
												l443:
													{
														position444, tokenIndex444 := position, tokenIndex
														{
															position449, tokenIndex449 := position, tokenIndex
															if !_rules[ruleescape]() {
																goto l450
															}
															goto l449
														l450:
															position, tokenIndex = position449, tokenIndex449
															{
																position451, tokenIndex451 := position, tokenIndex
																{
																	switch buffer[position] {
																	case '\\':
																		if buffer[position] != rune('\\') {
																			goto l451
																		}
																		position++
																	case '`':
																		if buffer[position] != rune('`') {
																			goto l451
																		}
																		position++
																	default:
																		if buffer[position] != rune('{') {
																			goto l451
																		}
																		position++
																	}
																}

																goto l444
															l451:
																position, tokenIndex = position451, tokenIndex451
															}
															if !matchDot() {
																goto l444
															}
														}
													l449:
														goto l443
													l444:
														position, tokenIndex = position444, tokenIndex444
													}
													add(rulePegText, position442)
												}
												{
													add(ruleAction80, position)
												}
												add(rulestrPart, position441)
											}
										}
									l436:
										goto l434
									l435:
										position, tokenIndex = position435, tokenIndex435
									}
									add(rulePegText, position433)
								}
								if buffer[position] != rune('`') {
									goto l354
								}
								position++
								{
									add(ruleAction87, position)
								}
							}
						}

						if !_rules[rulesp]() {
							goto l354
						}
						add(rulefstring, position371)
					}
				}
			l356:
				add(rulevalue, position355)
			}
			return true
		l354:
			position, tokenIndex = position354, tokenIndex354
			return false
		},
		/* 31 number <- <(<[0-9]+> sp Action79)> */
		func() bool {
			position455, tokenIndex455 := position, tokenIndex
			{
				position456 := position
				{
					position457 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l455
					}
					position++
				l458:
					{
						position459, tokenIndex459 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l459
						}
						position++
						goto l458
					l459:
						position, tokenIndex = position459, tokenIndex459
					}
					add(rulePegText, position457)
				}
				if !_rules[rulesp]() {
					goto l455
				}
				{
					add(ruleAction79, position)
				}
				add(rulenumber, position456)
			}
			return true
		l455:
			position, tokenIndex = position455, tokenIndex455
			return false
		},
		/* 32 identifier <- <(<(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) . (!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .)*)> sp)> */
		func() bool {
			position461, tokenIndex461 := position, tokenIndex
			{
				position462 := position
				{
					position463 := position
					{
						position464, tokenIndex464 := position, tokenIndex
						{
							switch buffer[position] {
							case '\x1e':
								if buffer[position] != rune('\x1e') {
									goto l464
								}
								position++
							case '\r':
								if buffer[position] != rune('\r') {
									goto l464
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l464
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l464
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l464
								}
								position++
							case '~':
								if buffer[position] != rune('~') {
									goto l464
								}
								position++
							case '}':
								if buffer[position] != rune('}') {
									goto l464
								}
								position++
							case '|':
								if buffer[position] != rune('|') {
									goto l464
								}
								position++
							case '{':
								if buffer[position] != rune('{') {
									goto l464
								}
								position++
							case '`':
								if buffer[position] != rune('`') {
									goto l464
								}
								position++
							case '^':
								if buffer[position] != rune('^') {
									goto l464
								}
								position++
							case ']':
								if buffer[position] != rune(']') {
									goto l464
								}
								position++
							case '\\':
								if buffer[position] != rune('\\') {
									goto l464
								}
								position++
							case '[':
								if buffer[position] != rune('[') {
									goto l464
								}
								position++
							case '@':
								if buffer[position] != rune('@') {
									goto l464
								}
								position++
							case '?':
								if buffer[position] != rune('?') {
									goto l464
								}
								position++
							case '>':
								if buffer[position] != rune('>') {
									goto l464
								}
								position++
							case '=':
								if buffer[position] != rune('=') {
									goto l464
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l464
								}
								position++
							case ';':
								if buffer[position] != rune(';') {
									goto l464
								}
								position++
							case ':':
								if buffer[position] != rune(':') {
									goto l464
								}
								position++
							case '/':
								if buffer[position] != rune('/') {
									goto l464
								}
								position++
							case '+':
								if buffer[position] != rune('+') {
									goto l464
								}
								position++
							case '*':
								if buffer[position] != rune('*') {
									goto l464
								}
								position++
							case ')':
								if buffer[position] != rune(')') {
									goto l464
								}
								position++
							case '(':
								if buffer[position] != rune('(') {
									goto l464
								}
								position++
							case '\'':
								if buffer[position] != rune('\'') {
									goto l464
								}
								position++
							case '&':
								if buffer[position] != rune('&') {
									goto l464
								}
								position++
							case '%':
								if buffer[position] != rune('%') {
									goto l464
								}
								position++
							case '#':
								if buffer[position] != rune('#') {
									goto l464
								}
								position++
							case '"':
								if buffer[position] != rune('"') {
									goto l464
								}
								position++
							case '!':
								if buffer[position] != rune('!') {
									goto l464
								}
								position++
							case ',', '-', '.':
								if c := buffer[position]; c < rune(',') || c > rune('.') {
									goto l464
								}
								position++
							default:
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l464
								}
								position++
							}
						}

						goto l461
					l464:
						position, tokenIndex = position464, tokenIndex464
					}
					if !matchDot() {
						goto l461
					}
				l466:
					{
						position467, tokenIndex467 := position, tokenIndex
						{
							position468, tokenIndex468 := position, tokenIndex
							{
								switch buffer[position] {
								case '\x1e':
									if buffer[position] != rune('\x1e') {
										goto l468
									}
									position++
								case '\r':
									if buffer[position] != rune('\r') {
										goto l468
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l468
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l468
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l468
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l468
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l468
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l468
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l468
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l468
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l468
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l468
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l468
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l468
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l468
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l468
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l468
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l468
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l468
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l468
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l468
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l468
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l468
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l468
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l468
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l468
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l468
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l468
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l468
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l468
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l468
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l468
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l468
									}
									position++
								}
							}

							goto l467
						l468:
							position, tokenIndex = position468, tokenIndex468
						}
						if !matchDot() {
							goto l467
						}
						goto l466
					l467:
						position, tokenIndex = position467, tokenIndex467
					}
					add(rulePegText, position463)
				}
				if !_rules[rulesp]() {
					goto l461
				}
				add(ruleidentifier, position462)
			}
			return true
		l461:
			position, tokenIndex = position461, tokenIndex461
			return false
		},
		/* 33 sub <- <(open e0 close)> */
		nil,
		/* 34 add <- <(('+' / '＋') sp)> */
		func() bool {
			position471, tokenIndex471 := position, tokenIndex
			{
				position472 := position
				{
					position473, tokenIndex473 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l474
					}
					position++
					goto l473
				l474:
					position, tokenIndex = position473, tokenIndex473
					if buffer[position] != rune('＋') {
						goto l471
					}
					position++
				}
			l473:
				if !_rules[rulesp]() {
					goto l471
				}
				add(ruleadd, position472)
			}
			return true
		l471:
			position, tokenIndex = position471, tokenIndex471
			return false
		},
		/* 35 minus <- <(('-' / '－') sp)> */
		func() bool {
			position475, tokenIndex475 := position, tokenIndex
			{
				position476 := position
				{
					position477, tokenIndex477 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l478
					}
					position++
					goto l477
				l478:
					position, tokenIndex = position477, tokenIndex477
					if buffer[position] != rune('－') {
						goto l475
					}
					position++
				}
			l477:
				if !_rules[rulesp]() {
					goto l475
				}
				add(ruleminus, position476)
			}
			return true
		l475:
			position, tokenIndex = position475, tokenIndex475
			return false
		},
		/* 36 multiply <- <(('*' / '＊') sp)> */
		nil,
		/* 37 divide <- <(('/' / '／') sp)> */
		nil,
		/* 38 modulus <- <('%' sp)> */
		nil,
		/* 39 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 40 open <- <('(' sp)> */
		nil,
		/* 41 close <- <(')' sp)> */
		nil,
		/* 42 bitwiseOr <- <('|' sp)> */
		nil,
		/* 43 logicOr <- <('|' '|' sp)> */
		nil,
		/* 44 bitwiseAnd <- <(('&' / ('&' 'a' 'm' 'p' ';')) sp)> */
		nil,
		/* 45 logicAnd <- <((('&' '&') / ('&' 'a' 'm' 'p' ';' '&' 'a' 'm' 'p' ';')) sp)> */
		nil,
		/* 46 sp <- <((&('/') ('/' '/' (!'\n' .)*)) | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position490 := position
			l491:
				{
					position492, tokenIndex492 := position, tokenIndex
					{
						switch buffer[position] {
						case '/':
							if buffer[position] != rune('/') {
								goto l492
							}
							position++
							if buffer[position] != rune('/') {
								goto l492
							}
							position++
						l494:
							{
								position495, tokenIndex495 := position, tokenIndex
								{
									position496, tokenIndex496 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l496
									}
									position++
									goto l495
								l496:
									position, tokenIndex = position496, tokenIndex496
								}
								if !matchDot() {
									goto l495
								}
								goto l494
							l495:
								position, tokenIndex = position495, tokenIndex495
							}
						case '\r':
							if buffer[position] != rune('\r') {
								goto l492
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l492
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l492
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l492
							}
							position++
						}
					}

					goto l491
				l492:
					position, tokenIndex = position492, tokenIndex492
				}
				add(rulesp, position490)
			}
			return true
		},
		/* 47 lt <- <(('<' / '＜') sp)> */
		nil,
		/* 48 gt <- <(('>' / '＞') sp)> */
		nil,
		/* 49 le <- <((('<' '=') / ('＜' '＝')) sp)> */
		nil,
		/* 50 ge <- <((('>' '=') / ('＞' '＝')) sp)> */
		nil,
		/* 51 eq <- <((('=' '=') / ('＝' '＝')) sp)> */
		nil,
		/* 52 ne <- <((('!' '=') / ('！' '＝')) sp)> */
		nil,
		/* 53 strPart <- <(<(escape / (!((&('\\') '\\') | (&('`') '`') | (&('{') '{')) .))+> Action80)> */
		nil,
		/* 54 strPart1 <- <(<(escape / (!((&('\\') '\\') | (&('\x1e') '\x1e') | (&('{') '{')) .))+> Action81)> */
		nil,
		/* 55 strPart2 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('"') '"')) .))+> Action82)> */
		nil,
		/* 56 strPart3 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('\'') '\'')) .))+> Action83)> */
		nil,
		/* 57 fstring <- <(((&('\'') ('\'' Action94 <strPart3*> '\'' Action95)) | (&('"') ('"' Action92 <strPart2*> '"' Action93)) | (&('\x1e') ('\x1e' Action88 <(('{' sp e Action89 '}') / ('{' '%' sp e Action90 ('%' '}')) / strPart1)*> '\x1e' Action91)) | (&('`') ('`' Action84 <(('{' sp e Action85 '}') / ('{' '{' sp e Action86 ('}' '}')) / strPart)*> '`' Action87))) sp)> */
		nil,
		/* 58 escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		func() bool {
			position508, tokenIndex508 := position, tokenIndex
			{
				position509 := position
				if buffer[position] != rune('\\') {
					goto l508
				}
				position++
				{
					switch buffer[position] {
					case '\\':
						if buffer[position] != rune('\\') {
							goto l508
						}
						position++
					case '\'':
						if buffer[position] != rune('\'') {
							goto l508
						}
						position++
					case '"':
						if buffer[position] != rune('"') {
							goto l508
						}
						position++
					case 'r':
						if buffer[position] != rune('r') {
							goto l508
						}
						position++
					case 'f':
						if buffer[position] != rune('f') {
							goto l508
						}
						position++
					case 'n':
						if buffer[position] != rune('n') {
							goto l508
						}
						position++
					case 't':
						if buffer[position] != rune('t') {
							goto l508
						}
						position++
					default:
						if buffer[position] != rune('b') {
							goto l508
						}
						position++
					}
				}

				add(ruleescape, position509)
			}
			return true
		l508:
			position, tokenIndex = position508, tokenIndex508
			return false
		},
		/* 59 st_expr <- <(st_modify_multi_1 / st_assign_multi / st_modify_multi_2)> */
		nil,
		/* 60 est <- <((&'(' e0) / (!{p.flags.DisableBitwiseOp = true} e0 !{p.flags.DisableBitwiseOp = false}))> */
		func() bool {
			position512, tokenIndex512 := position, tokenIndex
			{
				position513 := position
				{
					position514, tokenIndex514 := position, tokenIndex
					{
						position516, tokenIndex516 := position, tokenIndex
						if buffer[position] != rune('(') {
							goto l515
						}
						position++
						position, tokenIndex = position516, tokenIndex516
					}
					if !_rules[rulee0]() {
						goto l515
					}
					goto l514
				l515:
					position, tokenIndex = position514, tokenIndex514
					p.flags.DisableBitwiseOp = true
					if !_rules[rulee0]() {
						goto l512
					}
					p.flags.DisableBitwiseOp = false
				}
			l514:
				add(ruleest, position513)
			}
			return true
		l512:
			position, tokenIndex = position512, tokenIndex512
			return false
		},
		/* 61 st_assign_multi <- <(st_assign sp ','? sp)+> */
		nil,
		/* 62 st_assign <- <((st_name2 sp (':' / '=') sp est Action96) / (st_name1 est Action97) / ('&' st_name2 sp (':' / '=') sp Action98 <est> Action99))> */
		nil,
		/* 63 st_modify_multi_1 <- <(((st_name2 st_modify_rest1) / (st_name1 st_modify_rest)) sp ','? sp st_modify_multi_rest)> */
		nil,
		/* 64 st_modify_rest1 <- <(sp (('+' '=' sp <e0> Action100) / ('-' '=' sp <e0> Action101)))> */
		nil,
		/* 65 st_modify_multi_2 <- <(st_modify2 sp ','? sp st_modify_multi_rest)> */
		nil,
		/* 66 st_modify_multi_rest <- <(st_modify2 sp ','? sp)*> */
		func() bool {
			{
				position523 := position
			l524:
				{
					position525, tokenIndex525 := position, tokenIndex
					if !_rules[rulest_modify2]() {
						goto l525
					}
					if !_rules[rulesp]() {
						goto l525
					}
					{
						position526, tokenIndex526 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l526
						}
						position++
						goto l527
					l526:
						position, tokenIndex = position526, tokenIndex526
					}
				l527:
					if !_rules[rulesp]() {
						goto l525
					}
					goto l524
				l525:
					position, tokenIndex = position525, tokenIndex525
				}
				add(rulest_modify_multi_rest, position523)
			}
			return true
		},
		/* 67 st_modify2 <- <(st_name2 st_modify_rest)> */
		func() bool {
			position528, tokenIndex528 := position, tokenIndex
			{
				position529 := position
				if !_rules[rulest_name2]() {
					goto l528
				}
				if !_rules[rulest_modify_rest]() {
					goto l528
				}
				add(rulest_modify2, position529)
			}
			return true
		l528:
			position, tokenIndex = position528, tokenIndex528
			return false
		},
		/* 68 st_modify_rest <- <(sp (('+' '='? sp <e0> Action102) / ('-' '='? sp <e0> Action103)))> */
		func() bool {
			position530, tokenIndex530 := position, tokenIndex
			{
				position531 := position
				if !_rules[rulesp]() {
					goto l530
				}
				{
					position532, tokenIndex532 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l533
					}
					position++
					{
						position534, tokenIndex534 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l534
						}
						position++
						goto l535
					l534:
						position, tokenIndex = position534, tokenIndex534
					}
				l535:
					if !_rules[rulesp]() {
						goto l533
					}
					{
						position536 := position
						if !_rules[rulee0]() {
							goto l533
						}
						add(rulePegText, position536)
					}
					{
						add(ruleAction102, position)
					}
					goto l532
				l533:
					position, tokenIndex = position532, tokenIndex532
					if buffer[position] != rune('-') {
						goto l530
					}
					position++
					{
						position538, tokenIndex538 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l538
						}
						position++
						goto l539
					l538:
						position, tokenIndex = position538, tokenIndex538
					}
				l539:
					if !_rules[rulesp]() {
						goto l530
					}
					{
						position540 := position
						if !_rules[rulee0]() {
							goto l530
						}
						add(rulePegText, position540)
					}
					{
						add(ruleAction103, position)
					}
				}
			l532:
				add(rulest_modify_rest, position531)
			}
			return true
		l530:
			position, tokenIndex = position530, tokenIndex530
			return false
		},
		/* 69 st_name1 <- <(<id_ch0+> Action104)> */
		func() bool {
			position542, tokenIndex542 := position, tokenIndex
			{
				position543 := position
				{
					position544 := position
					if !_rules[ruleid_ch0]() {
						goto l542
					}
				l545:
					{
						position546, tokenIndex546 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l546
						}
						goto l545
					l546:
						position, tokenIndex = position546, tokenIndex546
					}
					add(rulePegText, position544)
				}
				{
					add(ruleAction104, position)
				}
				add(rulest_name1, position543)
			}
			return true
		l542:
			position, tokenIndex = position542, tokenIndex542
			return false
		},
		/* 70 st_name2 <- <(<(id_ch0 id_ch*)> Action105)> */
		func() bool {
			position548, tokenIndex548 := position, tokenIndex
			{
				position549 := position
				{
					position550 := position
					if !_rules[ruleid_ch0]() {
						goto l548
					}
				l551:
					{
						position552, tokenIndex552 := position, tokenIndex
						{
							position553 := position
							{
								position554, tokenIndex554 := position, tokenIndex
								if !_rules[ruleid_ch0]() {
									goto l555
								}
								goto l554
							l555:
								position, tokenIndex = position554, tokenIndex554
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l552
								}
								position++
							}
						l554:
							add(ruleid_ch, position553)
						}
						goto l551
					l552:
						position, tokenIndex = position552, tokenIndex552
					}
					add(rulePegText, position550)
				}
				{
					add(ruleAction105, position)
				}
				add(rulest_name2, position549)
			}
			return true
		l548:
			position, tokenIndex = position548, tokenIndex548
			return false
		},
		/* 71 id_ch0 <- <(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) .)> */
		func() bool {
			position557, tokenIndex557 := position, tokenIndex
			{
				position558 := position
				{
					position559, tokenIndex559 := position, tokenIndex
					{
						switch buffer[position] {
						case '\x1e':
							if buffer[position] != rune('\x1e') {
								goto l559
							}
							position++
						case '\r':
							if buffer[position] != rune('\r') {
								goto l559
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l559
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l559
							}
							position++
						case ' ':
							if buffer[position] != rune(' ') {
								goto l559
							}
							position++
						case '~':
							if buffer[position] != rune('~') {
								goto l559
							}
							position++
						case '}':
							if buffer[position] != rune('}') {
								goto l559
							}
							position++
						case '|':
							if buffer[position] != rune('|') {
								goto l559
							}
							position++
						case '{':
							if buffer[position] != rune('{') {
								goto l559
							}
							position++
						case '`':
							if buffer[position] != rune('`') {
								goto l559
							}
							position++
						case '^':
							if buffer[position] != rune('^') {
								goto l559
							}
							position++
						case ']':
							if buffer[position] != rune(']') {
								goto l559
							}
							position++
						case '\\':
							if buffer[position] != rune('\\') {
								goto l559
							}
							position++
						case '[':
							if buffer[position] != rune('[') {
								goto l559
							}
							position++
						case '@':
							if buffer[position] != rune('@') {
								goto l559
							}
							position++
						case '?':
							if buffer[position] != rune('?') {
								goto l559
							}
							position++
						case '>':
							if buffer[position] != rune('>') {
								goto l559
							}
							position++
						case '=':
							if buffer[position] != rune('=') {
								goto l559
							}
							position++
						case '<':
							if buffer[position] != rune('<') {
								goto l559
							}
							position++
						case ';':
							if buffer[position] != rune(';') {
								goto l559
							}
							position++
						case ':':
							if buffer[position] != rune(':') {
								goto l559
							}
							position++
						case '/':
							if buffer[position] != rune('/') {
								goto l559
							}
							position++
						case '+':
							if buffer[position] != rune('+') {
								goto l559
							}
							position++
						case '*':
							if buffer[position] != rune('*') {
								goto l559
							}
							position++
						case ')':
							if buffer[position] != rune(')') {
								goto l559
							}
							position++
						case '(':
							if buffer[position] != rune('(') {
								goto l559
							}
							position++
						case '\'':
							if buffer[position] != rune('\'') {
								goto l559
							}
							position++
						case '&':
							if buffer[position] != rune('&') {
								goto l559
							}
							position++
						case '%':
							if buffer[position] != rune('%') {
								goto l559
							}
							position++
						case '$':
							if buffer[position] != rune('$') {
								goto l559
							}
							position++
						case '#':
							if buffer[position] != rune('#') {
								goto l559
							}
							position++
						case '"':
							if buffer[position] != rune('"') {
								goto l559
							}
							position++
						case '!':
							if buffer[position] != rune('!') {
								goto l559
							}
							position++
						case ',', '-', '.':
							if c := buffer[position]; c < rune(',') || c > rune('.') {
								goto l559
							}
							position++
						default:
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l559
							}
							position++
						}
					}

					goto l557
				l559:
					position, tokenIndex = position559, tokenIndex559
				}
				if !matchDot() {
					goto l557
				}
				add(ruleid_ch0, position558)
			}
			return true
		l557:
			position, tokenIndex = position557, tokenIndex557
			return false
		},
		/* 72 id_ch <- <(id_ch0 / [0-9])> */
		nil,
		/* 74 Action0 <- <{ p.AddOperator(TypeHalt) }> */
		nil,
		/* 75 Action1 <- <{ p.AddOperator(TypeClearDetail) }> */
		nil,
		/* 76 Action2 <- <{ p.AddValueStr(string(text)) }> */
		nil,
		/* 77 Action3 <- <{ p.AddStore() }> */
		nil,
		/* 78 Action4 <- <{p.AddOperator(TypePop)}> */
		nil,
		/* 79 Action5 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 80 Action6 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset(); }> */
		nil,
		/* 81 Action7 <- <{ p.PopAndSetOffset() }> */
		nil,
		/* 82 Action8 <- <{ p.AddValueStr(""); }> */
		nil,
		/* 83 Action9 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 84 Action10 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset(); }> */
		nil,
		/* 85 Action11 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 86 Action12 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset() }> */
		nil,
		/* 87 Action13 <- <{ p.PopAndSetOffset() }> */
		nil,
		/* 88 Action14 <- <{ p.CounterPush() }> */
		nil,
		/* 89 Action15 <- <{p.CounterAdd(1)}> */
		nil,
		/* 90 Action16 <- <{ p.AddValueStr(""); limit:=p.CounterPop()+1; for i:=int64(0); i<limit; i++ { p.PopAndSetOffset() } }> */
		nil,
		/* 91 Action17 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 92 Action18 <- <{ p.AddOperator(TypeBitwiseOr) }> */
		nil,
		/* 93 Action19 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 94 Action20 <- <{ p.AddOperator(TypeBitwiseAnd) }> */
		nil,
		/* 95 Action21 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 96 Action22 <- <{ p.AddOperator(TypeCompLT) }> */
		nil,
		/* 97 Action23 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 98 Action24 <- <{ p.AddOperator(TypeCompLE) }> */
		nil,
		/* 99 Action25 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 100 Action26 <- <{ p.AddOperator(TypeCompEQ) }> */
		nil,
		/* 101 Action27 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 102 Action28 <- <{ p.AddOperator(TypeCompNE) }> */
		nil,
		/* 103 Action29 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 104 Action30 <- <{ p.AddOperator(TypeCompGE) }> */
		nil,
		/* 105 Action31 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 106 Action32 <- <{ p.AddOperator(TypeCompGT) }> */
		nil,
		/* 107 Action33 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 108 Action34 <- <{ p.AddOperator(TypeAdd) }> */
		nil,
		/* 109 Action35 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 110 Action36 <- <{ p.AddOperator(TypeSubtract) }> */
		nil,
		/* 111 Action37 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 112 Action38 <- <{ p.AddOperator(TypeMultiply) }> */
		nil,
		/* 113 Action39 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 114 Action40 <- <{ p.AddOperator(TypeDivide) }> */
		nil,
		/* 115 Action41 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 116 Action42 <- <{ p.AddOperator(TypeModulus) }> */
		nil,
		/* 117 Action43 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 118 Action44 <- <{ p.AddOperator(TypeExponentiation) }> */
		nil,
		/* 119 Action45 <- <{ p.AddOperator(TypeNegation) }> */
		nil,
		/* 120 Action46 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetK)}> */
		nil,
		/* 121 Action47 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetQ)}> */
		nil,
		/* 122 Action48 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 123 Action49 <- <{ p.AddOperator(TypeDiceSetQ) }> */
		nil,
		/* 124 Action50 <- <{ p.AddOperatorWithInt64(TypeDiceSetK, 1) }> */
		nil,
		/* 125 Action51 <- <{ p.AddOperatorWithInt64(TypeDiceSetQ, 1) }> */
		nil,
		/* 126 Action52 <- <{ p.AddOperator(TypeWodSetInit) }> */
		nil,
		/* 127 Action53 <- <{ p.AddOperator(TypeWodSetPool) }> */
		nil,
		/* 128 Action54 <- <{ p.AddOperator(TypeDCSetInit) }> */
		nil,
		/* 129 Action55 <- <{ p.AddOperator(TypeDCSetPool) }> */
		nil,
		/* 130 Action56 <- <{ p.AddValue("2"); p.AddLeftValueMark() }> */
		nil,
		/* 131 Action57 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 132 Action58 <- <{ p.AddValue("1"); p.AddLeftValueMark() }> */
		nil,
		/* 133 Action59 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 134 Action60 <- <{ p.AddValue("2"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 135 Action61 <- <{ p.AddValue("1"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 136 Action62 <- <{ p.AddOperator(TypeWodSetPoints) }> */
		nil,
		/* 137 Action63 <- <{ p.AddOperator(TypeWodSetThreshold) }> */
		nil,
		/* 138 Action64 <- <{ p.AddOperator(TypeWodSetThresholdQ) }> */
		nil,
		/* 139 Action65 <- <{ p.AddOperator(TypeDiceWod) }> */
		nil,
		/* 140 Action66 <- <{ p.AddOperator(TypeDCSetPoints) }> */
		nil,
		/* 141 Action67 <- <{ p.AddOperator(TypeDiceDC) }> */
		nil,
		/* 142 Action68 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 143 Action69 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 144 Action70 <- <{ p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 145 Action71 <- <{ p.AddValue("1"); p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 146 Action72 <- <{ p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 147 Action73 <- <{ p.AddValue("1"); p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 148 Action74 <- <{ p.AddValue("0"); p.AddValue("0"); p.AddOperator(TypeDiceFate) }> */
		nil,
		/* 149 Action75 <- <{ p.AddLoadVarnameForThis(text) }> */
		nil,
		/* 150 Action76 <- <{ p.WriteCode(TypeConvertInt, 0, "") }> */
		nil,
		/* 151 Action77 <- <{ p.WriteCode(TypeConvertStr, 0, "") }> */
		nil,
		/* 152 Action78 <- <{ p.AddLoadVarname(string(text)) }> */
		nil,
		nil,
		/* 154 Action79 <- <{ p.AddValue(string(text)) }> */
		nil,
		/* 155 Action80 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 156 Action81 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 157 Action82 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 158 Action83 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 159 Action84 <- <{ p.CounterPush() }> */
		nil,
		/* 160 Action85 <- <{p.CounterAdd(1)}> */
		nil,
		/* 161 Action86 <- <{p.CounterAdd(1)}> */
		nil,
		/* 162 Action87 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 163 Action88 <- <{ p.CounterPush() }> */
		nil,
		/* 164 Action89 <- <{p.CounterAdd(1)}> */
		nil,
		/* 165 Action90 <- <{p.CounterAdd(1)}> */
		nil,
		/* 166 Action91 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 167 Action92 <- <{ p.CounterPush() }> */
		nil,
		/* 168 Action93 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 169 Action94 <- <{ p.CounterPush() }> */
		nil,
		/* 170 Action95 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 171 Action96 <- <{ p.AddStName() }> */
		nil,
		/* 172 Action97 <- <{ p.AddStName() }> */
		nil,
		/* 173 Action98 <- <{ p.CodePush() }> */
		nil,
		/* 174 Action99 <- <{ p.CodePop(); p.AddStoreComputed(text); p.AddStName() }> */
		nil,
		/* 175 Action100 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 176 Action101 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 177 Action102 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 178 Action103 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 179 Action104 <- <{ p.AddValueStr(text) }> */
		nil,
		/* 180 Action105 <- <{ p.AddValueStr(text) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
