package dice

// Code generated by peg -switch -inline dice/roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleeBase
	rulee
	ruleeOne
	ruleassign_expr
	rules0
	ruleblock
	rulestmtElse
	rulestmtIf
	rulee0
	ruleeSimpleSwitch
	ruleeTernary
	ruleeBitwise
	ruleeBitwise1
	ruleeComp
	rulee1
	rulee2
	rulee3
	rulee4
	rulee5
	ruledndDiceSuffix
	rulekqDiceOp
	rule_dnumber
	rulesimpleDice2
	rulewodDicePool
	ruledoubleCrossDicePool
	ruleeDice
	rulelaNumberOrLeftParen
	ruleeDice2
	ruleeDice3
	ruleeDice4
	rulevalue
	rulenumber
	ruleidentifier
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulebitwiseOr
	rulelogicOr
	rulebitwiseAnd
	rulelogicAnd
	rulesp
	rulelt
	rulegt
	rulele
	rulege
	ruleeq
	rulene
	rulestrPart
	rulestrPart1
	rulestrPart2
	rulestrPart3
	rulefstring
	ruleescape
	rulest_expr
	ruleest
	rulest_assign_multi
	rulest_assign
	rulest_modify_multi_1
	rulest_modify_rest1
	rulest_modify_multi_2
	rulest_modify_multi_rest
	rulest_modify2
	rulest_modify_rest
	rulest_name1
	rulest_name2
	ruleid_ch0
	ruleid_ch
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
	ruleAction49
	ruleAction50
	ruleAction51
	ruleAction52
	ruleAction53
	ruleAction54
	ruleAction55
	ruleAction56
	ruleAction57
	ruleAction58
	ruleAction59
	ruleAction60
	ruleAction61
	ruleAction62
	ruleAction63
	ruleAction64
	ruleAction65
	ruleAction66
	ruleAction67
	ruleAction68
	ruleAction69
	ruleAction70
	ruleAction71
	ruleAction72
	ruleAction73
	ruleAction74
	ruleAction75
	ruleAction76
	ruleAction77
	ruleAction78
	rulePegText
	ruleAction79
	ruleAction80
	ruleAction81
	ruleAction82
	ruleAction83
	ruleAction84
	ruleAction85
	ruleAction86
	ruleAction87
	ruleAction88
	ruleAction89
	ruleAction90
	ruleAction91
	ruleAction92
	ruleAction93
	ruleAction94
	ruleAction95
	ruleAction96
	ruleAction97
	ruleAction98
	ruleAction99
	ruleAction100
	ruleAction101
	ruleAction102
	ruleAction103
	ruleAction104
	ruleAction105
	ruleAction106
)

var rul3s = [...]string{
	"Unknown",
	"eBase",
	"e",
	"eOne",
	"assign_expr",
	"s0",
	"block",
	"stmtElse",
	"stmtIf",
	"e0",
	"eSimpleSwitch",
	"eTernary",
	"eBitwise",
	"eBitwise1",
	"eComp",
	"e1",
	"e2",
	"e3",
	"e4",
	"e5",
	"dndDiceSuffix",
	"kqDiceOp",
	"_dnumber",
	"simpleDice2",
	"wodDicePool",
	"doubleCrossDicePool",
	"eDice",
	"laNumberOrLeftParen",
	"eDice2",
	"eDice3",
	"eDice4",
	"value",
	"number",
	"identifier",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"bitwiseOr",
	"logicOr",
	"bitwiseAnd",
	"logicAnd",
	"sp",
	"lt",
	"gt",
	"le",
	"ge",
	"eq",
	"ne",
	"strPart",
	"strPart1",
	"strPart2",
	"strPart3",
	"fstring",
	"escape",
	"st_expr",
	"est",
	"st_assign_multi",
	"st_assign",
	"st_modify_multi_1",
	"st_modify_rest1",
	"st_modify_multi_2",
	"st_modify_multi_rest",
	"st_modify2",
	"st_modify_rest",
	"st_name1",
	"st_name2",
	"id_ch0",
	"id_ch",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
	"Action49",
	"Action50",
	"Action51",
	"Action52",
	"Action53",
	"Action54",
	"Action55",
	"Action56",
	"Action57",
	"Action58",
	"Action59",
	"Action60",
	"Action61",
	"Action62",
	"Action63",
	"Action64",
	"Action65",
	"Action66",
	"Action67",
	"Action68",
	"Action69",
	"Action70",
	"Action71",
	"Action72",
	"Action73",
	"Action74",
	"Action75",
	"Action76",
	"Action77",
	"Action78",
	"PegText",
	"Action79",
	"Action80",
	"Action81",
	"Action82",
	"Action83",
	"Action84",
	"Action85",
	"Action86",
	"Action87",
	"Action88",
	"Action89",
	"Action90",
	"Action91",
	"Action92",
	"Action93",
	"Action94",
	"Action95",
	"Action96",
	"Action97",
	"Action98",
	"Action99",
	"Action100",
	"Action101",
	"Action102",
	"Action103",
	"Action104",
	"Action105",
	"Action106",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type DiceRollParser struct {
	RollExpression

	Buffer string
	buffer []rune
	rules  [182]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *DiceRollParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *DiceRollParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *DiceRollParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *DiceRollParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *DiceRollParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *DiceRollParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *DiceRollParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeHalt)
		case ruleAction1:
			p.AddOperator(TypeClearDetail)
		case ruleAction2:
			p.AddValueStr(string(text))
		case ruleAction3:
			p.AddStore()
		case ruleAction4:
			p.AddOperator(TypePop)
		case ruleAction5:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction6:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction7:
			p.PopAndSetOffset()
		case ruleAction8:
			p.AddValueStr("")
		case ruleAction9:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction10:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction11:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction12:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction13:
			p.PopAndSetOffset()
		case ruleAction14:
			p.CounterPush()
		case ruleAction15:
			p.CounterAdd(1)
		case ruleAction16:
			p.AddValueStr("")
			limit := p.CounterPop() + 1
			for i := int64(0); i < limit; i++ {
				p.PopAndSetOffset()
			}
		case ruleAction17:
			p.AddLeftValueMark()
		case ruleAction18:
			p.AddOperator(TypeBitwiseOr)
		case ruleAction19:
			p.AddLeftValueMark()
		case ruleAction20:
			p.AddOperator(TypeBitwiseAnd)
		case ruleAction21:
			p.AddLeftValueMark()
		case ruleAction22:
			p.AddOperator(TypeCompLT)
		case ruleAction23:
			p.AddLeftValueMark()
		case ruleAction24:
			p.AddOperator(TypeCompLE)
		case ruleAction25:
			p.AddLeftValueMark()
		case ruleAction26:
			p.AddOperator(TypeCompEQ)
		case ruleAction27:
			p.AddLeftValueMark()
		case ruleAction28:
			p.AddOperator(TypeCompNE)
		case ruleAction29:
			p.AddLeftValueMark()
		case ruleAction30:
			p.AddOperator(TypeCompGE)
		case ruleAction31:
			p.AddLeftValueMark()
		case ruleAction32:
			p.AddOperator(TypeCompGT)
		case ruleAction33:
			p.AddLeftValueMark()
		case ruleAction34:
			p.AddOperator(TypeAdd)
		case ruleAction35:
			p.AddLeftValueMark()
		case ruleAction36:
			p.AddOperator(TypeSubtract)
		case ruleAction37:
			p.AddLeftValueMark()
		case ruleAction38:
			p.AddOperator(TypeMultiply)
		case ruleAction39:
			p.AddLeftValueMark()
		case ruleAction40:
			p.AddOperator(TypeDivide)
		case ruleAction41:
			p.AddLeftValueMark()
		case ruleAction42:
			p.AddOperator(TypeModulus)
		case ruleAction43:
			p.AddLeftValueMark()
		case ruleAction44:
			p.AddOperator(TypeExponentiation)
		case ruleAction45:
			p.AddOperator(TypeNegation)
		case ruleAction46:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetK)
		case ruleAction47:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetQ)
		case ruleAction48:
			p.AddOperator(TypeDiceSetK)
		case ruleAction49:
			p.AddOperator(TypeDiceSetQ)
		case ruleAction50:
			p.AddOperatorWithInt64(TypeDiceSetK, 1)
		case ruleAction51:
			p.AddOperatorWithInt64(TypeDiceSetQ, 1)
		case ruleAction52:
			p.AddOperator(TypeWodSetInit)
		case ruleAction53:
			p.AddOperator(TypeWodSetPool)
		case ruleAction54:
			p.AddOperator(TypeDCSetInit)
		case ruleAction55:
			p.AddOperator(TypeDCSetPool)
		case ruleAction56:
			p.AddValue("2")
			p.AddLeftValueMark()
		case ruleAction57:
			p.AddOperator(TypeDice)
		case ruleAction58:
			p.AddValue("1")
			p.AddLeftValueMark()
		case ruleAction59:
			p.AddOperator(TypeDice)
		case ruleAction60:
			p.AddValue("2")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction61:
			p.AddValue("1")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction62:
			p.AddOperator(TypeWodSetPoints)
		case ruleAction63:
			p.AddOperator(TypeWodSetThreshold)
		case ruleAction64:
			p.AddOperator(TypeWodSetThresholdQ)
		case ruleAction65:
			p.AddOperator(TypeDiceWod)
		case ruleAction66:
			p.AddOperator(TypeDCSetPoints)
		case ruleAction67:
			p.AddOperator(TypeDiceDC)
		case ruleAction68:
			p.AddLeftValueMark()
		case ruleAction69:
			p.AddOperator(TypeDice)
		case ruleAction70:
			p.AddOperator(TypeDicePenalty)
		case ruleAction71:
			p.AddValue("1")
			p.AddOperator(TypeDicePenalty)
		case ruleAction72:
			p.AddOperator(TypeDiceBonus)
		case ruleAction73:
			p.AddValue("1")
			p.AddOperator(TypeDiceBonus)
		case ruleAction74:
			p.AddValue("0")
			p.AddValue("0")
			p.AddOperator(TypeDiceFate)
		case ruleAction75:
			p.AddLoadVarnameForThis(text)
		case ruleAction76:
			p.WriteCode(TypeConvertInt, 0, "")
		case ruleAction77:
			p.WriteCode(TypeConvertStr, 0, "")
		case ruleAction78:
			p.AddLoadVarname(string(text))
		case ruleAction79:
			p.AddValue(string(text))
		case ruleAction80:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction81:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction82:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction83:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction84:
			p.CounterPush()
		case ruleAction85:
			p.CounterAdd(1)
		case ruleAction86:
			p.CounterAdd(1)
		case ruleAction87:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction88:
			p.CounterPush()
		case ruleAction89:
			p.CounterAdd(1)
		case ruleAction90:
			p.CounterAdd(1)
		case ruleAction91:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction92:
			p.CounterPush()
		case ruleAction93:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction94:
			p.CounterPush()
		case ruleAction95:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction96:
			p.AddStName()
		case ruleAction97:
			p.AddStName()
		case ruleAction98:
			p.CodePush()
		case ruleAction99:
			p.CodePop()
			p.AddStoreComputed(text)
			p.AddStName()
		case ruleAction100:
			p.AddStModify("+", text)
		case ruleAction101:
			p.AddStModify("-", text)
		case ruleAction102:
			p.AddStModify("+", text)
		case ruleAction103:
			p.AddStModify("-", text)
		case ruleAction104:
			p.AddStModify("-", text)
		case ruleAction105:
			p.AddValueStr(text)
		case ruleAction106:
			p.AddValueStr(text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *DiceRollParser) Init(options ...func(*DiceRollParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 eBase <- <(e Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulee]() {
					goto l0
				}
				{
					add(ruleAction0, position)
				}
				add(ruleeBase, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e <- <(('^' 's' 't' st_expr) / (&{!p.flags.DisableBlock} e0) / (eOne (';' sp Action1 eOne?)*))> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				{
					position5, tokenIndex5 := position, tokenIndex
					if buffer[position] != rune('^') {
						goto l6
					}
					position++
					if buffer[position] != rune('s') {
						goto l6
					}
					position++
					if buffer[position] != rune('t') {
						goto l6
					}
					position++
					{
						position7 := position
						{
							position8, tokenIndex8 := position, tokenIndex
							{
								position10 := position
								{
									position11, tokenIndex11 := position, tokenIndex
									if !_rules[rulest_name2]() {
										goto l12
									}
									{
										position13 := position
										if !_rules[rulesp]() {
											goto l12
										}
										{
											position14, tokenIndex14 := position, tokenIndex
											if buffer[position] != rune('+') {
												goto l15
											}
											position++
											if buffer[position] != rune('=') {
												goto l15
											}
											position++
											if !_rules[rulesp]() {
												goto l15
											}
											{
												position16 := position
												if !_rules[rulee0]() {
													goto l15
												}
												add(rulePegText, position16)
											}
											{
												add(ruleAction100, position)
											}
											goto l14
										l15:
											position, tokenIndex = position14, tokenIndex14
											if buffer[position] != rune('-') {
												goto l12
											}
											position++
											if buffer[position] != rune('=') {
												goto l12
											}
											position++
											if !_rules[rulesp]() {
												goto l12
											}
											{
												position18 := position
												if !_rules[rulee0]() {
													goto l12
												}
												add(rulePegText, position18)
											}
											{
												add(ruleAction101, position)
											}
										}
									l14:
										add(rulest_modify_rest1, position13)
									}
									goto l11
								l12:
									position, tokenIndex = position11, tokenIndex11
									if !_rules[rulest_name1]() {
										goto l9
									}
									if !_rules[rulest_modify_rest]() {
										goto l9
									}
								}
							l11:
								if !_rules[rulesp]() {
									goto l9
								}
								{
									position20, tokenIndex20 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l20
									}
									position++
									goto l21
								l20:
									position, tokenIndex = position20, tokenIndex20
								}
							l21:
								if !_rules[rulesp]() {
									goto l9
								}
								if !_rules[rulest_modify_multi_rest]() {
									goto l9
								}
								add(rulest_modify_multi_1, position10)
							}
							goto l8
						l9:
							position, tokenIndex = position8, tokenIndex8
							{
								position23 := position
								{
									position26 := position
									{
										position27, tokenIndex27 := position, tokenIndex
										if !_rules[rulest_name2]() {
											goto l28
										}
										if !_rules[rulesp]() {
											goto l28
										}
										{
											position29, tokenIndex29 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l30
											}
											position++
											goto l29
										l30:
											position, tokenIndex = position29, tokenIndex29
											if buffer[position] != rune('=') {
												goto l28
											}
											position++
										}
									l29:
										if !_rules[rulesp]() {
											goto l28
										}
										if !_rules[ruleest]() {
											goto l28
										}
										{
											add(ruleAction96, position)
										}
										goto l27
									l28:
										position, tokenIndex = position27, tokenIndex27
										if !_rules[rulest_name1]() {
											goto l32
										}
										if !_rules[ruleest]() {
											goto l32
										}
										{
											add(ruleAction97, position)
										}
										goto l27
									l32:
										position, tokenIndex = position27, tokenIndex27
										if buffer[position] != rune('&') {
											goto l22
										}
										position++
										if !_rules[rulest_name2]() {
											goto l22
										}
										if !_rules[rulesp]() {
											goto l22
										}
										{
											position34, tokenIndex34 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l35
											}
											position++
											goto l34
										l35:
											position, tokenIndex = position34, tokenIndex34
											if buffer[position] != rune('=') {
												goto l22
											}
											position++
										}
									l34:
										if !_rules[rulesp]() {
											goto l22
										}
										{
											add(ruleAction98, position)
										}
										{
											position37 := position
											if !_rules[ruleest]() {
												goto l22
											}
											add(rulePegText, position37)
										}
										{
											add(ruleAction99, position)
										}
									}
								l27:
									add(rulest_assign, position26)
								}
								if !_rules[rulesp]() {
									goto l22
								}
								{
									position39, tokenIndex39 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l39
									}
									position++
									goto l40
								l39:
									position, tokenIndex = position39, tokenIndex39
								}
							l40:
								if !_rules[rulesp]() {
									goto l22
								}
							l24:
								{
									position25, tokenIndex25 := position, tokenIndex
									{
										position41 := position
										{
											position42, tokenIndex42 := position, tokenIndex
											if !_rules[rulest_name2]() {
												goto l43
											}
											if !_rules[rulesp]() {
												goto l43
											}
											{
												position44, tokenIndex44 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l45
												}
												position++
												goto l44
											l45:
												position, tokenIndex = position44, tokenIndex44
												if buffer[position] != rune('=') {
													goto l43
												}
												position++
											}
										l44:
											if !_rules[rulesp]() {
												goto l43
											}
											if !_rules[ruleest]() {
												goto l43
											}
											{
												add(ruleAction96, position)
											}
											goto l42
										l43:
											position, tokenIndex = position42, tokenIndex42
											if !_rules[rulest_name1]() {
												goto l47
											}
											if !_rules[ruleest]() {
												goto l47
											}
											{
												add(ruleAction97, position)
											}
											goto l42
										l47:
											position, tokenIndex = position42, tokenIndex42
											if buffer[position] != rune('&') {
												goto l25
											}
											position++
											if !_rules[rulest_name2]() {
												goto l25
											}
											if !_rules[rulesp]() {
												goto l25
											}
											{
												position49, tokenIndex49 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l50
												}
												position++
												goto l49
											l50:
												position, tokenIndex = position49, tokenIndex49
												if buffer[position] != rune('=') {
													goto l25
												}
												position++
											}
										l49:
											if !_rules[rulesp]() {
												goto l25
											}
											{
												add(ruleAction98, position)
											}
											{
												position52 := position
												if !_rules[ruleest]() {
													goto l25
												}
												add(rulePegText, position52)
											}
											{
												add(ruleAction99, position)
											}
										}
									l42:
										add(rulest_assign, position41)
									}
									if !_rules[rulesp]() {
										goto l25
									}
									{
										position54, tokenIndex54 := position, tokenIndex
										if buffer[position] != rune(',') {
											goto l54
										}
										position++
										goto l55
									l54:
										position, tokenIndex = position54, tokenIndex54
									}
								l55:
									if !_rules[rulesp]() {
										goto l25
									}
									goto l24
								l25:
									position, tokenIndex = position25, tokenIndex25
								}
								add(rulest_assign_multi, position23)
							}
							goto l8
						l22:
							position, tokenIndex = position8, tokenIndex8
							{
								position56 := position
								if !_rules[rulest_modify2]() {
									goto l6
								}
								if !_rules[rulesp]() {
									goto l6
								}
								{
									position57, tokenIndex57 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l57
									}
									position++
									goto l58
								l57:
									position, tokenIndex = position57, tokenIndex57
								}
							l58:
								if !_rules[rulesp]() {
									goto l6
								}
								if !_rules[rulest_modify_multi_rest]() {
									goto l6
								}
								add(rulest_modify_multi_2, position56)
							}
						}
					l8:
						add(rulest_expr, position7)
					}
					goto l5
				l6:
					position, tokenIndex = position5, tokenIndex5
					if !(!p.flags.DisableBlock) {
						goto l59
					}
					if !_rules[rulee0]() {
						goto l59
					}
					goto l5
				l59:
					position, tokenIndex = position5, tokenIndex5
					if !_rules[ruleeOne]() {
						goto l3
					}
				l60:
					{
						position61, tokenIndex61 := position, tokenIndex
						if buffer[position] != rune(';') {
							goto l61
						}
						position++
						if !_rules[rulesp]() {
							goto l61
						}
						{
							add(ruleAction1, position)
						}
						{
							position63, tokenIndex63 := position, tokenIndex
							if !_rules[ruleeOne]() {
								goto l63
							}
							goto l64
						l63:
							position, tokenIndex = position63, tokenIndex63
						}
					l64:
						goto l60
					l61:
						position, tokenIndex = position61, tokenIndex61
					}
				}
			l5:
				add(rulee, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 eOne <- <(sp (s0 / e0 / assign_expr))> */
		func() bool {
			position65, tokenIndex65 := position, tokenIndex
			{
				position66 := position
				if !_rules[rulesp]() {
					goto l65
				}
				{
					position67, tokenIndex67 := position, tokenIndex
					{
						position69 := position
						{
							position70 := position
							if buffer[position] != rune('i') {
								goto l68
							}
							position++
							if buffer[position] != rune('f') {
								goto l68
							}
							position++
							if !_rules[rulesp]() {
								goto l68
							}
							if !_rules[rulee0]() {
								goto l68
							}
							{
								add(ruleAction5, position)
							}
							if !_rules[ruleblock]() {
								goto l68
							}
							{
								add(ruleAction6, position)
							}
							{
								position73, tokenIndex73 := position, tokenIndex
								{
									position75 := position
									if buffer[position] != rune('e') {
										goto l73
									}
									position++
									if buffer[position] != rune('l') {
										goto l73
									}
									position++
									if buffer[position] != rune('s') {
										goto l73
									}
									position++
									if buffer[position] != rune('e') {
										goto l73
									}
									position++
									if !_rules[rulesp]() {
										goto l73
									}
									if !_rules[ruleblock]() {
										goto l73
									}
									add(rulestmtElse, position75)
								}
								goto l74
							l73:
								position, tokenIndex = position73, tokenIndex73
							}
						l74:
							{
								add(ruleAction7, position)
							}
							{
								add(ruleAction8, position)
							}
							add(rulestmtIf, position70)
						}
						add(rules0, position69)
					}
					goto l67
				l68:
					position, tokenIndex = position67, tokenIndex67
					if !_rules[rulee0]() {
						goto l78
					}
					goto l67
				l78:
					position, tokenIndex = position67, tokenIndex67
					if !_rules[ruleassign_expr]() {
						goto l65
					}
				}
			l67:
				add(ruleeOne, position66)
			}
			return true
		l65:
			position, tokenIndex = position65, tokenIndex65
			return false
		},
		/* 3 assign_expr <- <(&{p.flags.DisableBlock} identifier Action2 '=' sp e0 Action3)> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				if !(p.flags.DisableBlock) {
					goto l79
				}
				if !_rules[ruleidentifier]() {
					goto l79
				}
				{
					add(ruleAction2, position)
				}
				if buffer[position] != rune('=') {
					goto l79
				}
				position++
				if !_rules[rulesp]() {
					goto l79
				}
				if !_rules[rulee0]() {
					goto l79
				}
				{
					add(ruleAction3, position)
				}
				add(ruleassign_expr, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 4 s0 <- <stmtIf> */
		nil,
		/* 5 block <- <((('{' sp '}') / ('{' sp e Action4 '}')) sp)> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				{
					position86, tokenIndex86 := position, tokenIndex
					if buffer[position] != rune('{') {
						goto l87
					}
					position++
					if !_rules[rulesp]() {
						goto l87
					}
					if buffer[position] != rune('}') {
						goto l87
					}
					position++
					goto l86
				l87:
					position, tokenIndex = position86, tokenIndex86
					if buffer[position] != rune('{') {
						goto l84
					}
					position++
					if !_rules[rulesp]() {
						goto l84
					}
					if !_rules[rulee]() {
						goto l84
					}
					{
						add(ruleAction4, position)
					}
					if buffer[position] != rune('}') {
						goto l84
					}
					position++
				}
			l86:
				if !_rules[rulesp]() {
					goto l84
				}
				add(ruleblock, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 6 stmtElse <- <('e' 'l' 's' 'e' sp block)> */
		nil,
		/* 7 stmtIf <- <('i' 'f' sp e0 Action5 block Action6 stmtElse? Action7 Action8)> */
		nil,
		/* 8 e0 <- <eTernary> */
		func() bool {
			position91, tokenIndex91 := position, tokenIndex
			{
				position92 := position
				{
					position93 := position
					{
						position94, tokenIndex94 := position, tokenIndex
						if !_rules[ruleeBitwise]() {
							goto l95
						}
						if buffer[position] != rune('?') {
							goto l95
						}
						position++
						if !_rules[rulesp]() {
							goto l95
						}
						{
							add(ruleAction11, position)
						}
						if !_rules[ruleeBitwise]() {
							goto l95
						}
						if buffer[position] != rune(':') {
							goto l95
						}
						position++
						if !_rules[rulesp]() {
							goto l95
						}
						{
							add(ruleAction12, position)
						}
						if !_rules[ruleeBitwise]() {
							goto l95
						}
						{
							add(ruleAction13, position)
						}
						goto l94
					l95:
						position, tokenIndex = position94, tokenIndex94
						if !_rules[ruleeSimpleSwitch]() {
							goto l99
						}
						{
							add(ruleAction14, position)
						}
					l101:
						{
							position102, tokenIndex102 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l102
							}
							position++
							if !_rules[rulesp]() {
								goto l102
							}
							if !_rules[ruleeSimpleSwitch]() {
								goto l102
							}
							{
								add(ruleAction15, position)
							}
							goto l101
						l102:
							position, tokenIndex = position102, tokenIndex102
						}
						{
							add(ruleAction16, position)
						}
						goto l94
					l99:
						position, tokenIndex = position94, tokenIndex94
						if !_rules[ruleeBitwise]() {
							goto l91
						}
					}
				l94:
					add(ruleeTernary, position93)
				}
				add(rulee0, position92)
			}
			return true
		l91:
			position, tokenIndex = position91, tokenIndex91
			return false
		},
		/* 9 eSimpleSwitch <- <(eBitwise '?' sp Action9 eBitwise Action10)> */
		func() bool {
			position105, tokenIndex105 := position, tokenIndex
			{
				position106 := position
				if !_rules[ruleeBitwise]() {
					goto l105
				}
				if buffer[position] != rune('?') {
					goto l105
				}
				position++
				if !_rules[rulesp]() {
					goto l105
				}
				{
					add(ruleAction9, position)
				}
				if !_rules[ruleeBitwise]() {
					goto l105
				}
				{
					add(ruleAction10, position)
				}
				add(ruleeSimpleSwitch, position106)
			}
			return true
		l105:
			position, tokenIndex = position105, tokenIndex105
			return false
		},
		/* 10 eTernary <- <((eBitwise '?' sp Action11 eBitwise ':' sp Action12 eBitwise Action13) / (eSimpleSwitch Action14 (',' sp eSimpleSwitch Action15)* Action16) / eBitwise)> */
		nil,
		/* 11 eBitwise <- <((&{p.flags.DisableBitwiseOp} eComp) / eBitwise1)> */
		func() bool {
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				{
					position112, tokenIndex112 := position, tokenIndex
					if !(p.flags.DisableBitwiseOp) {
						goto l113
					}
					if !_rules[ruleeComp]() {
						goto l113
					}
					goto l112
				l113:
					position, tokenIndex = position112, tokenIndex112
					{
						position114 := position
						if !_rules[ruleeComp]() {
							goto l110
						}
					l115:
						{
							position116, tokenIndex116 := position, tokenIndex
							{
								position117, tokenIndex117 := position, tokenIndex
								{
									position119, tokenIndex119 := position, tokenIndex
									{
										position121 := position
										if buffer[position] != rune('|') {
											goto l120
										}
										position++
										if buffer[position] != rune('|') {
											goto l120
										}
										position++
										if !_rules[rulesp]() {
											goto l120
										}
										add(rulelogicOr, position121)
									}
									goto l119
								l120:
									position, tokenIndex = position119, tokenIndex119
									{
										position122 := position
										if buffer[position] != rune('|') {
											goto l118
										}
										position++
										if !_rules[rulesp]() {
											goto l118
										}
										add(rulebitwiseOr, position122)
									}
								}
							l119:
								{
									add(ruleAction17, position)
								}
								if !_rules[ruleeComp]() {
									goto l118
								}
								{
									add(ruleAction18, position)
								}
								goto l117
							l118:
								position, tokenIndex = position117, tokenIndex117
								{
									position125, tokenIndex125 := position, tokenIndex
									{
										position127 := position
										{
											position128, tokenIndex128 := position, tokenIndex
											if buffer[position] != rune('&') {
												goto l129
											}
											position++
											if buffer[position] != rune('&') {
												goto l129
											}
											position++
											goto l128
										l129:
											position, tokenIndex = position128, tokenIndex128
											if buffer[position] != rune('&') {
												goto l126
											}
											position++
											if buffer[position] != rune('a') {
												goto l126
											}
											position++
											if buffer[position] != rune('m') {
												goto l126
											}
											position++
											if buffer[position] != rune('p') {
												goto l126
											}
											position++
											if buffer[position] != rune(';') {
												goto l126
											}
											position++
											if buffer[position] != rune('&') {
												goto l126
											}
											position++
											if buffer[position] != rune('a') {
												goto l126
											}
											position++
											if buffer[position] != rune('m') {
												goto l126
											}
											position++
											if buffer[position] != rune('p') {
												goto l126
											}
											position++
											if buffer[position] != rune(';') {
												goto l126
											}
											position++
										}
									l128:
										if !_rules[rulesp]() {
											goto l126
										}
										add(rulelogicAnd, position127)
									}
									goto l125
								l126:
									position, tokenIndex = position125, tokenIndex125
									{
										position130 := position
										{
											position131, tokenIndex131 := position, tokenIndex
											if buffer[position] != rune('&') {
												goto l132
											}
											position++
											goto l131
										l132:
											position, tokenIndex = position131, tokenIndex131
											if buffer[position] != rune('&') {
												goto l116
											}
											position++
											if buffer[position] != rune('a') {
												goto l116
											}
											position++
											if buffer[position] != rune('m') {
												goto l116
											}
											position++
											if buffer[position] != rune('p') {
												goto l116
											}
											position++
											if buffer[position] != rune(';') {
												goto l116
											}
											position++
										}
									l131:
										if !_rules[rulesp]() {
											goto l116
										}
										add(rulebitwiseAnd, position130)
									}
								}
							l125:
								{
									add(ruleAction19, position)
								}
								if !_rules[ruleeComp]() {
									goto l116
								}
								{
									add(ruleAction20, position)
								}
							}
						l117:
							goto l115
						l116:
							position, tokenIndex = position116, tokenIndex116
						}
						add(ruleeBitwise1, position114)
					}
				}
			l112:
				add(ruleeBitwise, position111)
			}
			return true
		l110:
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 12 eBitwise1 <- <(eComp (((logicOr / bitwiseOr) Action17 eComp Action18) / ((logicAnd / bitwiseAnd) Action19 eComp Action20))*)> */
		nil,
		/* 13 eComp <- <(e1 ((lt Action21 e1 Action22) / (ge Action29 e1 Action30) / ((&('>') (gt Action31 e1 Action32)) | (&('!') (ne Action27 e1 Action28)) | (&('=') (eq Action25 e1 Action26)) | (&('<') (le Action23 e1 Action24))))*)> */
		func() bool {
			position136, tokenIndex136 := position, tokenIndex
			{
				position137 := position
				if !_rules[rulee1]() {
					goto l136
				}
			l138:
				{
					position139, tokenIndex139 := position, tokenIndex
					{
						position140, tokenIndex140 := position, tokenIndex
						{
							position142 := position
							{
								position143, tokenIndex143 := position, tokenIndex
								if buffer[position] != rune('<') {
									goto l144
								}
								position++
								goto l143
							l144:
								position, tokenIndex = position143, tokenIndex143
								if buffer[position] != rune('＜') {
									goto l141
								}
								position++
							}
						l143:
							if !_rules[rulesp]() {
								goto l141
							}
							add(rulelt, position142)
						}
						{
							add(ruleAction21, position)
						}
						if !_rules[rulee1]() {
							goto l141
						}
						{
							add(ruleAction22, position)
						}
						goto l140
					l141:
						position, tokenIndex = position140, tokenIndex140
						{
							position148 := position
							{
								position149, tokenIndex149 := position, tokenIndex
								if buffer[position] != rune('>') {
									goto l150
								}
								position++
								if buffer[position] != rune('=') {
									goto l150
								}
								position++
								goto l149
							l150:
								position, tokenIndex = position149, tokenIndex149
								if buffer[position] != rune('＞') {
									goto l147
								}
								position++
								if buffer[position] != rune('＝') {
									goto l147
								}
								position++
							}
						l149:
							if !_rules[rulesp]() {
								goto l147
							}
							add(rulege, position148)
						}
						{
							add(ruleAction29, position)
						}
						if !_rules[rulee1]() {
							goto l147
						}
						{
							add(ruleAction30, position)
						}
						goto l140
					l147:
						position, tokenIndex = position140, tokenIndex140
						{
							switch buffer[position] {
							case '>':
								{
									position154 := position
									{
										position155, tokenIndex155 := position, tokenIndex
										if buffer[position] != rune('>') {
											goto l156
										}
										position++
										goto l155
									l156:
										position, tokenIndex = position155, tokenIndex155
										if buffer[position] != rune('＞') {
											goto l139
										}
										position++
									}
								l155:
									if !_rules[rulesp]() {
										goto l139
									}
									add(rulegt, position154)
								}
								{
									add(ruleAction31, position)
								}
								if !_rules[rulee1]() {
									goto l139
								}
								{
									add(ruleAction32, position)
								}
							case '!':
								{
									position159 := position
									{
										position160, tokenIndex160 := position, tokenIndex
										if buffer[position] != rune('!') {
											goto l161
										}
										position++
										if buffer[position] != rune('=') {
											goto l161
										}
										position++
										goto l160
									l161:
										position, tokenIndex = position160, tokenIndex160
										if buffer[position] != rune('！') {
											goto l139
										}
										position++
										if buffer[position] != rune('＝') {
											goto l139
										}
										position++
									}
								l160:
									if !_rules[rulesp]() {
										goto l139
									}
									add(rulene, position159)
								}
								{
									add(ruleAction27, position)
								}
								if !_rules[rulee1]() {
									goto l139
								}
								{
									add(ruleAction28, position)
								}
							case '=':
								{
									position164 := position
									{
										position165, tokenIndex165 := position, tokenIndex
										if buffer[position] != rune('=') {
											goto l166
										}
										position++
										if buffer[position] != rune('=') {
											goto l166
										}
										position++
										goto l165
									l166:
										position, tokenIndex = position165, tokenIndex165
										if buffer[position] != rune('＝') {
											goto l139
										}
										position++
										if buffer[position] != rune('＝') {
											goto l139
										}
										position++
									}
								l165:
									if !_rules[rulesp]() {
										goto l139
									}
									add(ruleeq, position164)
								}
								{
									add(ruleAction25, position)
								}
								if !_rules[rulee1]() {
									goto l139
								}
								{
									add(ruleAction26, position)
								}
							default:
								{
									position169 := position
									{
										position170, tokenIndex170 := position, tokenIndex
										if buffer[position] != rune('<') {
											goto l171
										}
										position++
										if buffer[position] != rune('=') {
											goto l171
										}
										position++
										goto l170
									l171:
										position, tokenIndex = position170, tokenIndex170
										if buffer[position] != rune('＜') {
											goto l139
										}
										position++
										if buffer[position] != rune('＝') {
											goto l139
										}
										position++
									}
								l170:
									if !_rules[rulesp]() {
										goto l139
									}
									add(rulele, position169)
								}
								{
									add(ruleAction23, position)
								}
								if !_rules[rulee1]() {
									goto l139
								}
								{
									add(ruleAction24, position)
								}
							}
						}

					}
				l140:
					goto l138
				l139:
					position, tokenIndex = position139, tokenIndex139
				}
				add(ruleeComp, position137)
			}
			return true
		l136:
			position, tokenIndex = position136, tokenIndex136
			return false
		},
		/* 14 e1 <- <(e2 ((add Action33 e2 Action34) / (minus Action35 e2 Action36))*)> */
		func() bool {
			position174, tokenIndex174 := position, tokenIndex
			{
				position175 := position
				if !_rules[rulee2]() {
					goto l174
				}
			l176:
				{
					position177, tokenIndex177 := position, tokenIndex
					{
						position178, tokenIndex178 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l179
						}
						{
							add(ruleAction33, position)
						}
						if !_rules[rulee2]() {
							goto l179
						}
						{
							add(ruleAction34, position)
						}
						goto l178
					l179:
						position, tokenIndex = position178, tokenIndex178
						if !_rules[ruleminus]() {
							goto l177
						}
						{
							add(ruleAction35, position)
						}
						if !_rules[rulee2]() {
							goto l177
						}
						{
							add(ruleAction36, position)
						}
					}
				l178:
					goto l176
				l177:
					position, tokenIndex = position177, tokenIndex177
				}
				add(rulee1, position175)
			}
			return true
		l174:
			position, tokenIndex = position174, tokenIndex174
			return false
		},
		/* 15 e2 <- <(e3 ((&('%') (modulus Action41 e3 Action42)) | (&('/') (divide Action39 e3 Action40)) | (&('*') (multiply Action37 e3 Action38)))*)> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				if !_rules[rulee3]() {
					goto l184
				}
			l186:
				{
					position187, tokenIndex187 := position, tokenIndex
					{
						switch buffer[position] {
						case '%':
							{
								position189 := position
								if buffer[position] != rune('%') {
									goto l187
								}
								position++
								if !_rules[rulesp]() {
									goto l187
								}
								add(rulemodulus, position189)
							}
							{
								add(ruleAction41, position)
							}
							if !_rules[rulee3]() {
								goto l187
							}
							{
								add(ruleAction42, position)
							}
						case '/':
							{
								position192 := position
								{
									position193, tokenIndex193 := position, tokenIndex
									if buffer[position] != rune('/') {
										goto l194
									}
									position++
									goto l193
								l194:
									position, tokenIndex = position193, tokenIndex193
									if buffer[position] != rune('／') {
										goto l187
									}
									position++
								}
							l193:
								if !_rules[rulesp]() {
									goto l187
								}
								add(ruledivide, position192)
							}
							{
								add(ruleAction39, position)
							}
							if !_rules[rulee3]() {
								goto l187
							}
							{
								add(ruleAction40, position)
							}
						default:
							{
								position197 := position
								{
									position198, tokenIndex198 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l199
									}
									position++
									goto l198
								l199:
									position, tokenIndex = position198, tokenIndex198
									if buffer[position] != rune('＊') {
										goto l187
									}
									position++
								}
							l198:
								if !_rules[rulesp]() {
									goto l187
								}
								add(rulemultiply, position197)
							}
							{
								add(ruleAction37, position)
							}
							if !_rules[rulee3]() {
								goto l187
							}
							{
								add(ruleAction38, position)
							}
						}
					}

					goto l186
				l187:
					position, tokenIndex = position187, tokenIndex187
				}
				add(rulee2, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 16 e3 <- <(e4 (exponentiation Action43 e4 Action44)*)> */
		func() bool {
			position202, tokenIndex202 := position, tokenIndex
			{
				position203 := position
				if !_rules[rulee4]() {
					goto l202
				}
			l204:
				{
					position205, tokenIndex205 := position, tokenIndex
					{
						position206 := position
						{
							position207, tokenIndex207 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l208
							}
							position++
							if !_rules[rulesp]() {
								goto l208
							}
							goto l207
						l208:
							position, tokenIndex = position207, tokenIndex207
							if buffer[position] != rune('*') {
								goto l205
							}
							position++
							if buffer[position] != rune('*') {
								goto l205
							}
							position++
							if !_rules[rulesp]() {
								goto l205
							}
						}
					l207:
						add(ruleexponentiation, position206)
					}
					{
						add(ruleAction43, position)
					}
					if !_rules[rulee4]() {
						goto l205
					}
					{
						add(ruleAction44, position)
					}
					goto l204
				l205:
					position, tokenIndex = position205, tokenIndex205
				}
				add(rulee3, position203)
			}
			return true
		l202:
			position, tokenIndex = position202, tokenIndex202
			return false
		},
		/* 17 e4 <- <((minus e5 Action45) / e5)> */
		func() bool {
			position211, tokenIndex211 := position, tokenIndex
			{
				position212 := position
				{
					position213, tokenIndex213 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l214
					}
					if !_rules[rulee5]() {
						goto l214
					}
					{
						add(ruleAction45, position)
					}
					goto l213
				l214:
					position, tokenIndex = position213, tokenIndex213
					if !_rules[rulee5]() {
						goto l211
					}
				}
			l213:
				add(rulee4, position212)
			}
			return true
		l211:
			position, tokenIndex = position211, tokenIndex211
			return false
		},
		/* 18 e5 <- <((add eDice) / eDice)> */
		func() bool {
			position216, tokenIndex216 := position, tokenIndex
			{
				position217 := position
				{
					position218, tokenIndex218 := position, tokenIndex
					if !_rules[ruleadd]() {
						goto l219
					}
					if !_rules[ruleeDice]() {
						goto l219
					}
					goto l218
				l219:
					position, tokenIndex = position218, tokenIndex218
					if !_rules[ruleeDice]() {
						goto l216
					}
				}
			l218:
				add(rulee5, position217)
			}
			return true
		l216:
			position, tokenIndex = position216, tokenIndex216
			return false
		},
		/* 19 dndDiceSuffix <- <(((('优' '势') / ('k' 'h')) Action46 sp) / ((('劣' '势') / ('k' 'l')) Action47 sp))> */
		func() bool {
			position220, tokenIndex220 := position, tokenIndex
			{
				position221 := position
				{
					position222, tokenIndex222 := position, tokenIndex
					{
						position224, tokenIndex224 := position, tokenIndex
						if buffer[position] != rune('优') {
							goto l225
						}
						position++
						if buffer[position] != rune('势') {
							goto l225
						}
						position++
						goto l224
					l225:
						position, tokenIndex = position224, tokenIndex224
						if buffer[position] != rune('k') {
							goto l223
						}
						position++
						if buffer[position] != rune('h') {
							goto l223
						}
						position++
					}
				l224:
					{
						add(ruleAction46, position)
					}
					if !_rules[rulesp]() {
						goto l223
					}
					goto l222
				l223:
					position, tokenIndex = position222, tokenIndex222
					{
						position227, tokenIndex227 := position, tokenIndex
						if buffer[position] != rune('劣') {
							goto l228
						}
						position++
						if buffer[position] != rune('势') {
							goto l228
						}
						position++
						goto l227
					l228:
						position, tokenIndex = position227, tokenIndex227
						if buffer[position] != rune('k') {
							goto l220
						}
						position++
						if buffer[position] != rune('l') {
							goto l220
						}
						position++
					}
				l227:
					{
						add(ruleAction47, position)
					}
					if !_rules[rulesp]() {
						goto l220
					}
				}
			l222:
				add(ruledndDiceSuffix, position221)
			}
			return true
		l220:
			position, tokenIndex = position220, tokenIndex220
			return false
		},
		/* 20 kqDiceOp <- <(('k' eDice2 Action48)? ('q' eDice2 Action49)? ('d' 'l' eDice2 Action50)? ('d' 'h' eDice2 Action51)?)> */
		func() bool {
			{
				position231 := position
				{
					position232, tokenIndex232 := position, tokenIndex
					if buffer[position] != rune('k') {
						goto l232
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l232
					}
					{
						add(ruleAction48, position)
					}
					goto l233
				l232:
					position, tokenIndex = position232, tokenIndex232
				}
			l233:
				{
					position235, tokenIndex235 := position, tokenIndex
					if buffer[position] != rune('q') {
						goto l235
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l235
					}
					{
						add(ruleAction49, position)
					}
					goto l236
				l235:
					position, tokenIndex = position235, tokenIndex235
				}
			l236:
				{
					position238, tokenIndex238 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l238
					}
					position++
					if buffer[position] != rune('l') {
						goto l238
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l238
					}
					{
						add(ruleAction50, position)
					}
					goto l239
				l238:
					position, tokenIndex = position238, tokenIndex238
				}
			l239:
				{
					position241, tokenIndex241 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l241
					}
					position++
					if buffer[position] != rune('h') {
						goto l241
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l241
					}
					{
						add(ruleAction51, position)
					}
					goto l242
				l241:
					position, tokenIndex = position241, tokenIndex241
				}
			l242:
				add(rulekqDiceOp, position231)
			}
			return true
		},
		/* 21 _dnumber <- <&(('d' / 'D') (number / '('))> */
		func() bool {
			position244, tokenIndex244 := position, tokenIndex
			{
				position245 := position
				{
					position246, tokenIndex246 := position, tokenIndex
					{
						position247, tokenIndex247 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l248
						}
						position++
						goto l247
					l248:
						position, tokenIndex = position247, tokenIndex247
						if buffer[position] != rune('D') {
							goto l244
						}
						position++
					}
				l247:
					{
						position249, tokenIndex249 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l250
						}
						goto l249
					l250:
						position, tokenIndex = position249, tokenIndex249
						if buffer[position] != rune('(') {
							goto l244
						}
						position++
					}
				l249:
					position, tokenIndex = position246, tokenIndex246
				}
				add(rule_dnumber, position245)
			}
			return true
		l244:
			position, tokenIndex = position244, tokenIndex244
			return false
		},
		/* 22 simpleDice2 <- <(&(number / '(') eDice2)> */
		func() bool {
			position251, tokenIndex251 := position, tokenIndex
			{
				position252 := position
				{
					position253, tokenIndex253 := position, tokenIndex
					{
						position254, tokenIndex254 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l255
						}
						goto l254
					l255:
						position, tokenIndex = position254, tokenIndex254
						if buffer[position] != rune('(') {
							goto l251
						}
						position++
					}
				l254:
					position, tokenIndex = position253, tokenIndex253
				}
				if !_rules[ruleeDice2]() {
					goto l251
				}
				add(rulesimpleDice2, position252)
			}
			return true
		l251:
			position, tokenIndex = position251, tokenIndex251
			return false
		},
		/* 23 wodDicePool <- <(Action52 (simpleDice2 Action53)?)> */
		nil,
		/* 24 doubleCrossDicePool <- <(Action54 (simpleDice2 Action55))> */
		nil,
		/* 25 eDice <- <((_dnumber ('d' / 'D') Action56 eDice2 dndDiceSuffix Action57) / (_dnumber ('d' / 'D') Action58 eDice2 kqDiceOp Action59) / (('d' / 'D') dndDiceSuffix Action60) / (('d' / 'D') !(!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .) sp Action61) / (wodDicePool ('a' / 'A') simpleDice2 ((&('Q' | 'q') (('q' / 'Q') simpleDice2 Action64)) | (&('K' | 'k') (('k' / 'K') simpleDice2 Action63)) | (&('M' | 'm') (('m' / 'M') simpleDice2 Action62)))* Action65) / (doubleCrossDicePool ('c' / 'C') simpleDice2 (('m' / 'M') simpleDice2 Action66)* Action67) / (eDice2 (('d' / 'D') Action68 simpleDice2 kqDiceOp Action69)*))> */
		func() bool {
			position258, tokenIndex258 := position, tokenIndex
			{
				position259 := position
				{
					position260, tokenIndex260 := position, tokenIndex
					if !_rules[rule_dnumber]() {
						goto l261
					}
					{
						position262, tokenIndex262 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l263
						}
						position++
						goto l262
					l263:
						position, tokenIndex = position262, tokenIndex262
						if buffer[position] != rune('D') {
							goto l261
						}
						position++
					}
				l262:
					{
						add(ruleAction56, position)
					}
					if !_rules[ruleeDice2]() {
						goto l261
					}
					if !_rules[ruledndDiceSuffix]() {
						goto l261
					}
					{
						add(ruleAction57, position)
					}
					goto l260
				l261:
					position, tokenIndex = position260, tokenIndex260
					if !_rules[rule_dnumber]() {
						goto l266
					}
					{
						position267, tokenIndex267 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l268
						}
						position++
						goto l267
					l268:
						position, tokenIndex = position267, tokenIndex267
						if buffer[position] != rune('D') {
							goto l266
						}
						position++
					}
				l267:
					{
						add(ruleAction58, position)
					}
					if !_rules[ruleeDice2]() {
						goto l266
					}
					if !_rules[rulekqDiceOp]() {
						goto l266
					}
					{
						add(ruleAction59, position)
					}
					goto l260
				l266:
					position, tokenIndex = position260, tokenIndex260
					{
						position272, tokenIndex272 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l273
						}
						position++
						goto l272
					l273:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('D') {
							goto l271
						}
						position++
					}
				l272:
					if !_rules[ruledndDiceSuffix]() {
						goto l271
					}
					{
						add(ruleAction60, position)
					}
					goto l260
				l271:
					position, tokenIndex = position260, tokenIndex260
					{
						position276, tokenIndex276 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l277
						}
						position++
						goto l276
					l277:
						position, tokenIndex = position276, tokenIndex276
						if buffer[position] != rune('D') {
							goto l275
						}
						position++
					}
				l276:
					{
						position278, tokenIndex278 := position, tokenIndex
						{
							position279, tokenIndex279 := position, tokenIndex
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l279
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l279
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l279
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l279
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l279
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l279
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l279
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l279
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l279
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l279
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l279
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l279
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l279
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l279
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l279
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l279
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l279
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l279
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l279
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l279
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l279
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l279
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l279
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l279
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l279
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l279
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l279
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l279
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l279
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l279
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l279
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l279
									}
									position++
								}
							}

							goto l278
						l279:
							position, tokenIndex = position279, tokenIndex279
						}
						if !matchDot() {
							goto l278
						}
						goto l275
					l278:
						position, tokenIndex = position278, tokenIndex278
					}
					if !_rules[rulesp]() {
						goto l275
					}
					{
						add(ruleAction61, position)
					}
					goto l260
				l275:
					position, tokenIndex = position260, tokenIndex260
					{
						position283 := position
						{
							add(ruleAction52, position)
						}
						{
							position285, tokenIndex285 := position, tokenIndex
							if !_rules[rulesimpleDice2]() {
								goto l285
							}
							{
								add(ruleAction53, position)
							}
							goto l286
						l285:
							position, tokenIndex = position285, tokenIndex285
						}
					l286:
						add(rulewodDicePool, position283)
					}
					{
						position288, tokenIndex288 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l289
						}
						position++
						goto l288
					l289:
						position, tokenIndex = position288, tokenIndex288
						if buffer[position] != rune('A') {
							goto l282
						}
						position++
					}
				l288:
					if !_rules[rulesimpleDice2]() {
						goto l282
					}
				l290:
					{
						position291, tokenIndex291 := position, tokenIndex
						{
							switch buffer[position] {
							case 'Q', 'q':
								{
									position293, tokenIndex293 := position, tokenIndex
									if buffer[position] != rune('q') {
										goto l294
									}
									position++
									goto l293
								l294:
									position, tokenIndex = position293, tokenIndex293
									if buffer[position] != rune('Q') {
										goto l291
									}
									position++
								}
							l293:
								if !_rules[rulesimpleDice2]() {
									goto l291
								}
								{
									add(ruleAction64, position)
								}
							case 'K', 'k':
								{
									position296, tokenIndex296 := position, tokenIndex
									if buffer[position] != rune('k') {
										goto l297
									}
									position++
									goto l296
								l297:
									position, tokenIndex = position296, tokenIndex296
									if buffer[position] != rune('K') {
										goto l291
									}
									position++
								}
							l296:
								if !_rules[rulesimpleDice2]() {
									goto l291
								}
								{
									add(ruleAction63, position)
								}
							default:
								{
									position299, tokenIndex299 := position, tokenIndex
									if buffer[position] != rune('m') {
										goto l300
									}
									position++
									goto l299
								l300:
									position, tokenIndex = position299, tokenIndex299
									if buffer[position] != rune('M') {
										goto l291
									}
									position++
								}
							l299:
								if !_rules[rulesimpleDice2]() {
									goto l291
								}
								{
									add(ruleAction62, position)
								}
							}
						}

						goto l290
					l291:
						position, tokenIndex = position291, tokenIndex291
					}
					{
						add(ruleAction65, position)
					}
					goto l260
				l282:
					position, tokenIndex = position260, tokenIndex260
					{
						position304 := position
						{
							add(ruleAction54, position)
						}
						if !_rules[rulesimpleDice2]() {
							goto l303
						}
						{
							add(ruleAction55, position)
						}
						add(ruledoubleCrossDicePool, position304)
					}
					{
						position307, tokenIndex307 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l308
						}
						position++
						goto l307
					l308:
						position, tokenIndex = position307, tokenIndex307
						if buffer[position] != rune('C') {
							goto l303
						}
						position++
					}
				l307:
					if !_rules[rulesimpleDice2]() {
						goto l303
					}
				l309:
					{
						position310, tokenIndex310 := position, tokenIndex
						{
							position311, tokenIndex311 := position, tokenIndex
							if buffer[position] != rune('m') {
								goto l312
							}
							position++
							goto l311
						l312:
							position, tokenIndex = position311, tokenIndex311
							if buffer[position] != rune('M') {
								goto l310
							}
							position++
						}
					l311:
						if !_rules[rulesimpleDice2]() {
							goto l310
						}
						{
							add(ruleAction66, position)
						}
						goto l309
					l310:
						position, tokenIndex = position310, tokenIndex310
					}
					{
						add(ruleAction67, position)
					}
					goto l260
				l303:
					position, tokenIndex = position260, tokenIndex260
					if !_rules[ruleeDice2]() {
						goto l258
					}
				l315:
					{
						position316, tokenIndex316 := position, tokenIndex
						{
							position317, tokenIndex317 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l318
							}
							position++
							goto l317
						l318:
							position, tokenIndex = position317, tokenIndex317
							if buffer[position] != rune('D') {
								goto l316
							}
							position++
						}
					l317:
						{
							add(ruleAction68, position)
						}
						if !_rules[rulesimpleDice2]() {
							goto l316
						}
						if !_rules[rulekqDiceOp]() {
							goto l316
						}
						{
							add(ruleAction69, position)
						}
						goto l315
					l316:
						position, tokenIndex = position316, tokenIndex316
					}
				}
			l260:
				add(ruleeDice, position259)
			}
			return true
		l258:
			position, tokenIndex = position258, tokenIndex258
			return false
		},
		/* 26 laNumberOrLeftParen <- <&(number / '(')> */
		func() bool {
			position321, tokenIndex321 := position, tokenIndex
			{
				position322 := position
				{
					position323, tokenIndex323 := position, tokenIndex
					{
						position324, tokenIndex324 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l325
						}
						goto l324
					l325:
						position, tokenIndex = position324, tokenIndex324
						if buffer[position] != rune('(') {
							goto l321
						}
						position++
					}
				l324:
					position, tokenIndex = position323, tokenIndex323
				}
				add(rulelaNumberOrLeftParen, position322)
			}
			return true
		l321:
			position, tokenIndex = position321, tokenIndex321
			return false
		},
		/* 27 eDice2 <- <((('p' / 'P') laNumberOrLeftParen eDice3 Action70) / (('p' / 'P') Action71) / eDice3)> */
		func() bool {
			position326, tokenIndex326 := position, tokenIndex
			{
				position327 := position
				{
					position328, tokenIndex328 := position, tokenIndex
					{
						position330, tokenIndex330 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l331
						}
						position++
						goto l330
					l331:
						position, tokenIndex = position330, tokenIndex330
						if buffer[position] != rune('P') {
							goto l329
						}
						position++
					}
				l330:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l329
					}
					if !_rules[ruleeDice3]() {
						goto l329
					}
					{
						add(ruleAction70, position)
					}
					goto l328
				l329:
					position, tokenIndex = position328, tokenIndex328
					{
						position334, tokenIndex334 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l335
						}
						position++
						goto l334
					l335:
						position, tokenIndex = position334, tokenIndex334
						if buffer[position] != rune('P') {
							goto l333
						}
						position++
					}
				l334:
					{
						add(ruleAction71, position)
					}
					goto l328
				l333:
					position, tokenIndex = position328, tokenIndex328
					if !_rules[ruleeDice3]() {
						goto l326
					}
				}
			l328:
				add(ruleeDice2, position327)
			}
			return true
		l326:
			position, tokenIndex = position326, tokenIndex326
			return false
		},
		/* 28 eDice3 <- <((('b' / 'B') laNumberOrLeftParen value Action72) / (('b' / 'B') Action73) / eDice4)> */
		func() bool {
			position337, tokenIndex337 := position, tokenIndex
			{
				position338 := position
				{
					position339, tokenIndex339 := position, tokenIndex
					{
						position341, tokenIndex341 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l342
						}
						position++
						goto l341
					l342:
						position, tokenIndex = position341, tokenIndex341
						if buffer[position] != rune('B') {
							goto l340
						}
						position++
					}
				l341:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l340
					}
					if !_rules[rulevalue]() {
						goto l340
					}
					{
						add(ruleAction72, position)
					}
					goto l339
				l340:
					position, tokenIndex = position339, tokenIndex339
					{
						position345, tokenIndex345 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l346
						}
						position++
						goto l345
					l346:
						position, tokenIndex = position345, tokenIndex345
						if buffer[position] != rune('B') {
							goto l344
						}
						position++
					}
				l345:
					{
						add(ruleAction73, position)
					}
					goto l339
				l344:
					position, tokenIndex = position339, tokenIndex339
					{
						position348 := position
						{
							position349, tokenIndex349 := position, tokenIndex
							{
								position351, tokenIndex351 := position, tokenIndex
								if buffer[position] != rune('f') {
									goto l352
								}
								position++
								goto l351
							l352:
								position, tokenIndex = position351, tokenIndex351
								if buffer[position] != rune('F') {
									goto l350
								}
								position++
							}
						l351:
							if !_rules[rulesp]() {
								goto l350
							}
							{
								add(ruleAction74, position)
							}
							goto l349
						l350:
							position, tokenIndex = position349, tokenIndex349
							if !_rules[rulevalue]() {
								goto l337
							}
						}
					l349:
						add(ruleeDice4, position348)
					}
				}
			l339:
				add(ruleeDice3, position338)
			}
			return true
		l337:
			position, tokenIndex = position337, tokenIndex337
			return false
		},
		/* 29 eDice4 <- <((('f' / 'F') sp Action74) / value)> */
		nil,
		/* 30 value <- <(number / ('t' 'h' 'i' 's' sp '.' sp identifier sp Action75) / ('i' 'n' 't' '(' sp e0 sp ')' sp Action76) / ('s' 't' 'r' '(' sp e0 sp ')' sp Action77) / assign_expr / (identifier Action78) / sub / fstring)> */
		func() bool {
			position355, tokenIndex355 := position, tokenIndex
			{
				position356 := position
				{
					position357, tokenIndex357 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l358
					}
					goto l357
				l358:
					position, tokenIndex = position357, tokenIndex357
					if buffer[position] != rune('t') {
						goto l359
					}
					position++
					if buffer[position] != rune('h') {
						goto l359
					}
					position++
					if buffer[position] != rune('i') {
						goto l359
					}
					position++
					if buffer[position] != rune('s') {
						goto l359
					}
					position++
					if !_rules[rulesp]() {
						goto l359
					}
					if buffer[position] != rune('.') {
						goto l359
					}
					position++
					if !_rules[rulesp]() {
						goto l359
					}
					if !_rules[ruleidentifier]() {
						goto l359
					}
					if !_rules[rulesp]() {
						goto l359
					}
					{
						add(ruleAction75, position)
					}
					goto l357
				l359:
					position, tokenIndex = position357, tokenIndex357
					if buffer[position] != rune('i') {
						goto l361
					}
					position++
					if buffer[position] != rune('n') {
						goto l361
					}
					position++
					if buffer[position] != rune('t') {
						goto l361
					}
					position++
					if buffer[position] != rune('(') {
						goto l361
					}
					position++
					if !_rules[rulesp]() {
						goto l361
					}
					if !_rules[rulee0]() {
						goto l361
					}
					if !_rules[rulesp]() {
						goto l361
					}
					if buffer[position] != rune(')') {
						goto l361
					}
					position++
					if !_rules[rulesp]() {
						goto l361
					}
					{
						add(ruleAction76, position)
					}
					goto l357
				l361:
					position, tokenIndex = position357, tokenIndex357
					if buffer[position] != rune('s') {
						goto l363
					}
					position++
					if buffer[position] != rune('t') {
						goto l363
					}
					position++
					if buffer[position] != rune('r') {
						goto l363
					}
					position++
					if buffer[position] != rune('(') {
						goto l363
					}
					position++
					if !_rules[rulesp]() {
						goto l363
					}
					if !_rules[rulee0]() {
						goto l363
					}
					if !_rules[rulesp]() {
						goto l363
					}
					if buffer[position] != rune(')') {
						goto l363
					}
					position++
					if !_rules[rulesp]() {
						goto l363
					}
					{
						add(ruleAction77, position)
					}
					goto l357
				l363:
					position, tokenIndex = position357, tokenIndex357
					if !_rules[ruleassign_expr]() {
						goto l365
					}
					goto l357
				l365:
					position, tokenIndex = position357, tokenIndex357
					if !_rules[ruleidentifier]() {
						goto l366
					}
					{
						add(ruleAction78, position)
					}
					goto l357
				l366:
					position, tokenIndex = position357, tokenIndex357
					{
						position369 := position
						{
							position370 := position
							if buffer[position] != rune('(') {
								goto l368
							}
							position++
							if !_rules[rulesp]() {
								goto l368
							}
							add(ruleopen, position370)
						}
						if !_rules[rulee0]() {
							goto l368
						}
						{
							position371 := position
							if buffer[position] != rune(')') {
								goto l368
							}
							position++
							if !_rules[rulesp]() {
								goto l368
							}
							add(ruleclose, position371)
						}
						add(rulesub, position369)
					}
					goto l357
				l368:
					position, tokenIndex = position357, tokenIndex357
					{
						position372 := position
						{
							switch buffer[position] {
							case '\'':
								if buffer[position] != rune('\'') {
									goto l355
								}
								position++
								{
									add(ruleAction94, position)
								}
								{
									position375 := position
								l376:
									{
										position377, tokenIndex377 := position, tokenIndex
										{
											position378 := position
											{
												position379 := position
												{
													position382, tokenIndex382 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l383
													}
													goto l382
												l383:
													position, tokenIndex = position382, tokenIndex382
													{
														position384, tokenIndex384 := position, tokenIndex
														{
															switch buffer[position] {
															case '\r':
																if buffer[position] != rune('\r') {
																	goto l384
																}
																position++
															case '\n':
																if buffer[position] != rune('\n') {
																	goto l384
																}
																position++
															case '\\':
																if buffer[position] != rune('\\') {
																	goto l384
																}
																position++
															default:
																if buffer[position] != rune('\'') {
																	goto l384
																}
																position++
															}
														}

														goto l377
													l384:
														position, tokenIndex = position384, tokenIndex384
													}
													if !matchDot() {
														goto l377
													}
												}
											l382:
											l380:
												{
													position381, tokenIndex381 := position, tokenIndex
													{
														position386, tokenIndex386 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l387
														}
														goto l386
													l387:
														position, tokenIndex = position386, tokenIndex386
														{
															position388, tokenIndex388 := position, tokenIndex
															{
																switch buffer[position] {
																case '\r':
																	if buffer[position] != rune('\r') {
																		goto l388
																	}
																	position++
																case '\n':
																	if buffer[position] != rune('\n') {
																		goto l388
																	}
																	position++
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l388
																	}
																	position++
																default:
																	if buffer[position] != rune('\'') {
																		goto l388
																	}
																	position++
																}
															}

															goto l381
														l388:
															position, tokenIndex = position388, tokenIndex388
														}
														if !matchDot() {
															goto l381
														}
													}
												l386:
													goto l380
												l381:
													position, tokenIndex = position381, tokenIndex381
												}
												add(rulePegText, position379)
											}
											{
												add(ruleAction83, position)
											}
											add(rulestrPart3, position378)
										}
										goto l376
									l377:
										position, tokenIndex = position377, tokenIndex377
									}
									add(rulePegText, position375)
								}
								if buffer[position] != rune('\'') {
									goto l355
								}
								position++
								{
									add(ruleAction95, position)
								}
							case '"':
								if buffer[position] != rune('"') {
									goto l355
								}
								position++
								{
									add(ruleAction92, position)
								}
								{
									position393 := position
								l394:
									{
										position395, tokenIndex395 := position, tokenIndex
										{
											position396 := position
											{
												position397 := position
												{
													position400, tokenIndex400 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l401
													}
													goto l400
												l401:
													position, tokenIndex = position400, tokenIndex400
													{
														position402, tokenIndex402 := position, tokenIndex
														{
															switch buffer[position] {
															case '\r':
																if buffer[position] != rune('\r') {
																	goto l402
																}
																position++
															case '\n':
																if buffer[position] != rune('\n') {
																	goto l402
																}
																position++
															case '\\':
																if buffer[position] != rune('\\') {
																	goto l402
																}
																position++
															default:
																if buffer[position] != rune('"') {
																	goto l402
																}
																position++
															}
														}

														goto l395
													l402:
														position, tokenIndex = position402, tokenIndex402
													}
													if !matchDot() {
														goto l395
													}
												}
											l400:
											l398:
												{
													position399, tokenIndex399 := position, tokenIndex
													{
														position404, tokenIndex404 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l405
														}
														goto l404
													l405:
														position, tokenIndex = position404, tokenIndex404
														{
															position406, tokenIndex406 := position, tokenIndex
															{
																switch buffer[position] {
																case '\r':
																	if buffer[position] != rune('\r') {
																		goto l406
																	}
																	position++
																case '\n':
																	if buffer[position] != rune('\n') {
																		goto l406
																	}
																	position++
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l406
																	}
																	position++
																default:
																	if buffer[position] != rune('"') {
																		goto l406
																	}
																	position++
																}
															}

															goto l399
														l406:
															position, tokenIndex = position406, tokenIndex406
														}
														if !matchDot() {
															goto l399
														}
													}
												l404:
													goto l398
												l399:
													position, tokenIndex = position399, tokenIndex399
												}
												add(rulePegText, position397)
											}
											{
												add(ruleAction82, position)
											}
											add(rulestrPart2, position396)
										}
										goto l394
									l395:
										position, tokenIndex = position395, tokenIndex395
									}
									add(rulePegText, position393)
								}
								if buffer[position] != rune('"') {
									goto l355
								}
								position++
								{
									add(ruleAction93, position)
								}
							case '\x1e':
								if buffer[position] != rune('\x1e') {
									goto l355
								}
								position++
								{
									add(ruleAction88, position)
								}
								{
									position411 := position
								l412:
									{
										position413, tokenIndex413 := position, tokenIndex
										{
											position414, tokenIndex414 := position, tokenIndex
											if buffer[position] != rune('{') {
												goto l415
											}
											position++
											if !_rules[rulesp]() {
												goto l415
											}
											if !_rules[rulee]() {
												goto l415
											}
											{
												add(ruleAction89, position)
											}
											if buffer[position] != rune('}') {
												goto l415
											}
											position++
											goto l414
										l415:
											position, tokenIndex = position414, tokenIndex414
											if buffer[position] != rune('{') {
												goto l417
											}
											position++
											if buffer[position] != rune('%') {
												goto l417
											}
											position++
											if !_rules[rulesp]() {
												goto l417
											}
											if !_rules[rulee]() {
												goto l417
											}
											{
												add(ruleAction90, position)
											}
											if buffer[position] != rune('%') {
												goto l417
											}
											position++
											if buffer[position] != rune('}') {
												goto l417
											}
											position++
											goto l414
										l417:
											position, tokenIndex = position414, tokenIndex414
											{
												position419 := position
												{
													position420 := position
													{
														position423, tokenIndex423 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l424
														}
														goto l423
													l424:
														position, tokenIndex = position423, tokenIndex423
														{
															position425, tokenIndex425 := position, tokenIndex
															{
																switch buffer[position] {
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l425
																	}
																	position++
																case '\x1e':
																	if buffer[position] != rune('\x1e') {
																		goto l425
																	}
																	position++
																default:
																	if buffer[position] != rune('{') {
																		goto l425
																	}
																	position++
																}
															}

															goto l413
														l425:
															position, tokenIndex = position425, tokenIndex425
														}
														if !matchDot() {
															goto l413
														}
													}
												l423:
												l421:
													{
														position422, tokenIndex422 := position, tokenIndex
														{
															position427, tokenIndex427 := position, tokenIndex
															if !_rules[ruleescape]() {
																goto l428
															}
															goto l427
														l428:
															position, tokenIndex = position427, tokenIndex427
															{
																position429, tokenIndex429 := position, tokenIndex
																{
																	switch buffer[position] {
																	case '\\':
																		if buffer[position] != rune('\\') {
																			goto l429
																		}
																		position++
																	case '\x1e':
																		if buffer[position] != rune('\x1e') {
																			goto l429
																		}
																		position++
																	default:
																		if buffer[position] != rune('{') {
																			goto l429
																		}
																		position++
																	}
																}

																goto l422
															l429:
																position, tokenIndex = position429, tokenIndex429
															}
															if !matchDot() {
																goto l422
															}
														}
													l427:
														goto l421
													l422:
														position, tokenIndex = position422, tokenIndex422
													}
													add(rulePegText, position420)
												}
												{
													add(ruleAction81, position)
												}
												add(rulestrPart1, position419)
											}
										}
									l414:
										goto l412
									l413:
										position, tokenIndex = position413, tokenIndex413
									}
									add(rulePegText, position411)
								}
								if buffer[position] != rune('\x1e') {
									goto l355
								}
								position++
								{
									add(ruleAction91, position)
								}
							default:
								if buffer[position] != rune('`') {
									goto l355
								}
								position++
								{
									add(ruleAction84, position)
								}
								{
									position434 := position
								l435:
									{
										position436, tokenIndex436 := position, tokenIndex
										{
											position437, tokenIndex437 := position, tokenIndex
											if buffer[position] != rune('{') {
												goto l438
											}
											position++
											if !_rules[rulesp]() {
												goto l438
											}
											if !_rules[rulee]() {
												goto l438
											}
											{
												add(ruleAction85, position)
											}
											if buffer[position] != rune('}') {
												goto l438
											}
											position++
											goto l437
										l438:
											position, tokenIndex = position437, tokenIndex437
											if buffer[position] != rune('{') {
												goto l440
											}
											position++
											if buffer[position] != rune('{') {
												goto l440
											}
											position++
											if !_rules[rulesp]() {
												goto l440
											}
											if !_rules[rulee]() {
												goto l440
											}
											{
												add(ruleAction86, position)
											}
											if buffer[position] != rune('}') {
												goto l440
											}
											position++
											if buffer[position] != rune('}') {
												goto l440
											}
											position++
											goto l437
										l440:
											position, tokenIndex = position437, tokenIndex437
											{
												position442 := position
												{
													position443 := position
													{
														position446, tokenIndex446 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l447
														}
														goto l446
													l447:
														position, tokenIndex = position446, tokenIndex446
														{
															position448, tokenIndex448 := position, tokenIndex
															{
																switch buffer[position] {
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l448
																	}
																	position++
																case '`':
																	if buffer[position] != rune('`') {
																		goto l448
																	}
																	position++
																default:
																	if buffer[position] != rune('{') {
																		goto l448
																	}
																	position++
																}
															}

															goto l436
														l448:
															position, tokenIndex = position448, tokenIndex448
														}
														if !matchDot() {
															goto l436
														}
													}
												l446:
												l444:
													{
														position445, tokenIndex445 := position, tokenIndex
														{
															position450, tokenIndex450 := position, tokenIndex
															if !_rules[ruleescape]() {
																goto l451
															}
															goto l450
														l451:
															position, tokenIndex = position450, tokenIndex450
															{
																position452, tokenIndex452 := position, tokenIndex
																{
																	switch buffer[position] {
																	case '\\':
																		if buffer[position] != rune('\\') {
																			goto l452
																		}
																		position++
																	case '`':
																		if buffer[position] != rune('`') {
																			goto l452
																		}
																		position++
																	default:
																		if buffer[position] != rune('{') {
																			goto l452
																		}
																		position++
																	}
																}

																goto l445
															l452:
																position, tokenIndex = position452, tokenIndex452
															}
															if !matchDot() {
																goto l445
															}
														}
													l450:
														goto l444
													l445:
														position, tokenIndex = position445, tokenIndex445
													}
													add(rulePegText, position443)
												}
												{
													add(ruleAction80, position)
												}
												add(rulestrPart, position442)
											}
										}
									l437:
										goto l435
									l436:
										position, tokenIndex = position436, tokenIndex436
									}
									add(rulePegText, position434)
								}
								if buffer[position] != rune('`') {
									goto l355
								}
								position++
								{
									add(ruleAction87, position)
								}
							}
						}

						if !_rules[rulesp]() {
							goto l355
						}
						add(rulefstring, position372)
					}
				}
			l357:
				add(rulevalue, position356)
			}
			return true
		l355:
			position, tokenIndex = position355, tokenIndex355
			return false
		},
		/* 31 number <- <(<[0-9]+> sp Action79)> */
		func() bool {
			position456, tokenIndex456 := position, tokenIndex
			{
				position457 := position
				{
					position458 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l456
					}
					position++
				l459:
					{
						position460, tokenIndex460 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l460
						}
						position++
						goto l459
					l460:
						position, tokenIndex = position460, tokenIndex460
					}
					add(rulePegText, position458)
				}
				if !_rules[rulesp]() {
					goto l456
				}
				{
					add(ruleAction79, position)
				}
				add(rulenumber, position457)
			}
			return true
		l456:
			position, tokenIndex = position456, tokenIndex456
			return false
		},
		/* 32 identifier <- <(<(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) . (!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .)*)> sp)> */
		func() bool {
			position462, tokenIndex462 := position, tokenIndex
			{
				position463 := position
				{
					position464 := position
					{
						position465, tokenIndex465 := position, tokenIndex
						{
							switch buffer[position] {
							case '\x1e':
								if buffer[position] != rune('\x1e') {
									goto l465
								}
								position++
							case '\r':
								if buffer[position] != rune('\r') {
									goto l465
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l465
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l465
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l465
								}
								position++
							case '~':
								if buffer[position] != rune('~') {
									goto l465
								}
								position++
							case '}':
								if buffer[position] != rune('}') {
									goto l465
								}
								position++
							case '|':
								if buffer[position] != rune('|') {
									goto l465
								}
								position++
							case '{':
								if buffer[position] != rune('{') {
									goto l465
								}
								position++
							case '`':
								if buffer[position] != rune('`') {
									goto l465
								}
								position++
							case '^':
								if buffer[position] != rune('^') {
									goto l465
								}
								position++
							case ']':
								if buffer[position] != rune(']') {
									goto l465
								}
								position++
							case '\\':
								if buffer[position] != rune('\\') {
									goto l465
								}
								position++
							case '[':
								if buffer[position] != rune('[') {
									goto l465
								}
								position++
							case '@':
								if buffer[position] != rune('@') {
									goto l465
								}
								position++
							case '?':
								if buffer[position] != rune('?') {
									goto l465
								}
								position++
							case '>':
								if buffer[position] != rune('>') {
									goto l465
								}
								position++
							case '=':
								if buffer[position] != rune('=') {
									goto l465
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l465
								}
								position++
							case ';':
								if buffer[position] != rune(';') {
									goto l465
								}
								position++
							case ':':
								if buffer[position] != rune(':') {
									goto l465
								}
								position++
							case '/':
								if buffer[position] != rune('/') {
									goto l465
								}
								position++
							case '+':
								if buffer[position] != rune('+') {
									goto l465
								}
								position++
							case '*':
								if buffer[position] != rune('*') {
									goto l465
								}
								position++
							case ')':
								if buffer[position] != rune(')') {
									goto l465
								}
								position++
							case '(':
								if buffer[position] != rune('(') {
									goto l465
								}
								position++
							case '\'':
								if buffer[position] != rune('\'') {
									goto l465
								}
								position++
							case '&':
								if buffer[position] != rune('&') {
									goto l465
								}
								position++
							case '%':
								if buffer[position] != rune('%') {
									goto l465
								}
								position++
							case '#':
								if buffer[position] != rune('#') {
									goto l465
								}
								position++
							case '"':
								if buffer[position] != rune('"') {
									goto l465
								}
								position++
							case '!':
								if buffer[position] != rune('!') {
									goto l465
								}
								position++
							case ',', '-', '.':
								if c := buffer[position]; c < rune(',') || c > rune('.') {
									goto l465
								}
								position++
							default:
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l465
								}
								position++
							}
						}

						goto l462
					l465:
						position, tokenIndex = position465, tokenIndex465
					}
					if !matchDot() {
						goto l462
					}
				l467:
					{
						position468, tokenIndex468 := position, tokenIndex
						{
							position469, tokenIndex469 := position, tokenIndex
							{
								switch buffer[position] {
								case '\x1e':
									if buffer[position] != rune('\x1e') {
										goto l469
									}
									position++
								case '\r':
									if buffer[position] != rune('\r') {
										goto l469
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l469
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l469
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l469
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l469
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l469
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l469
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l469
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l469
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l469
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l469
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l469
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l469
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l469
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l469
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l469
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l469
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l469
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l469
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l469
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l469
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l469
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l469
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l469
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l469
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l469
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l469
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l469
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l469
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l469
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l469
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l469
									}
									position++
								}
							}

							goto l468
						l469:
							position, tokenIndex = position469, tokenIndex469
						}
						if !matchDot() {
							goto l468
						}
						goto l467
					l468:
						position, tokenIndex = position468, tokenIndex468
					}
					add(rulePegText, position464)
				}
				if !_rules[rulesp]() {
					goto l462
				}
				add(ruleidentifier, position463)
			}
			return true
		l462:
			position, tokenIndex = position462, tokenIndex462
			return false
		},
		/* 33 sub <- <(open e0 close)> */
		nil,
		/* 34 add <- <(('+' / '＋') sp)> */
		func() bool {
			position472, tokenIndex472 := position, tokenIndex
			{
				position473 := position
				{
					position474, tokenIndex474 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l475
					}
					position++
					goto l474
				l475:
					position, tokenIndex = position474, tokenIndex474
					if buffer[position] != rune('＋') {
						goto l472
					}
					position++
				}
			l474:
				if !_rules[rulesp]() {
					goto l472
				}
				add(ruleadd, position473)
			}
			return true
		l472:
			position, tokenIndex = position472, tokenIndex472
			return false
		},
		/* 35 minus <- <(('-' / '－') sp)> */
		func() bool {
			position476, tokenIndex476 := position, tokenIndex
			{
				position477 := position
				{
					position478, tokenIndex478 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l479
					}
					position++
					goto l478
				l479:
					position, tokenIndex = position478, tokenIndex478
					if buffer[position] != rune('－') {
						goto l476
					}
					position++
				}
			l478:
				if !_rules[rulesp]() {
					goto l476
				}
				add(ruleminus, position477)
			}
			return true
		l476:
			position, tokenIndex = position476, tokenIndex476
			return false
		},
		/* 36 multiply <- <(('*' / '＊') sp)> */
		nil,
		/* 37 divide <- <(('/' / '／') sp)> */
		nil,
		/* 38 modulus <- <('%' sp)> */
		nil,
		/* 39 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 40 open <- <('(' sp)> */
		nil,
		/* 41 close <- <(')' sp)> */
		nil,
		/* 42 bitwiseOr <- <('|' sp)> */
		nil,
		/* 43 logicOr <- <('|' '|' sp)> */
		nil,
		/* 44 bitwiseAnd <- <(('&' / ('&' 'a' 'm' 'p' ';')) sp)> */
		nil,
		/* 45 logicAnd <- <((('&' '&') / ('&' 'a' 'm' 'p' ';' '&' 'a' 'm' 'p' ';')) sp)> */
		nil,
		/* 46 sp <- <((&('/') ('/' '/' (!'\n' .)*)) | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position491 := position
			l492:
				{
					position493, tokenIndex493 := position, tokenIndex
					{
						switch buffer[position] {
						case '/':
							if buffer[position] != rune('/') {
								goto l493
							}
							position++
							if buffer[position] != rune('/') {
								goto l493
							}
							position++
						l495:
							{
								position496, tokenIndex496 := position, tokenIndex
								{
									position497, tokenIndex497 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l497
									}
									position++
									goto l496
								l497:
									position, tokenIndex = position497, tokenIndex497
								}
								if !matchDot() {
									goto l496
								}
								goto l495
							l496:
								position, tokenIndex = position496, tokenIndex496
							}
						case '\r':
							if buffer[position] != rune('\r') {
								goto l493
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l493
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l493
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l493
							}
							position++
						}
					}

					goto l492
				l493:
					position, tokenIndex = position493, tokenIndex493
				}
				add(rulesp, position491)
			}
			return true
		},
		/* 47 lt <- <(('<' / '＜') sp)> */
		nil,
		/* 48 gt <- <(('>' / '＞') sp)> */
		nil,
		/* 49 le <- <((('<' '=') / ('＜' '＝')) sp)> */
		nil,
		/* 50 ge <- <((('>' '=') / ('＞' '＝')) sp)> */
		nil,
		/* 51 eq <- <((('=' '=') / ('＝' '＝')) sp)> */
		nil,
		/* 52 ne <- <((('!' '=') / ('！' '＝')) sp)> */
		nil,
		/* 53 strPart <- <(<(escape / (!((&('\\') '\\') | (&('`') '`') | (&('{') '{')) .))+> Action80)> */
		nil,
		/* 54 strPart1 <- <(<(escape / (!((&('\\') '\\') | (&('\x1e') '\x1e') | (&('{') '{')) .))+> Action81)> */
		nil,
		/* 55 strPart2 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('"') '"')) .))+> Action82)> */
		nil,
		/* 56 strPart3 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('\'') '\'')) .))+> Action83)> */
		nil,
		/* 57 fstring <- <(((&('\'') ('\'' Action94 <strPart3*> '\'' Action95)) | (&('"') ('"' Action92 <strPart2*> '"' Action93)) | (&('\x1e') ('\x1e' Action88 <(('{' sp e Action89 '}') / ('{' '%' sp e Action90 ('%' '}')) / strPart1)*> '\x1e' Action91)) | (&('`') ('`' Action84 <(('{' sp e Action85 '}') / ('{' '{' sp e Action86 ('}' '}')) / strPart)*> '`' Action87))) sp)> */
		nil,
		/* 58 escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		func() bool {
			position509, tokenIndex509 := position, tokenIndex
			{
				position510 := position
				if buffer[position] != rune('\\') {
					goto l509
				}
				position++
				{
					switch buffer[position] {
					case '\\':
						if buffer[position] != rune('\\') {
							goto l509
						}
						position++
					case '\'':
						if buffer[position] != rune('\'') {
							goto l509
						}
						position++
					case '"':
						if buffer[position] != rune('"') {
							goto l509
						}
						position++
					case 'r':
						if buffer[position] != rune('r') {
							goto l509
						}
						position++
					case 'f':
						if buffer[position] != rune('f') {
							goto l509
						}
						position++
					case 'n':
						if buffer[position] != rune('n') {
							goto l509
						}
						position++
					case 't':
						if buffer[position] != rune('t') {
							goto l509
						}
						position++
					default:
						if buffer[position] != rune('b') {
							goto l509
						}
						position++
					}
				}

				add(ruleescape, position510)
			}
			return true
		l509:
			position, tokenIndex = position509, tokenIndex509
			return false
		},
		/* 59 st_expr <- <(st_modify_multi_1 / st_assign_multi / st_modify_multi_2)> */
		nil,
		/* 60 est <- <((&'(' e0) / (!{p.flags.DisableBitwiseOp = true} e0 !{p.flags.DisableBitwiseOp = false}))> */
		func() bool {
			position513, tokenIndex513 := position, tokenIndex
			{
				position514 := position
				{
					position515, tokenIndex515 := position, tokenIndex
					{
						position517, tokenIndex517 := position, tokenIndex
						if buffer[position] != rune('(') {
							goto l516
						}
						position++
						position, tokenIndex = position517, tokenIndex517
					}
					if !_rules[rulee0]() {
						goto l516
					}
					goto l515
				l516:
					position, tokenIndex = position515, tokenIndex515
					p.flags.DisableBitwiseOp = true
					if !_rules[rulee0]() {
						goto l513
					}
					p.flags.DisableBitwiseOp = false
				}
			l515:
				add(ruleest, position514)
			}
			return true
		l513:
			position, tokenIndex = position513, tokenIndex513
			return false
		},
		/* 61 st_assign_multi <- <(st_assign sp ','? sp)+> */
		nil,
		/* 62 st_assign <- <((st_name2 sp (':' / '=') sp est Action96) / (st_name1 est Action97) / ('&' st_name2 sp (':' / '=') sp Action98 <est> Action99))> */
		nil,
		/* 63 st_modify_multi_1 <- <(((st_name2 st_modify_rest1) / (st_name1 st_modify_rest)) sp ','? sp st_modify_multi_rest)> */
		nil,
		/* 64 st_modify_rest1 <- <(sp (('+' '=' sp <e0> Action100) / ('-' '=' sp <e0> Action101)))> */
		nil,
		/* 65 st_modify_multi_2 <- <(st_modify2 sp ','? sp st_modify_multi_rest)> */
		nil,
		/* 66 st_modify_multi_rest <- <(st_modify2 sp ','? sp)*> */
		func() bool {
			{
				position524 := position
			l525:
				{
					position526, tokenIndex526 := position, tokenIndex
					if !_rules[rulest_modify2]() {
						goto l526
					}
					if !_rules[rulesp]() {
						goto l526
					}
					{
						position527, tokenIndex527 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l527
						}
						position++
						goto l528
					l527:
						position, tokenIndex = position527, tokenIndex527
					}
				l528:
					if !_rules[rulesp]() {
						goto l526
					}
					goto l525
				l526:
					position, tokenIndex = position526, tokenIndex526
				}
				add(rulest_modify_multi_rest, position524)
			}
			return true
		},
		/* 67 st_modify2 <- <(st_name2 st_modify_rest)> */
		func() bool {
			position529, tokenIndex529 := position, tokenIndex
			{
				position530 := position
				if !_rules[rulest_name2]() {
					goto l529
				}
				if !_rules[rulest_modify_rest]() {
					goto l529
				}
				add(rulest_modify2, position530)
			}
			return true
		l529:
			position, tokenIndex = position529, tokenIndex529
			return false
		},
		/* 68 st_modify_rest <- <(sp (('+' '='? sp <e0> Action102) / (&'-' sp <e0> Action103) / ('-' '='? sp <e0> Action104)))> */
		func() bool {
			position531, tokenIndex531 := position, tokenIndex
			{
				position532 := position
				if !_rules[rulesp]() {
					goto l531
				}
				{
					position533, tokenIndex533 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l534
					}
					position++
					{
						position535, tokenIndex535 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l535
						}
						position++
						goto l536
					l535:
						position, tokenIndex = position535, tokenIndex535
					}
				l536:
					if !_rules[rulesp]() {
						goto l534
					}
					{
						position537 := position
						if !_rules[rulee0]() {
							goto l534
						}
						add(rulePegText, position537)
					}
					{
						add(ruleAction102, position)
					}
					goto l533
				l534:
					position, tokenIndex = position533, tokenIndex533
					{
						position540, tokenIndex540 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l539
						}
						position++
						position, tokenIndex = position540, tokenIndex540
					}
					if !_rules[rulesp]() {
						goto l539
					}
					{
						position541 := position
						if !_rules[rulee0]() {
							goto l539
						}
						add(rulePegText, position541)
					}
					{
						add(ruleAction103, position)
					}
					goto l533
				l539:
					position, tokenIndex = position533, tokenIndex533
					if buffer[position] != rune('-') {
						goto l531
					}
					position++
					{
						position543, tokenIndex543 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l543
						}
						position++
						goto l544
					l543:
						position, tokenIndex = position543, tokenIndex543
					}
				l544:
					if !_rules[rulesp]() {
						goto l531
					}
					{
						position545 := position
						if !_rules[rulee0]() {
							goto l531
						}
						add(rulePegText, position545)
					}
					{
						add(ruleAction104, position)
					}
				}
			l533:
				add(rulest_modify_rest, position532)
			}
			return true
		l531:
			position, tokenIndex = position531, tokenIndex531
			return false
		},
		/* 69 st_name1 <- <(<(id_ch0+ (':' id_ch0+)?)> Action105)> */
		func() bool {
			position547, tokenIndex547 := position, tokenIndex
			{
				position548 := position
				{
					position549 := position
					if !_rules[ruleid_ch0]() {
						goto l547
					}
				l550:
					{
						position551, tokenIndex551 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l551
						}
						goto l550
					l551:
						position, tokenIndex = position551, tokenIndex551
					}
					{
						position552, tokenIndex552 := position, tokenIndex
						if buffer[position] != rune(':') {
							goto l552
						}
						position++
						if !_rules[ruleid_ch0]() {
							goto l552
						}
					l554:
						{
							position555, tokenIndex555 := position, tokenIndex
							if !_rules[ruleid_ch0]() {
								goto l555
							}
							goto l554
						l555:
							position, tokenIndex = position555, tokenIndex555
						}
						goto l553
					l552:
						position, tokenIndex = position552, tokenIndex552
					}
				l553:
					add(rulePegText, position549)
				}
				{
					add(ruleAction105, position)
				}
				add(rulest_name1, position548)
			}
			return true
		l547:
			position, tokenIndex = position547, tokenIndex547
			return false
		},
		/* 70 st_name2 <- <(<(id_ch0 id_ch* (':' id_ch+)?)> Action106)> */
		func() bool {
			position557, tokenIndex557 := position, tokenIndex
			{
				position558 := position
				{
					position559 := position
					if !_rules[ruleid_ch0]() {
						goto l557
					}
				l560:
					{
						position561, tokenIndex561 := position, tokenIndex
						if !_rules[ruleid_ch]() {
							goto l561
						}
						goto l560
					l561:
						position, tokenIndex = position561, tokenIndex561
					}
					{
						position562, tokenIndex562 := position, tokenIndex
						if buffer[position] != rune(':') {
							goto l562
						}
						position++
						if !_rules[ruleid_ch]() {
							goto l562
						}
					l564:
						{
							position565, tokenIndex565 := position, tokenIndex
							if !_rules[ruleid_ch]() {
								goto l565
							}
							goto l564
						l565:
							position, tokenIndex = position565, tokenIndex565
						}
						goto l563
					l562:
						position, tokenIndex = position562, tokenIndex562
					}
				l563:
					add(rulePegText, position559)
				}
				{
					add(ruleAction106, position)
				}
				add(rulest_name2, position558)
			}
			return true
		l557:
			position, tokenIndex = position557, tokenIndex557
			return false
		},
		/* 71 id_ch0 <- <(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) .)> */
		func() bool {
			position567, tokenIndex567 := position, tokenIndex
			{
				position568 := position
				{
					position569, tokenIndex569 := position, tokenIndex
					{
						switch buffer[position] {
						case '\x1e':
							if buffer[position] != rune('\x1e') {
								goto l569
							}
							position++
						case '\r':
							if buffer[position] != rune('\r') {
								goto l569
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l569
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l569
							}
							position++
						case ' ':
							if buffer[position] != rune(' ') {
								goto l569
							}
							position++
						case '~':
							if buffer[position] != rune('~') {
								goto l569
							}
							position++
						case '}':
							if buffer[position] != rune('}') {
								goto l569
							}
							position++
						case '|':
							if buffer[position] != rune('|') {
								goto l569
							}
							position++
						case '{':
							if buffer[position] != rune('{') {
								goto l569
							}
							position++
						case '`':
							if buffer[position] != rune('`') {
								goto l569
							}
							position++
						case '^':
							if buffer[position] != rune('^') {
								goto l569
							}
							position++
						case ']':
							if buffer[position] != rune(']') {
								goto l569
							}
							position++
						case '\\':
							if buffer[position] != rune('\\') {
								goto l569
							}
							position++
						case '[':
							if buffer[position] != rune('[') {
								goto l569
							}
							position++
						case '@':
							if buffer[position] != rune('@') {
								goto l569
							}
							position++
						case '?':
							if buffer[position] != rune('?') {
								goto l569
							}
							position++
						case '>':
							if buffer[position] != rune('>') {
								goto l569
							}
							position++
						case '=':
							if buffer[position] != rune('=') {
								goto l569
							}
							position++
						case '<':
							if buffer[position] != rune('<') {
								goto l569
							}
							position++
						case ';':
							if buffer[position] != rune(';') {
								goto l569
							}
							position++
						case ':':
							if buffer[position] != rune(':') {
								goto l569
							}
							position++
						case '/':
							if buffer[position] != rune('/') {
								goto l569
							}
							position++
						case '+':
							if buffer[position] != rune('+') {
								goto l569
							}
							position++
						case '*':
							if buffer[position] != rune('*') {
								goto l569
							}
							position++
						case ')':
							if buffer[position] != rune(')') {
								goto l569
							}
							position++
						case '(':
							if buffer[position] != rune('(') {
								goto l569
							}
							position++
						case '\'':
							if buffer[position] != rune('\'') {
								goto l569
							}
							position++
						case '&':
							if buffer[position] != rune('&') {
								goto l569
							}
							position++
						case '%':
							if buffer[position] != rune('%') {
								goto l569
							}
							position++
						case '$':
							if buffer[position] != rune('$') {
								goto l569
							}
							position++
						case '#':
							if buffer[position] != rune('#') {
								goto l569
							}
							position++
						case '"':
							if buffer[position] != rune('"') {
								goto l569
							}
							position++
						case '!':
							if buffer[position] != rune('!') {
								goto l569
							}
							position++
						case ',', '-', '.':
							if c := buffer[position]; c < rune(',') || c > rune('.') {
								goto l569
							}
							position++
						default:
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l569
							}
							position++
						}
					}

					goto l567
				l569:
					position, tokenIndex = position569, tokenIndex569
				}
				if !matchDot() {
					goto l567
				}
				add(ruleid_ch0, position568)
			}
			return true
		l567:
			position, tokenIndex = position567, tokenIndex567
			return false
		},
		/* 72 id_ch <- <(id_ch0 / [0-9])> */
		func() bool {
			position571, tokenIndex571 := position, tokenIndex
			{
				position572 := position
				{
					position573, tokenIndex573 := position, tokenIndex
					if !_rules[ruleid_ch0]() {
						goto l574
					}
					goto l573
				l574:
					position, tokenIndex = position573, tokenIndex573
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l571
					}
					position++
				}
			l573:
				add(ruleid_ch, position572)
			}
			return true
		l571:
			position, tokenIndex = position571, tokenIndex571
			return false
		},
		/* 74 Action0 <- <{ p.AddOperator(TypeHalt) }> */
		nil,
		/* 75 Action1 <- <{ p.AddOperator(TypeClearDetail) }> */
		nil,
		/* 76 Action2 <- <{ p.AddValueStr(string(text)) }> */
		nil,
		/* 77 Action3 <- <{ p.AddStore() }> */
		nil,
		/* 78 Action4 <- <{p.AddOperator(TypePop)}> */
		nil,
		/* 79 Action5 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 80 Action6 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset(); }> */
		nil,
		/* 81 Action7 <- <{ p.PopAndSetOffset() }> */
		nil,
		/* 82 Action8 <- <{ p.AddValueStr(""); }> */
		nil,
		/* 83 Action9 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 84 Action10 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset(); }> */
		nil,
		/* 85 Action11 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 86 Action12 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset() }> */
		nil,
		/* 87 Action13 <- <{ p.PopAndSetOffset() }> */
		nil,
		/* 88 Action14 <- <{ p.CounterPush() }> */
		nil,
		/* 89 Action15 <- <{p.CounterAdd(1)}> */
		nil,
		/* 90 Action16 <- <{ p.AddValueStr(""); limit:=p.CounterPop()+1; for i:=int64(0); i<limit; i++ { p.PopAndSetOffset() } }> */
		nil,
		/* 91 Action17 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 92 Action18 <- <{ p.AddOperator(TypeBitwiseOr) }> */
		nil,
		/* 93 Action19 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 94 Action20 <- <{ p.AddOperator(TypeBitwiseAnd) }> */
		nil,
		/* 95 Action21 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 96 Action22 <- <{ p.AddOperator(TypeCompLT) }> */
		nil,
		/* 97 Action23 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 98 Action24 <- <{ p.AddOperator(TypeCompLE) }> */
		nil,
		/* 99 Action25 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 100 Action26 <- <{ p.AddOperator(TypeCompEQ) }> */
		nil,
		/* 101 Action27 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 102 Action28 <- <{ p.AddOperator(TypeCompNE) }> */
		nil,
		/* 103 Action29 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 104 Action30 <- <{ p.AddOperator(TypeCompGE) }> */
		nil,
		/* 105 Action31 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 106 Action32 <- <{ p.AddOperator(TypeCompGT) }> */
		nil,
		/* 107 Action33 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 108 Action34 <- <{ p.AddOperator(TypeAdd) }> */
		nil,
		/* 109 Action35 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 110 Action36 <- <{ p.AddOperator(TypeSubtract) }> */
		nil,
		/* 111 Action37 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 112 Action38 <- <{ p.AddOperator(TypeMultiply) }> */
		nil,
		/* 113 Action39 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 114 Action40 <- <{ p.AddOperator(TypeDivide) }> */
		nil,
		/* 115 Action41 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 116 Action42 <- <{ p.AddOperator(TypeModulus) }> */
		nil,
		/* 117 Action43 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 118 Action44 <- <{ p.AddOperator(TypeExponentiation) }> */
		nil,
		/* 119 Action45 <- <{ p.AddOperator(TypeNegation) }> */
		nil,
		/* 120 Action46 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetK)}> */
		nil,
		/* 121 Action47 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetQ)}> */
		nil,
		/* 122 Action48 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 123 Action49 <- <{ p.AddOperator(TypeDiceSetQ) }> */
		nil,
		/* 124 Action50 <- <{ p.AddOperatorWithInt64(TypeDiceSetK, 1) }> */
		nil,
		/* 125 Action51 <- <{ p.AddOperatorWithInt64(TypeDiceSetQ, 1) }> */
		nil,
		/* 126 Action52 <- <{ p.AddOperator(TypeWodSetInit) }> */
		nil,
		/* 127 Action53 <- <{ p.AddOperator(TypeWodSetPool) }> */
		nil,
		/* 128 Action54 <- <{ p.AddOperator(TypeDCSetInit) }> */
		nil,
		/* 129 Action55 <- <{ p.AddOperator(TypeDCSetPool) }> */
		nil,
		/* 130 Action56 <- <{ p.AddValue("2"); p.AddLeftValueMark() }> */
		nil,
		/* 131 Action57 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 132 Action58 <- <{ p.AddValue("1"); p.AddLeftValueMark() }> */
		nil,
		/* 133 Action59 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 134 Action60 <- <{ p.AddValue("2"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 135 Action61 <- <{ p.AddValue("1"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 136 Action62 <- <{ p.AddOperator(TypeWodSetPoints) }> */
		nil,
		/* 137 Action63 <- <{ p.AddOperator(TypeWodSetThreshold) }> */
		nil,
		/* 138 Action64 <- <{ p.AddOperator(TypeWodSetThresholdQ) }> */
		nil,
		/* 139 Action65 <- <{ p.AddOperator(TypeDiceWod) }> */
		nil,
		/* 140 Action66 <- <{ p.AddOperator(TypeDCSetPoints) }> */
		nil,
		/* 141 Action67 <- <{ p.AddOperator(TypeDiceDC) }> */
		nil,
		/* 142 Action68 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 143 Action69 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 144 Action70 <- <{ p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 145 Action71 <- <{ p.AddValue("1"); p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 146 Action72 <- <{ p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 147 Action73 <- <{ p.AddValue("1"); p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 148 Action74 <- <{ p.AddValue("0"); p.AddValue("0"); p.AddOperator(TypeDiceFate) }> */
		nil,
		/* 149 Action75 <- <{ p.AddLoadVarnameForThis(text) }> */
		nil,
		/* 150 Action76 <- <{ p.WriteCode(TypeConvertInt, 0, "") }> */
		nil,
		/* 151 Action77 <- <{ p.WriteCode(TypeConvertStr, 0, "") }> */
		nil,
		/* 152 Action78 <- <{ p.AddLoadVarname(string(text)) }> */
		nil,
		nil,
		/* 154 Action79 <- <{ p.AddValue(string(text)) }> */
		nil,
		/* 155 Action80 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 156 Action81 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 157 Action82 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 158 Action83 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 159 Action84 <- <{ p.CounterPush() }> */
		nil,
		/* 160 Action85 <- <{p.CounterAdd(1)}> */
		nil,
		/* 161 Action86 <- <{p.CounterAdd(1)}> */
		nil,
		/* 162 Action87 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 163 Action88 <- <{ p.CounterPush() }> */
		nil,
		/* 164 Action89 <- <{p.CounterAdd(1)}> */
		nil,
		/* 165 Action90 <- <{p.CounterAdd(1)}> */
		nil,
		/* 166 Action91 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 167 Action92 <- <{ p.CounterPush() }> */
		nil,
		/* 168 Action93 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 169 Action94 <- <{ p.CounterPush() }> */
		nil,
		/* 170 Action95 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 171 Action96 <- <{ p.AddStName() }> */
		nil,
		/* 172 Action97 <- <{ p.AddStName() }> */
		nil,
		/* 173 Action98 <- <{ p.CodePush() }> */
		nil,
		/* 174 Action99 <- <{ p.CodePop(); p.AddStoreComputed(text); p.AddStName() }> */
		nil,
		/* 175 Action100 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 176 Action101 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 177 Action102 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 178 Action103 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 179 Action104 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 180 Action105 <- <{ p.AddValueStr(text) }> */
		nil,
		/* 181 Action106 <- <{ p.AddValueStr(text) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
