package dice

// Code generated by peg -switch -inline dice/roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleeBase
	rulee
	ruleeOne
	ruleassign_expr
	rules0
	ruleblock
	rulestmtElse
	rulestmtIf
	rulee0
	ruleeSimpleSwitch
	ruleeTernary
	ruleeBitwise
	ruleeBitwise1
	ruleeComp
	rulee1
	rulee2
	rulee3
	rulee4
	rulee5
	ruledndDiceSuffix
	rulekqDiceOp
	rule_dnumber
	rulesimpleDice2
	rulewodDicePool
	ruledoubleCrossDicePool
	ruleeDice
	rulelaNumberOrLeftParen
	ruleeDice2
	ruleeDice3
	ruleeDice4
	rulevalue
	rulenumber
	ruleidentifier
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulebitwiseOr
	rulelogicOr
	rulebitwiseAnd
	rulelogicAnd
	rulesp
	rulelt
	rulegt
	rulele
	rulege
	ruleeq
	rulene
	rulestrPart
	rulestrPart1
	rulestrPart2
	rulestrPart3
	rulefstring
	ruleescape
	rulest_expr
	ruleest
	rulest_assign_multi
	rulest_assign
	rulest_modify_multi_1
	rulest_modify_rest1
	rulest_modify_multi_2
	rulest_modify_multi_rest
	rulest_modify2
	rulest_modify_rest
	rulest_name1
	rulest_name1r
	rulest_name2
	rulest_name2r
	ruleid_ch0
	ruleid_ch
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
	ruleAction49
	ruleAction50
	ruleAction51
	ruleAction52
	ruleAction53
	ruleAction54
	ruleAction55
	ruleAction56
	ruleAction57
	ruleAction58
	ruleAction59
	ruleAction60
	ruleAction61
	ruleAction62
	ruleAction63
	ruleAction64
	ruleAction65
	ruleAction66
	ruleAction67
	ruleAction68
	ruleAction69
	ruleAction70
	ruleAction71
	ruleAction72
	ruleAction73
	ruleAction74
	ruleAction75
	ruleAction76
	ruleAction77
	ruleAction78
	rulePegText
	ruleAction79
	ruleAction80
	ruleAction81
	ruleAction82
	ruleAction83
	ruleAction84
	ruleAction85
	ruleAction86
	ruleAction87
	ruleAction88
	ruleAction89
	ruleAction90
	ruleAction91
	ruleAction92
	ruleAction93
	ruleAction94
	ruleAction95
	ruleAction96
	ruleAction97
	ruleAction98
	ruleAction99
	ruleAction100
	ruleAction101
	ruleAction102
	ruleAction103
	ruleAction104
	ruleAction105
	ruleAction106
	ruleAction107
	ruleAction108
	ruleAction109
	ruleAction110
	ruleAction111
	ruleAction112
)

var rul3s = [...]string{
	"Unknown",
	"eBase",
	"e",
	"eOne",
	"assign_expr",
	"s0",
	"block",
	"stmtElse",
	"stmtIf",
	"e0",
	"eSimpleSwitch",
	"eTernary",
	"eBitwise",
	"eBitwise1",
	"eComp",
	"e1",
	"e2",
	"e3",
	"e4",
	"e5",
	"dndDiceSuffix",
	"kqDiceOp",
	"_dnumber",
	"simpleDice2",
	"wodDicePool",
	"doubleCrossDicePool",
	"eDice",
	"laNumberOrLeftParen",
	"eDice2",
	"eDice3",
	"eDice4",
	"value",
	"number",
	"identifier",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"bitwiseOr",
	"logicOr",
	"bitwiseAnd",
	"logicAnd",
	"sp",
	"lt",
	"gt",
	"le",
	"ge",
	"eq",
	"ne",
	"strPart",
	"strPart1",
	"strPart2",
	"strPart3",
	"fstring",
	"escape",
	"st_expr",
	"est",
	"st_assign_multi",
	"st_assign",
	"st_modify_multi_1",
	"st_modify_rest1",
	"st_modify_multi_2",
	"st_modify_multi_rest",
	"st_modify2",
	"st_modify_rest",
	"st_name1",
	"st_name1r",
	"st_name2",
	"st_name2r",
	"id_ch0",
	"id_ch",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
	"Action49",
	"Action50",
	"Action51",
	"Action52",
	"Action53",
	"Action54",
	"Action55",
	"Action56",
	"Action57",
	"Action58",
	"Action59",
	"Action60",
	"Action61",
	"Action62",
	"Action63",
	"Action64",
	"Action65",
	"Action66",
	"Action67",
	"Action68",
	"Action69",
	"Action70",
	"Action71",
	"Action72",
	"Action73",
	"Action74",
	"Action75",
	"Action76",
	"Action77",
	"Action78",
	"PegText",
	"Action79",
	"Action80",
	"Action81",
	"Action82",
	"Action83",
	"Action84",
	"Action85",
	"Action86",
	"Action87",
	"Action88",
	"Action89",
	"Action90",
	"Action91",
	"Action92",
	"Action93",
	"Action94",
	"Action95",
	"Action96",
	"Action97",
	"Action98",
	"Action99",
	"Action100",
	"Action101",
	"Action102",
	"Action103",
	"Action104",
	"Action105",
	"Action106",
	"Action107",
	"Action108",
	"Action109",
	"Action110",
	"Action111",
	"Action112",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type DiceRollParser struct {
	RollExpression

	Buffer string
	buffer []rune
	rules  [190]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *DiceRollParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *DiceRollParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *DiceRollParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *DiceRollParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *DiceRollParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *DiceRollParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *DiceRollParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeHalt)
		case ruleAction1:
			p.AddOperator(TypeClearDetail)
		case ruleAction2:
			p.AddValueStr(string(text))
		case ruleAction3:
			p.AddStore()
		case ruleAction4:
			p.AddOperator(TypePop)
		case ruleAction5:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction6:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction7:
			p.PopAndSetOffset()
		case ruleAction8:
			p.AddValueStr("")
		case ruleAction9:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction10:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction11:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction12:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction13:
			p.PopAndSetOffset()
		case ruleAction14:
			p.CounterPush()
		case ruleAction15:
			p.CounterAdd(1)
		case ruleAction16:
			p.AddValueStr("")
			limit := p.CounterPop() + 1
			for i := int64(0); i < limit; i++ {
				p.PopAndSetOffset()
			}
		case ruleAction17:
			p.AddLeftValueMark()
		case ruleAction18:
			p.AddOperator(TypeBitwiseOr)
		case ruleAction19:
			p.AddLeftValueMark()
		case ruleAction20:
			p.AddOperator(TypeBitwiseAnd)
		case ruleAction21:
			p.AddLeftValueMark()
		case ruleAction22:
			p.AddOperator(TypeCompLT)
		case ruleAction23:
			p.AddLeftValueMark()
		case ruleAction24:
			p.AddOperator(TypeCompLE)
		case ruleAction25:
			p.AddLeftValueMark()
		case ruleAction26:
			p.AddOperator(TypeCompEQ)
		case ruleAction27:
			p.AddLeftValueMark()
		case ruleAction28:
			p.AddOperator(TypeCompNE)
		case ruleAction29:
			p.AddLeftValueMark()
		case ruleAction30:
			p.AddOperator(TypeCompGE)
		case ruleAction31:
			p.AddLeftValueMark()
		case ruleAction32:
			p.AddOperator(TypeCompGT)
		case ruleAction33:
			p.AddLeftValueMark()
		case ruleAction34:
			p.AddOperator(TypeAdd)
		case ruleAction35:
			p.AddLeftValueMark()
		case ruleAction36:
			p.AddOperator(TypeSubtract)
		case ruleAction37:
			p.AddLeftValueMark()
		case ruleAction38:
			p.AddOperator(TypeMultiply)
		case ruleAction39:
			p.AddLeftValueMark()
		case ruleAction40:
			p.AddOperator(TypeDivide)
		case ruleAction41:
			p.AddLeftValueMark()
		case ruleAction42:
			p.AddOperator(TypeModulus)
		case ruleAction43:
			p.AddLeftValueMark()
		case ruleAction44:
			p.AddOperator(TypeExponentiation)
		case ruleAction45:
			p.AddOperator(TypeNegation)
		case ruleAction46:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetK)
		case ruleAction47:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetQ)
		case ruleAction48:
			p.AddOperator(TypeDiceSetK)
		case ruleAction49:
			p.AddOperator(TypeDiceSetQ)
		case ruleAction50:
			p.AddOperatorWithInt64(TypeDiceSetK, 1)
		case ruleAction51:
			p.AddOperatorWithInt64(TypeDiceSetQ, 1)
		case ruleAction52:
			p.AddOperator(TypeWodSetInit)
		case ruleAction53:
			p.AddOperator(TypeWodSetPool)
		case ruleAction54:
			p.AddOperator(TypeDCSetInit)
		case ruleAction55:
			p.AddOperator(TypeDCSetPool)
		case ruleAction56:
			p.AddValue("2")
			p.AddLeftValueMark()
		case ruleAction57:
			p.AddOperator(TypeDice)
		case ruleAction58:
			p.AddValue("1")
			p.AddLeftValueMark()
		case ruleAction59:
			p.AddOperator(TypeDice)
		case ruleAction60:
			p.AddValue("2")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction61:
			p.AddValue("1")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction62:
			p.AddOperator(TypeWodSetPoints)
		case ruleAction63:
			p.AddOperator(TypeWodSetThreshold)
		case ruleAction64:
			p.AddOperator(TypeWodSetThresholdQ)
		case ruleAction65:
			p.AddOperator(TypeDiceWod)
		case ruleAction66:
			p.AddOperator(TypeDCSetPoints)
		case ruleAction67:
			p.AddOperator(TypeDiceDC)
		case ruleAction68:
			p.AddLeftValueMark()
		case ruleAction69:
			p.AddOperator(TypeDice)
		case ruleAction70:
			p.AddOperator(TypeDicePenalty)
		case ruleAction71:
			p.AddValue("1")
			p.AddOperator(TypeDicePenalty)
		case ruleAction72:
			p.AddOperator(TypeDiceBonus)
		case ruleAction73:
			p.AddValue("1")
			p.AddOperator(TypeDiceBonus)
		case ruleAction74:
			p.AddValue("0")
			p.AddValue("0")
			p.AddOperator(TypeDiceFate)
		case ruleAction75:
			p.AddLoadVarnameForThis(text)
		case ruleAction76:
			p.WriteCode(TypeConvertInt, 0, "")
		case ruleAction77:
			p.WriteCode(TypeConvertStr, 0, "")
		case ruleAction78:
			p.AddLoadVarname(string(text))
		case ruleAction79:
			p.AddValue(string(text))
		case ruleAction80:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction81:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction82:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction83:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction84:
			p.CounterPush()
		case ruleAction85:
			p.CounterAdd(1)
		case ruleAction86:
			p.CounterAdd(1)
		case ruleAction87:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction88:
			p.CounterPush()
		case ruleAction89:
			p.CounterAdd(1)
		case ruleAction90:
			p.CounterAdd(1)
		case ruleAction91:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction92:
			p.CounterPush()
		case ruleAction93:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction94:
			p.CounterPush()
		case ruleAction95:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction96:
			p.AddStName()
		case ruleAction97:
			p.AddStName()
		case ruleAction98:
			p.AddStName()
		case ruleAction99:
			p.AddStName()
		case ruleAction100:
			p.CodePush()
		case ruleAction101:
			p.CodePop()
			p.AddStoreComputed(text)
			p.AddStName()
		case ruleAction102:
			p.CodePush()
		case ruleAction103:
			p.CodePop()
			p.AddStoreComputed(text)
			p.AddStName()
		case ruleAction104:
			p.AddStModify("+", text)
		case ruleAction105:
			p.AddStModify("-", text)
		case ruleAction106:
			p.AddStModify("+", text)
		case ruleAction107:
			p.AddStModify("-", text)
		case ruleAction108:
			p.AddStModify("-", text)
		case ruleAction109:
			p.AddValueStr(text)
		case ruleAction110:
			p.AddValueStr(text)
		case ruleAction111:
			p.AddValueStr(text)
		case ruleAction112:
			p.AddValueStr(text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *DiceRollParser) Init(options ...func(*DiceRollParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 eBase <- <(e Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulee]() {
					goto l0
				}
				{
					add(ruleAction0, position)
				}
				add(ruleeBase, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e <- <(('^' 's' 't' st_expr) / (&{p.flags.DisableBlock} e0) / (eOne (';' sp Action1 eOne?)*))> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				{
					position5, tokenIndex5 := position, tokenIndex
					if buffer[position] != rune('^') {
						goto l6
					}
					position++
					if buffer[position] != rune('s') {
						goto l6
					}
					position++
					if buffer[position] != rune('t') {
						goto l6
					}
					position++
					{
						position7 := position
						{
							position8, tokenIndex8 := position, tokenIndex
							{
								position10 := position
								{
									position11, tokenIndex11 := position, tokenIndex
									if !_rules[rulest_name2]() {
										goto l12
									}
									if !_rules[rulest_modify_rest1]() {
										goto l12
									}
									goto l11
								l12:
									position, tokenIndex = position11, tokenIndex11
									if !_rules[rulest_name2r]() {
										goto l13
									}
									if !_rules[rulest_modify_rest1]() {
										goto l13
									}
									goto l11
								l13:
									position, tokenIndex = position11, tokenIndex11
									if !_rules[rulest_name1]() {
										goto l14
									}
									if !_rules[rulest_modify_rest]() {
										goto l14
									}
									goto l11
								l14:
									position, tokenIndex = position11, tokenIndex11
									if !_rules[rulest_name1r]() {
										goto l9
									}
									if !_rules[rulest_modify_rest]() {
										goto l9
									}
								}
							l11:
								if !_rules[rulesp]() {
									goto l9
								}
								{
									position15, tokenIndex15 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l15
									}
									position++
									goto l16
								l15:
									position, tokenIndex = position15, tokenIndex15
								}
							l16:
								if !_rules[rulesp]() {
									goto l9
								}
								if !_rules[rulest_modify_multi_rest]() {
									goto l9
								}
								add(rulest_modify_multi_1, position10)
							}
							goto l8
						l9:
							position, tokenIndex = position8, tokenIndex8
							{
								position18 := position
								{
									position21 := position
									{
										position22, tokenIndex22 := position, tokenIndex
										if !_rules[rulest_name2]() {
											goto l23
										}
										if !_rules[rulesp]() {
											goto l23
										}
										{
											position24, tokenIndex24 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l25
											}
											position++
											goto l24
										l25:
											position, tokenIndex = position24, tokenIndex24
											if buffer[position] != rune('=') {
												goto l23
											}
											position++
										}
									l24:
										if !_rules[rulesp]() {
											goto l23
										}
										if !_rules[ruleest]() {
											goto l23
										}
										{
											add(ruleAction96, position)
										}
										goto l22
									l23:
										position, tokenIndex = position22, tokenIndex22
										if !_rules[rulest_name1]() {
											goto l27
										}
										if !_rules[ruleest]() {
											goto l27
										}
										{
											add(ruleAction97, position)
										}
										goto l22
									l27:
										position, tokenIndex = position22, tokenIndex22
										if !_rules[rulest_name2r]() {
											goto l29
										}
										if !_rules[rulesp]() {
											goto l29
										}
										{
											position30, tokenIndex30 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l31
											}
											position++
											goto l30
										l31:
											position, tokenIndex = position30, tokenIndex30
											if buffer[position] != rune('=') {
												goto l29
											}
											position++
										}
									l30:
										if !_rules[rulesp]() {
											goto l29
										}
										if !_rules[ruleest]() {
											goto l29
										}
										{
											add(ruleAction98, position)
										}
										goto l22
									l29:
										position, tokenIndex = position22, tokenIndex22
										if !_rules[rulest_name1r]() {
											goto l33
										}
										if !_rules[ruleest]() {
											goto l33
										}
										{
											add(ruleAction99, position)
										}
										goto l22
									l33:
										position, tokenIndex = position22, tokenIndex22
										if buffer[position] != rune('&') {
											goto l35
										}
										position++
										if !_rules[rulest_name2]() {
											goto l35
										}
										if !_rules[rulesp]() {
											goto l35
										}
										{
											position36, tokenIndex36 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l37
											}
											position++
											goto l36
										l37:
											position, tokenIndex = position36, tokenIndex36
											if buffer[position] != rune('=') {
												goto l35
											}
											position++
										}
									l36:
										if !_rules[rulesp]() {
											goto l35
										}
										{
											add(ruleAction100, position)
										}
										{
											position39 := position
											if !_rules[ruleest]() {
												goto l35
											}
											add(rulePegText, position39)
										}
										{
											add(ruleAction101, position)
										}
										goto l22
									l35:
										position, tokenIndex = position22, tokenIndex22
										if buffer[position] != rune('&') {
											goto l17
										}
										position++
										if !_rules[rulest_name2r]() {
											goto l17
										}
										if !_rules[rulesp]() {
											goto l17
										}
										{
											position41, tokenIndex41 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l42
											}
											position++
											goto l41
										l42:
											position, tokenIndex = position41, tokenIndex41
											if buffer[position] != rune('=') {
												goto l17
											}
											position++
										}
									l41:
										if !_rules[rulesp]() {
											goto l17
										}
										{
											add(ruleAction102, position)
										}
										{
											position44 := position
											if !_rules[ruleest]() {
												goto l17
											}
											add(rulePegText, position44)
										}
										{
											add(ruleAction103, position)
										}
									}
								l22:
									add(rulest_assign, position21)
								}
								if !_rules[rulesp]() {
									goto l17
								}
								{
									position46, tokenIndex46 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l46
									}
									position++
									goto l47
								l46:
									position, tokenIndex = position46, tokenIndex46
								}
							l47:
								if !_rules[rulesp]() {
									goto l17
								}
							l19:
								{
									position20, tokenIndex20 := position, tokenIndex
									{
										position48 := position
										{
											position49, tokenIndex49 := position, tokenIndex
											if !_rules[rulest_name2]() {
												goto l50
											}
											if !_rules[rulesp]() {
												goto l50
											}
											{
												position51, tokenIndex51 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l52
												}
												position++
												goto l51
											l52:
												position, tokenIndex = position51, tokenIndex51
												if buffer[position] != rune('=') {
													goto l50
												}
												position++
											}
										l51:
											if !_rules[rulesp]() {
												goto l50
											}
											if !_rules[ruleest]() {
												goto l50
											}
											{
												add(ruleAction96, position)
											}
											goto l49
										l50:
											position, tokenIndex = position49, tokenIndex49
											if !_rules[rulest_name1]() {
												goto l54
											}
											if !_rules[ruleest]() {
												goto l54
											}
											{
												add(ruleAction97, position)
											}
											goto l49
										l54:
											position, tokenIndex = position49, tokenIndex49
											if !_rules[rulest_name2r]() {
												goto l56
											}
											if !_rules[rulesp]() {
												goto l56
											}
											{
												position57, tokenIndex57 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l58
												}
												position++
												goto l57
											l58:
												position, tokenIndex = position57, tokenIndex57
												if buffer[position] != rune('=') {
													goto l56
												}
												position++
											}
										l57:
											if !_rules[rulesp]() {
												goto l56
											}
											if !_rules[ruleest]() {
												goto l56
											}
											{
												add(ruleAction98, position)
											}
											goto l49
										l56:
											position, tokenIndex = position49, tokenIndex49
											if !_rules[rulest_name1r]() {
												goto l60
											}
											if !_rules[ruleest]() {
												goto l60
											}
											{
												add(ruleAction99, position)
											}
											goto l49
										l60:
											position, tokenIndex = position49, tokenIndex49
											if buffer[position] != rune('&') {
												goto l62
											}
											position++
											if !_rules[rulest_name2]() {
												goto l62
											}
											if !_rules[rulesp]() {
												goto l62
											}
											{
												position63, tokenIndex63 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l64
												}
												position++
												goto l63
											l64:
												position, tokenIndex = position63, tokenIndex63
												if buffer[position] != rune('=') {
													goto l62
												}
												position++
											}
										l63:
											if !_rules[rulesp]() {
												goto l62
											}
											{
												add(ruleAction100, position)
											}
											{
												position66 := position
												if !_rules[ruleest]() {
													goto l62
												}
												add(rulePegText, position66)
											}
											{
												add(ruleAction101, position)
											}
											goto l49
										l62:
											position, tokenIndex = position49, tokenIndex49
											if buffer[position] != rune('&') {
												goto l20
											}
											position++
											if !_rules[rulest_name2r]() {
												goto l20
											}
											if !_rules[rulesp]() {
												goto l20
											}
											{
												position68, tokenIndex68 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l69
												}
												position++
												goto l68
											l69:
												position, tokenIndex = position68, tokenIndex68
												if buffer[position] != rune('=') {
													goto l20
												}
												position++
											}
										l68:
											if !_rules[rulesp]() {
												goto l20
											}
											{
												add(ruleAction102, position)
											}
											{
												position71 := position
												if !_rules[ruleest]() {
													goto l20
												}
												add(rulePegText, position71)
											}
											{
												add(ruleAction103, position)
											}
										}
									l49:
										add(rulest_assign, position48)
									}
									if !_rules[rulesp]() {
										goto l20
									}
									{
										position73, tokenIndex73 := position, tokenIndex
										if buffer[position] != rune(',') {
											goto l73
										}
										position++
										goto l74
									l73:
										position, tokenIndex = position73, tokenIndex73
									}
								l74:
									if !_rules[rulesp]() {
										goto l20
									}
									goto l19
								l20:
									position, tokenIndex = position20, tokenIndex20
								}
								add(rulest_assign_multi, position18)
							}
							goto l8
						l17:
							position, tokenIndex = position8, tokenIndex8
							{
								position75 := position
								if !_rules[rulest_modify2]() {
									goto l6
								}
								if !_rules[rulesp]() {
									goto l6
								}
								{
									position76, tokenIndex76 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l76
									}
									position++
									goto l77
								l76:
									position, tokenIndex = position76, tokenIndex76
								}
							l77:
								if !_rules[rulesp]() {
									goto l6
								}
								if !_rules[rulest_modify_multi_rest]() {
									goto l6
								}
								add(rulest_modify_multi_2, position75)
							}
						}
					l8:
						add(rulest_expr, position7)
					}
					goto l5
				l6:
					position, tokenIndex = position5, tokenIndex5
					if !(p.flags.DisableBlock) {
						goto l78
					}
					if !_rules[rulee0]() {
						goto l78
					}
					goto l5
				l78:
					position, tokenIndex = position5, tokenIndex5
					if !_rules[ruleeOne]() {
						goto l3
					}
				l79:
					{
						position80, tokenIndex80 := position, tokenIndex
						if buffer[position] != rune(';') {
							goto l80
						}
						position++
						if !_rules[rulesp]() {
							goto l80
						}
						{
							add(ruleAction1, position)
						}
						{
							position82, tokenIndex82 := position, tokenIndex
							if !_rules[ruleeOne]() {
								goto l82
							}
							goto l83
						l82:
							position, tokenIndex = position82, tokenIndex82
						}
					l83:
						goto l79
					l80:
						position, tokenIndex = position80, tokenIndex80
					}
				}
			l5:
				add(rulee, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 eOne <- <(sp (s0 / e0 / assign_expr))> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				if !_rules[rulesp]() {
					goto l84
				}
				{
					position86, tokenIndex86 := position, tokenIndex
					{
						position88 := position
						{
							position89 := position
							if buffer[position] != rune('i') {
								goto l87
							}
							position++
							if buffer[position] != rune('f') {
								goto l87
							}
							position++
							if !_rules[rulesp]() {
								goto l87
							}
							if !_rules[rulee0]() {
								goto l87
							}
							{
								add(ruleAction5, position)
							}
							if !_rules[ruleblock]() {
								goto l87
							}
							{
								add(ruleAction6, position)
							}
							{
								position92, tokenIndex92 := position, tokenIndex
								{
									position94 := position
									if buffer[position] != rune('e') {
										goto l92
									}
									position++
									if buffer[position] != rune('l') {
										goto l92
									}
									position++
									if buffer[position] != rune('s') {
										goto l92
									}
									position++
									if buffer[position] != rune('e') {
										goto l92
									}
									position++
									if !_rules[rulesp]() {
										goto l92
									}
									if !_rules[ruleblock]() {
										goto l92
									}
									add(rulestmtElse, position94)
								}
								goto l93
							l92:
								position, tokenIndex = position92, tokenIndex92
							}
						l93:
							{
								add(ruleAction7, position)
							}
							{
								add(ruleAction8, position)
							}
							add(rulestmtIf, position89)
						}
						add(rules0, position88)
					}
					goto l86
				l87:
					position, tokenIndex = position86, tokenIndex86
					if !_rules[rulee0]() {
						goto l97
					}
					goto l86
				l97:
					position, tokenIndex = position86, tokenIndex86
					if !_rules[ruleassign_expr]() {
						goto l84
					}
				}
			l86:
				add(ruleeOne, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 3 assign_expr <- <(&{!p.flags.DisableBlock} identifier Action2 '=' sp e0 Action3)> */
		func() bool {
			position98, tokenIndex98 := position, tokenIndex
			{
				position99 := position
				if !(!p.flags.DisableBlock) {
					goto l98
				}
				if !_rules[ruleidentifier]() {
					goto l98
				}
				{
					add(ruleAction2, position)
				}
				if buffer[position] != rune('=') {
					goto l98
				}
				position++
				if !_rules[rulesp]() {
					goto l98
				}
				if !_rules[rulee0]() {
					goto l98
				}
				{
					add(ruleAction3, position)
				}
				add(ruleassign_expr, position99)
			}
			return true
		l98:
			position, tokenIndex = position98, tokenIndex98
			return false
		},
		/* 4 s0 <- <stmtIf> */
		nil,
		/* 5 block <- <((('{' sp '}') / ('{' sp e Action4 '}')) sp)> */
		func() bool {
			position103, tokenIndex103 := position, tokenIndex
			{
				position104 := position
				{
					position105, tokenIndex105 := position, tokenIndex
					if buffer[position] != rune('{') {
						goto l106
					}
					position++
					if !_rules[rulesp]() {
						goto l106
					}
					if buffer[position] != rune('}') {
						goto l106
					}
					position++
					goto l105
				l106:
					position, tokenIndex = position105, tokenIndex105
					if buffer[position] != rune('{') {
						goto l103
					}
					position++
					if !_rules[rulesp]() {
						goto l103
					}
					if !_rules[rulee]() {
						goto l103
					}
					{
						add(ruleAction4, position)
					}
					if buffer[position] != rune('}') {
						goto l103
					}
					position++
				}
			l105:
				if !_rules[rulesp]() {
					goto l103
				}
				add(ruleblock, position104)
			}
			return true
		l103:
			position, tokenIndex = position103, tokenIndex103
			return false
		},
		/* 6 stmtElse <- <('e' 'l' 's' 'e' sp block)> */
		nil,
		/* 7 stmtIf <- <('i' 'f' sp e0 Action5 block Action6 stmtElse? Action7 Action8)> */
		nil,
		/* 8 e0 <- <eTernary> */
		func() bool {
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				{
					position112 := position
					{
						position113, tokenIndex113 := position, tokenIndex
						if !_rules[ruleeBitwise]() {
							goto l114
						}
						if buffer[position] != rune('?') {
							goto l114
						}
						position++
						if !_rules[rulesp]() {
							goto l114
						}
						{
							add(ruleAction11, position)
						}
						if !_rules[ruleeBitwise]() {
							goto l114
						}
						if buffer[position] != rune(':') {
							goto l114
						}
						position++
						if !_rules[rulesp]() {
							goto l114
						}
						{
							add(ruleAction12, position)
						}
						if !_rules[ruleeBitwise]() {
							goto l114
						}
						{
							add(ruleAction13, position)
						}
						goto l113
					l114:
						position, tokenIndex = position113, tokenIndex113
						if !_rules[ruleeSimpleSwitch]() {
							goto l118
						}
						{
							add(ruleAction14, position)
						}
					l120:
						{
							position121, tokenIndex121 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l121
							}
							position++
							if !_rules[rulesp]() {
								goto l121
							}
							if !_rules[ruleeSimpleSwitch]() {
								goto l121
							}
							{
								add(ruleAction15, position)
							}
							goto l120
						l121:
							position, tokenIndex = position121, tokenIndex121
						}
						{
							add(ruleAction16, position)
						}
						goto l113
					l118:
						position, tokenIndex = position113, tokenIndex113
						if !_rules[ruleeBitwise]() {
							goto l110
						}
					}
				l113:
					add(ruleeTernary, position112)
				}
				add(rulee0, position111)
			}
			return true
		l110:
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 9 eSimpleSwitch <- <(eBitwise '?' sp Action9 eBitwise Action10)> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				if !_rules[ruleeBitwise]() {
					goto l124
				}
				if buffer[position] != rune('?') {
					goto l124
				}
				position++
				if !_rules[rulesp]() {
					goto l124
				}
				{
					add(ruleAction9, position)
				}
				if !_rules[ruleeBitwise]() {
					goto l124
				}
				{
					add(ruleAction10, position)
				}
				add(ruleeSimpleSwitch, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 10 eTernary <- <((eBitwise '?' sp Action11 eBitwise ':' sp Action12 eBitwise Action13) / (eSimpleSwitch Action14 (',' sp eSimpleSwitch Action15)* Action16) / eBitwise)> */
		nil,
		/* 11 eBitwise <- <((&{p.flags.DisableBitwiseOp} eComp) / eBitwise1)> */
		func() bool {
			position129, tokenIndex129 := position, tokenIndex
			{
				position130 := position
				{
					position131, tokenIndex131 := position, tokenIndex
					if !(p.flags.DisableBitwiseOp) {
						goto l132
					}
					if !_rules[ruleeComp]() {
						goto l132
					}
					goto l131
				l132:
					position, tokenIndex = position131, tokenIndex131
					{
						position133 := position
						if !_rules[ruleeComp]() {
							goto l129
						}
					l134:
						{
							position135, tokenIndex135 := position, tokenIndex
							{
								position136, tokenIndex136 := position, tokenIndex
								{
									position138, tokenIndex138 := position, tokenIndex
									{
										position140 := position
										if buffer[position] != rune('|') {
											goto l139
										}
										position++
										if buffer[position] != rune('|') {
											goto l139
										}
										position++
										if !_rules[rulesp]() {
											goto l139
										}
										add(rulelogicOr, position140)
									}
									goto l138
								l139:
									position, tokenIndex = position138, tokenIndex138
									{
										position141 := position
										if buffer[position] != rune('|') {
											goto l137
										}
										position++
										if !_rules[rulesp]() {
											goto l137
										}
										add(rulebitwiseOr, position141)
									}
								}
							l138:
								{
									add(ruleAction17, position)
								}
								if !_rules[ruleeComp]() {
									goto l137
								}
								{
									add(ruleAction18, position)
								}
								goto l136
							l137:
								position, tokenIndex = position136, tokenIndex136
								{
									position144, tokenIndex144 := position, tokenIndex
									{
										position146 := position
										{
											position147, tokenIndex147 := position, tokenIndex
											if buffer[position] != rune('&') {
												goto l148
											}
											position++
											if buffer[position] != rune('&') {
												goto l148
											}
											position++
											goto l147
										l148:
											position, tokenIndex = position147, tokenIndex147
											if buffer[position] != rune('&') {
												goto l145
											}
											position++
											if buffer[position] != rune('a') {
												goto l145
											}
											position++
											if buffer[position] != rune('m') {
												goto l145
											}
											position++
											if buffer[position] != rune('p') {
												goto l145
											}
											position++
											if buffer[position] != rune(';') {
												goto l145
											}
											position++
											if buffer[position] != rune('&') {
												goto l145
											}
											position++
											if buffer[position] != rune('a') {
												goto l145
											}
											position++
											if buffer[position] != rune('m') {
												goto l145
											}
											position++
											if buffer[position] != rune('p') {
												goto l145
											}
											position++
											if buffer[position] != rune(';') {
												goto l145
											}
											position++
										}
									l147:
										if !_rules[rulesp]() {
											goto l145
										}
										add(rulelogicAnd, position146)
									}
									goto l144
								l145:
									position, tokenIndex = position144, tokenIndex144
									{
										position149 := position
										{
											position150, tokenIndex150 := position, tokenIndex
											if buffer[position] != rune('&') {
												goto l151
											}
											position++
											goto l150
										l151:
											position, tokenIndex = position150, tokenIndex150
											if buffer[position] != rune('&') {
												goto l135
											}
											position++
											if buffer[position] != rune('a') {
												goto l135
											}
											position++
											if buffer[position] != rune('m') {
												goto l135
											}
											position++
											if buffer[position] != rune('p') {
												goto l135
											}
											position++
											if buffer[position] != rune(';') {
												goto l135
											}
											position++
										}
									l150:
										if !_rules[rulesp]() {
											goto l135
										}
										add(rulebitwiseAnd, position149)
									}
								}
							l144:
								{
									add(ruleAction19, position)
								}
								if !_rules[ruleeComp]() {
									goto l135
								}
								{
									add(ruleAction20, position)
								}
							}
						l136:
							goto l134
						l135:
							position, tokenIndex = position135, tokenIndex135
						}
						add(ruleeBitwise1, position133)
					}
				}
			l131:
				add(ruleeBitwise, position130)
			}
			return true
		l129:
			position, tokenIndex = position129, tokenIndex129
			return false
		},
		/* 12 eBitwise1 <- <(eComp (((logicOr / bitwiseOr) Action17 eComp Action18) / ((logicAnd / bitwiseAnd) Action19 eComp Action20))*)> */
		nil,
		/* 13 eComp <- <(e1 ((lt Action21 e1 Action22) / (ge Action29 e1 Action30) / ((&('>') (gt Action31 e1 Action32)) | (&('!') (ne Action27 e1 Action28)) | (&('=') (eq Action25 e1 Action26)) | (&('<') (le Action23 e1 Action24))))*)> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if !_rules[rulee1]() {
					goto l155
				}
			l157:
				{
					position158, tokenIndex158 := position, tokenIndex
					{
						position159, tokenIndex159 := position, tokenIndex
						{
							position161 := position
							{
								position162, tokenIndex162 := position, tokenIndex
								if buffer[position] != rune('<') {
									goto l163
								}
								position++
								goto l162
							l163:
								position, tokenIndex = position162, tokenIndex162
								if buffer[position] != rune('＜') {
									goto l160
								}
								position++
							}
						l162:
							if !_rules[rulesp]() {
								goto l160
							}
							add(rulelt, position161)
						}
						{
							add(ruleAction21, position)
						}
						if !_rules[rulee1]() {
							goto l160
						}
						{
							add(ruleAction22, position)
						}
						goto l159
					l160:
						position, tokenIndex = position159, tokenIndex159
						{
							position167 := position
							{
								position168, tokenIndex168 := position, tokenIndex
								if buffer[position] != rune('>') {
									goto l169
								}
								position++
								if buffer[position] != rune('=') {
									goto l169
								}
								position++
								goto l168
							l169:
								position, tokenIndex = position168, tokenIndex168
								if buffer[position] != rune('＞') {
									goto l166
								}
								position++
								if buffer[position] != rune('＝') {
									goto l166
								}
								position++
							}
						l168:
							if !_rules[rulesp]() {
								goto l166
							}
							add(rulege, position167)
						}
						{
							add(ruleAction29, position)
						}
						if !_rules[rulee1]() {
							goto l166
						}
						{
							add(ruleAction30, position)
						}
						goto l159
					l166:
						position, tokenIndex = position159, tokenIndex159
						{
							switch buffer[position] {
							case '>':
								{
									position173 := position
									{
										position174, tokenIndex174 := position, tokenIndex
										if buffer[position] != rune('>') {
											goto l175
										}
										position++
										goto l174
									l175:
										position, tokenIndex = position174, tokenIndex174
										if buffer[position] != rune('＞') {
											goto l158
										}
										position++
									}
								l174:
									if !_rules[rulesp]() {
										goto l158
									}
									add(rulegt, position173)
								}
								{
									add(ruleAction31, position)
								}
								if !_rules[rulee1]() {
									goto l158
								}
								{
									add(ruleAction32, position)
								}
							case '!':
								{
									position178 := position
									{
										position179, tokenIndex179 := position, tokenIndex
										if buffer[position] != rune('!') {
											goto l180
										}
										position++
										if buffer[position] != rune('=') {
											goto l180
										}
										position++
										goto l179
									l180:
										position, tokenIndex = position179, tokenIndex179
										if buffer[position] != rune('！') {
											goto l158
										}
										position++
										if buffer[position] != rune('＝') {
											goto l158
										}
										position++
									}
								l179:
									if !_rules[rulesp]() {
										goto l158
									}
									add(rulene, position178)
								}
								{
									add(ruleAction27, position)
								}
								if !_rules[rulee1]() {
									goto l158
								}
								{
									add(ruleAction28, position)
								}
							case '=':
								{
									position183 := position
									{
										position184, tokenIndex184 := position, tokenIndex
										if buffer[position] != rune('=') {
											goto l185
										}
										position++
										if buffer[position] != rune('=') {
											goto l185
										}
										position++
										goto l184
									l185:
										position, tokenIndex = position184, tokenIndex184
										if buffer[position] != rune('＝') {
											goto l158
										}
										position++
										if buffer[position] != rune('＝') {
											goto l158
										}
										position++
									}
								l184:
									if !_rules[rulesp]() {
										goto l158
									}
									add(ruleeq, position183)
								}
								{
									add(ruleAction25, position)
								}
								if !_rules[rulee1]() {
									goto l158
								}
								{
									add(ruleAction26, position)
								}
							default:
								{
									position188 := position
									{
										position189, tokenIndex189 := position, tokenIndex
										if buffer[position] != rune('<') {
											goto l190
										}
										position++
										if buffer[position] != rune('=') {
											goto l190
										}
										position++
										goto l189
									l190:
										position, tokenIndex = position189, tokenIndex189
										if buffer[position] != rune('＜') {
											goto l158
										}
										position++
										if buffer[position] != rune('＝') {
											goto l158
										}
										position++
									}
								l189:
									if !_rules[rulesp]() {
										goto l158
									}
									add(rulele, position188)
								}
								{
									add(ruleAction23, position)
								}
								if !_rules[rulee1]() {
									goto l158
								}
								{
									add(ruleAction24, position)
								}
							}
						}

					}
				l159:
					goto l157
				l158:
					position, tokenIndex = position158, tokenIndex158
				}
				add(ruleeComp, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 14 e1 <- <(e2 ((add Action33 e2 Action34) / (minus Action35 e2 Action36))*)> */
		func() bool {
			position193, tokenIndex193 := position, tokenIndex
			{
				position194 := position
				if !_rules[rulee2]() {
					goto l193
				}
			l195:
				{
					position196, tokenIndex196 := position, tokenIndex
					{
						position197, tokenIndex197 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l198
						}
						{
							add(ruleAction33, position)
						}
						if !_rules[rulee2]() {
							goto l198
						}
						{
							add(ruleAction34, position)
						}
						goto l197
					l198:
						position, tokenIndex = position197, tokenIndex197
						if !_rules[ruleminus]() {
							goto l196
						}
						{
							add(ruleAction35, position)
						}
						if !_rules[rulee2]() {
							goto l196
						}
						{
							add(ruleAction36, position)
						}
					}
				l197:
					goto l195
				l196:
					position, tokenIndex = position196, tokenIndex196
				}
				add(rulee1, position194)
			}
			return true
		l193:
			position, tokenIndex = position193, tokenIndex193
			return false
		},
		/* 15 e2 <- <(e3 ((&('%') (modulus Action41 e3 Action42)) | (&('/') (divide Action39 e3 Action40)) | (&('*') (multiply Action37 e3 Action38)))*)> */
		func() bool {
			position203, tokenIndex203 := position, tokenIndex
			{
				position204 := position
				if !_rules[rulee3]() {
					goto l203
				}
			l205:
				{
					position206, tokenIndex206 := position, tokenIndex
					{
						switch buffer[position] {
						case '%':
							{
								position208 := position
								if buffer[position] != rune('%') {
									goto l206
								}
								position++
								if !_rules[rulesp]() {
									goto l206
								}
								add(rulemodulus, position208)
							}
							{
								add(ruleAction41, position)
							}
							if !_rules[rulee3]() {
								goto l206
							}
							{
								add(ruleAction42, position)
							}
						case '/':
							{
								position211 := position
								{
									position212, tokenIndex212 := position, tokenIndex
									if buffer[position] != rune('/') {
										goto l213
									}
									position++
									goto l212
								l213:
									position, tokenIndex = position212, tokenIndex212
									if buffer[position] != rune('／') {
										goto l206
									}
									position++
								}
							l212:
								if !_rules[rulesp]() {
									goto l206
								}
								add(ruledivide, position211)
							}
							{
								add(ruleAction39, position)
							}
							if !_rules[rulee3]() {
								goto l206
							}
							{
								add(ruleAction40, position)
							}
						default:
							{
								position216 := position
								{
									position217, tokenIndex217 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l218
									}
									position++
									goto l217
								l218:
									position, tokenIndex = position217, tokenIndex217
									if buffer[position] != rune('＊') {
										goto l206
									}
									position++
								}
							l217:
								if !_rules[rulesp]() {
									goto l206
								}
								add(rulemultiply, position216)
							}
							{
								add(ruleAction37, position)
							}
							if !_rules[rulee3]() {
								goto l206
							}
							{
								add(ruleAction38, position)
							}
						}
					}

					goto l205
				l206:
					position, tokenIndex = position206, tokenIndex206
				}
				add(rulee2, position204)
			}
			return true
		l203:
			position, tokenIndex = position203, tokenIndex203
			return false
		},
		/* 16 e3 <- <(e4 (exponentiation Action43 e4 Action44)*)> */
		func() bool {
			position221, tokenIndex221 := position, tokenIndex
			{
				position222 := position
				if !_rules[rulee4]() {
					goto l221
				}
			l223:
				{
					position224, tokenIndex224 := position, tokenIndex
					{
						position225 := position
						{
							position226, tokenIndex226 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l227
							}
							position++
							if !_rules[rulesp]() {
								goto l227
							}
							goto l226
						l227:
							position, tokenIndex = position226, tokenIndex226
							if buffer[position] != rune('*') {
								goto l224
							}
							position++
							if buffer[position] != rune('*') {
								goto l224
							}
							position++
							if !_rules[rulesp]() {
								goto l224
							}
						}
					l226:
						add(ruleexponentiation, position225)
					}
					{
						add(ruleAction43, position)
					}
					if !_rules[rulee4]() {
						goto l224
					}
					{
						add(ruleAction44, position)
					}
					goto l223
				l224:
					position, tokenIndex = position224, tokenIndex224
				}
				add(rulee3, position222)
			}
			return true
		l221:
			position, tokenIndex = position221, tokenIndex221
			return false
		},
		/* 17 e4 <- <((minus e5 Action45) / e5)> */
		func() bool {
			position230, tokenIndex230 := position, tokenIndex
			{
				position231 := position
				{
					position232, tokenIndex232 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l233
					}
					if !_rules[rulee5]() {
						goto l233
					}
					{
						add(ruleAction45, position)
					}
					goto l232
				l233:
					position, tokenIndex = position232, tokenIndex232
					if !_rules[rulee5]() {
						goto l230
					}
				}
			l232:
				add(rulee4, position231)
			}
			return true
		l230:
			position, tokenIndex = position230, tokenIndex230
			return false
		},
		/* 18 e5 <- <((add eDice) / eDice)> */
		func() bool {
			position235, tokenIndex235 := position, tokenIndex
			{
				position236 := position
				{
					position237, tokenIndex237 := position, tokenIndex
					if !_rules[ruleadd]() {
						goto l238
					}
					if !_rules[ruleeDice]() {
						goto l238
					}
					goto l237
				l238:
					position, tokenIndex = position237, tokenIndex237
					if !_rules[ruleeDice]() {
						goto l235
					}
				}
			l237:
				add(rulee5, position236)
			}
			return true
		l235:
			position, tokenIndex = position235, tokenIndex235
			return false
		},
		/* 19 dndDiceSuffix <- <(((('优' '势') / ('k' 'h')) Action46 sp) / ((('劣' '势') / ('k' 'l')) Action47 sp))> */
		func() bool {
			position239, tokenIndex239 := position, tokenIndex
			{
				position240 := position
				{
					position241, tokenIndex241 := position, tokenIndex
					{
						position243, tokenIndex243 := position, tokenIndex
						if buffer[position] != rune('优') {
							goto l244
						}
						position++
						if buffer[position] != rune('势') {
							goto l244
						}
						position++
						goto l243
					l244:
						position, tokenIndex = position243, tokenIndex243
						if buffer[position] != rune('k') {
							goto l242
						}
						position++
						if buffer[position] != rune('h') {
							goto l242
						}
						position++
					}
				l243:
					{
						add(ruleAction46, position)
					}
					if !_rules[rulesp]() {
						goto l242
					}
					goto l241
				l242:
					position, tokenIndex = position241, tokenIndex241
					{
						position246, tokenIndex246 := position, tokenIndex
						if buffer[position] != rune('劣') {
							goto l247
						}
						position++
						if buffer[position] != rune('势') {
							goto l247
						}
						position++
						goto l246
					l247:
						position, tokenIndex = position246, tokenIndex246
						if buffer[position] != rune('k') {
							goto l239
						}
						position++
						if buffer[position] != rune('l') {
							goto l239
						}
						position++
					}
				l246:
					{
						add(ruleAction47, position)
					}
					if !_rules[rulesp]() {
						goto l239
					}
				}
			l241:
				add(ruledndDiceSuffix, position240)
			}
			return true
		l239:
			position, tokenIndex = position239, tokenIndex239
			return false
		},
		/* 20 kqDiceOp <- <(('k' eDice2 Action48)? ('q' eDice2 Action49)? ('d' 'l' eDice2 Action50)? ('d' 'h' eDice2 Action51)?)> */
		func() bool {
			{
				position250 := position
				{
					position251, tokenIndex251 := position, tokenIndex
					if buffer[position] != rune('k') {
						goto l251
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l251
					}
					{
						add(ruleAction48, position)
					}
					goto l252
				l251:
					position, tokenIndex = position251, tokenIndex251
				}
			l252:
				{
					position254, tokenIndex254 := position, tokenIndex
					if buffer[position] != rune('q') {
						goto l254
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l254
					}
					{
						add(ruleAction49, position)
					}
					goto l255
				l254:
					position, tokenIndex = position254, tokenIndex254
				}
			l255:
				{
					position257, tokenIndex257 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l257
					}
					position++
					if buffer[position] != rune('l') {
						goto l257
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l257
					}
					{
						add(ruleAction50, position)
					}
					goto l258
				l257:
					position, tokenIndex = position257, tokenIndex257
				}
			l258:
				{
					position260, tokenIndex260 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l260
					}
					position++
					if buffer[position] != rune('h') {
						goto l260
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l260
					}
					{
						add(ruleAction51, position)
					}
					goto l261
				l260:
					position, tokenIndex = position260, tokenIndex260
				}
			l261:
				add(rulekqDiceOp, position250)
			}
			return true
		},
		/* 21 _dnumber <- <&(('d' / 'D') (number / '('))> */
		func() bool {
			position263, tokenIndex263 := position, tokenIndex
			{
				position264 := position
				{
					position265, tokenIndex265 := position, tokenIndex
					{
						position266, tokenIndex266 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l267
						}
						position++
						goto l266
					l267:
						position, tokenIndex = position266, tokenIndex266
						if buffer[position] != rune('D') {
							goto l263
						}
						position++
					}
				l266:
					{
						position268, tokenIndex268 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l269
						}
						goto l268
					l269:
						position, tokenIndex = position268, tokenIndex268
						if buffer[position] != rune('(') {
							goto l263
						}
						position++
					}
				l268:
					position, tokenIndex = position265, tokenIndex265
				}
				add(rule_dnumber, position264)
			}
			return true
		l263:
			position, tokenIndex = position263, tokenIndex263
			return false
		},
		/* 22 simpleDice2 <- <(&(number / '(') eDice2)> */
		func() bool {
			position270, tokenIndex270 := position, tokenIndex
			{
				position271 := position
				{
					position272, tokenIndex272 := position, tokenIndex
					{
						position273, tokenIndex273 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l274
						}
						goto l273
					l274:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('(') {
							goto l270
						}
						position++
					}
				l273:
					position, tokenIndex = position272, tokenIndex272
				}
				if !_rules[ruleeDice2]() {
					goto l270
				}
				add(rulesimpleDice2, position271)
			}
			return true
		l270:
			position, tokenIndex = position270, tokenIndex270
			return false
		},
		/* 23 wodDicePool <- <(Action52 (simpleDice2 Action53)?)> */
		nil,
		/* 24 doubleCrossDicePool <- <(Action54 (simpleDice2 Action55))> */
		nil,
		/* 25 eDice <- <((_dnumber ('d' / 'D') Action56 eDice2 dndDiceSuffix Action57) / (_dnumber ('d' / 'D') Action58 eDice2 kqDiceOp Action59) / (('d' / 'D') dndDiceSuffix Action60) / (('d' / 'D') !(!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .) sp Action61) / (wodDicePool ('a' / 'A') simpleDice2 ((&('Q' | 'q') (('q' / 'Q') simpleDice2 Action64)) | (&('K' | 'k') (('k' / 'K') simpleDice2 Action63)) | (&('M' | 'm') (('m' / 'M') simpleDice2 Action62)))* Action65) / (doubleCrossDicePool ('c' / 'C') simpleDice2 (('m' / 'M') simpleDice2 Action66)* Action67) / (eDice2 (('d' / 'D') Action68 simpleDice2 kqDiceOp Action69)*))> */
		func() bool {
			position277, tokenIndex277 := position, tokenIndex
			{
				position278 := position
				{
					position279, tokenIndex279 := position, tokenIndex
					if !_rules[rule_dnumber]() {
						goto l280
					}
					{
						position281, tokenIndex281 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l282
						}
						position++
						goto l281
					l282:
						position, tokenIndex = position281, tokenIndex281
						if buffer[position] != rune('D') {
							goto l280
						}
						position++
					}
				l281:
					{
						add(ruleAction56, position)
					}
					if !_rules[ruleeDice2]() {
						goto l280
					}
					if !_rules[ruledndDiceSuffix]() {
						goto l280
					}
					{
						add(ruleAction57, position)
					}
					goto l279
				l280:
					position, tokenIndex = position279, tokenIndex279
					if !_rules[rule_dnumber]() {
						goto l285
					}
					{
						position286, tokenIndex286 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l287
						}
						position++
						goto l286
					l287:
						position, tokenIndex = position286, tokenIndex286
						if buffer[position] != rune('D') {
							goto l285
						}
						position++
					}
				l286:
					{
						add(ruleAction58, position)
					}
					if !_rules[ruleeDice2]() {
						goto l285
					}
					if !_rules[rulekqDiceOp]() {
						goto l285
					}
					{
						add(ruleAction59, position)
					}
					goto l279
				l285:
					position, tokenIndex = position279, tokenIndex279
					{
						position291, tokenIndex291 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l292
						}
						position++
						goto l291
					l292:
						position, tokenIndex = position291, tokenIndex291
						if buffer[position] != rune('D') {
							goto l290
						}
						position++
					}
				l291:
					if !_rules[ruledndDiceSuffix]() {
						goto l290
					}
					{
						add(ruleAction60, position)
					}
					goto l279
				l290:
					position, tokenIndex = position279, tokenIndex279
					{
						position295, tokenIndex295 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l296
						}
						position++
						goto l295
					l296:
						position, tokenIndex = position295, tokenIndex295
						if buffer[position] != rune('D') {
							goto l294
						}
						position++
					}
				l295:
					{
						position297, tokenIndex297 := position, tokenIndex
						{
							position298, tokenIndex298 := position, tokenIndex
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l298
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l298
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l298
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l298
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l298
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l298
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l298
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l298
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l298
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l298
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l298
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l298
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l298
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l298
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l298
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l298
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l298
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l298
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l298
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l298
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l298
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l298
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l298
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l298
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l298
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l298
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l298
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l298
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l298
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l298
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l298
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l298
									}
									position++
								}
							}

							goto l297
						l298:
							position, tokenIndex = position298, tokenIndex298
						}
						if !matchDot() {
							goto l297
						}
						goto l294
					l297:
						position, tokenIndex = position297, tokenIndex297
					}
					if !_rules[rulesp]() {
						goto l294
					}
					{
						add(ruleAction61, position)
					}
					goto l279
				l294:
					position, tokenIndex = position279, tokenIndex279
					{
						position302 := position
						{
							add(ruleAction52, position)
						}
						{
							position304, tokenIndex304 := position, tokenIndex
							if !_rules[rulesimpleDice2]() {
								goto l304
							}
							{
								add(ruleAction53, position)
							}
							goto l305
						l304:
							position, tokenIndex = position304, tokenIndex304
						}
					l305:
						add(rulewodDicePool, position302)
					}
					{
						position307, tokenIndex307 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l308
						}
						position++
						goto l307
					l308:
						position, tokenIndex = position307, tokenIndex307
						if buffer[position] != rune('A') {
							goto l301
						}
						position++
					}
				l307:
					if !_rules[rulesimpleDice2]() {
						goto l301
					}
				l309:
					{
						position310, tokenIndex310 := position, tokenIndex
						{
							switch buffer[position] {
							case 'Q', 'q':
								{
									position312, tokenIndex312 := position, tokenIndex
									if buffer[position] != rune('q') {
										goto l313
									}
									position++
									goto l312
								l313:
									position, tokenIndex = position312, tokenIndex312
									if buffer[position] != rune('Q') {
										goto l310
									}
									position++
								}
							l312:
								if !_rules[rulesimpleDice2]() {
									goto l310
								}
								{
									add(ruleAction64, position)
								}
							case 'K', 'k':
								{
									position315, tokenIndex315 := position, tokenIndex
									if buffer[position] != rune('k') {
										goto l316
									}
									position++
									goto l315
								l316:
									position, tokenIndex = position315, tokenIndex315
									if buffer[position] != rune('K') {
										goto l310
									}
									position++
								}
							l315:
								if !_rules[rulesimpleDice2]() {
									goto l310
								}
								{
									add(ruleAction63, position)
								}
							default:
								{
									position318, tokenIndex318 := position, tokenIndex
									if buffer[position] != rune('m') {
										goto l319
									}
									position++
									goto l318
								l319:
									position, tokenIndex = position318, tokenIndex318
									if buffer[position] != rune('M') {
										goto l310
									}
									position++
								}
							l318:
								if !_rules[rulesimpleDice2]() {
									goto l310
								}
								{
									add(ruleAction62, position)
								}
							}
						}

						goto l309
					l310:
						position, tokenIndex = position310, tokenIndex310
					}
					{
						add(ruleAction65, position)
					}
					goto l279
				l301:
					position, tokenIndex = position279, tokenIndex279
					{
						position323 := position
						{
							add(ruleAction54, position)
						}
						if !_rules[rulesimpleDice2]() {
							goto l322
						}
						{
							add(ruleAction55, position)
						}
						add(ruledoubleCrossDicePool, position323)
					}
					{
						position326, tokenIndex326 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l327
						}
						position++
						goto l326
					l327:
						position, tokenIndex = position326, tokenIndex326
						if buffer[position] != rune('C') {
							goto l322
						}
						position++
					}
				l326:
					if !_rules[rulesimpleDice2]() {
						goto l322
					}
				l328:
					{
						position329, tokenIndex329 := position, tokenIndex
						{
							position330, tokenIndex330 := position, tokenIndex
							if buffer[position] != rune('m') {
								goto l331
							}
							position++
							goto l330
						l331:
							position, tokenIndex = position330, tokenIndex330
							if buffer[position] != rune('M') {
								goto l329
							}
							position++
						}
					l330:
						if !_rules[rulesimpleDice2]() {
							goto l329
						}
						{
							add(ruleAction66, position)
						}
						goto l328
					l329:
						position, tokenIndex = position329, tokenIndex329
					}
					{
						add(ruleAction67, position)
					}
					goto l279
				l322:
					position, tokenIndex = position279, tokenIndex279
					if !_rules[ruleeDice2]() {
						goto l277
					}
				l334:
					{
						position335, tokenIndex335 := position, tokenIndex
						{
							position336, tokenIndex336 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l337
							}
							position++
							goto l336
						l337:
							position, tokenIndex = position336, tokenIndex336
							if buffer[position] != rune('D') {
								goto l335
							}
							position++
						}
					l336:
						{
							add(ruleAction68, position)
						}
						if !_rules[rulesimpleDice2]() {
							goto l335
						}
						if !_rules[rulekqDiceOp]() {
							goto l335
						}
						{
							add(ruleAction69, position)
						}
						goto l334
					l335:
						position, tokenIndex = position335, tokenIndex335
					}
				}
			l279:
				add(ruleeDice, position278)
			}
			return true
		l277:
			position, tokenIndex = position277, tokenIndex277
			return false
		},
		/* 26 laNumberOrLeftParen <- <&(number / '(')> */
		func() bool {
			position340, tokenIndex340 := position, tokenIndex
			{
				position341 := position
				{
					position342, tokenIndex342 := position, tokenIndex
					{
						position343, tokenIndex343 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l344
						}
						goto l343
					l344:
						position, tokenIndex = position343, tokenIndex343
						if buffer[position] != rune('(') {
							goto l340
						}
						position++
					}
				l343:
					position, tokenIndex = position342, tokenIndex342
				}
				add(rulelaNumberOrLeftParen, position341)
			}
			return true
		l340:
			position, tokenIndex = position340, tokenIndex340
			return false
		},
		/* 27 eDice2 <- <((('p' / 'P') laNumberOrLeftParen eDice3 Action70) / (('p' / 'P') Action71) / eDice3)> */
		func() bool {
			position345, tokenIndex345 := position, tokenIndex
			{
				position346 := position
				{
					position347, tokenIndex347 := position, tokenIndex
					{
						position349, tokenIndex349 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l350
						}
						position++
						goto l349
					l350:
						position, tokenIndex = position349, tokenIndex349
						if buffer[position] != rune('P') {
							goto l348
						}
						position++
					}
				l349:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l348
					}
					if !_rules[ruleeDice3]() {
						goto l348
					}
					{
						add(ruleAction70, position)
					}
					goto l347
				l348:
					position, tokenIndex = position347, tokenIndex347
					{
						position353, tokenIndex353 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l354
						}
						position++
						goto l353
					l354:
						position, tokenIndex = position353, tokenIndex353
						if buffer[position] != rune('P') {
							goto l352
						}
						position++
					}
				l353:
					{
						add(ruleAction71, position)
					}
					goto l347
				l352:
					position, tokenIndex = position347, tokenIndex347
					if !_rules[ruleeDice3]() {
						goto l345
					}
				}
			l347:
				add(ruleeDice2, position346)
			}
			return true
		l345:
			position, tokenIndex = position345, tokenIndex345
			return false
		},
		/* 28 eDice3 <- <((('b' / 'B') laNumberOrLeftParen value Action72) / (('b' / 'B') Action73) / eDice4)> */
		func() bool {
			position356, tokenIndex356 := position, tokenIndex
			{
				position357 := position
				{
					position358, tokenIndex358 := position, tokenIndex
					{
						position360, tokenIndex360 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l361
						}
						position++
						goto l360
					l361:
						position, tokenIndex = position360, tokenIndex360
						if buffer[position] != rune('B') {
							goto l359
						}
						position++
					}
				l360:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l359
					}
					if !_rules[rulevalue]() {
						goto l359
					}
					{
						add(ruleAction72, position)
					}
					goto l358
				l359:
					position, tokenIndex = position358, tokenIndex358
					{
						position364, tokenIndex364 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l365
						}
						position++
						goto l364
					l365:
						position, tokenIndex = position364, tokenIndex364
						if buffer[position] != rune('B') {
							goto l363
						}
						position++
					}
				l364:
					{
						add(ruleAction73, position)
					}
					goto l358
				l363:
					position, tokenIndex = position358, tokenIndex358
					{
						position367 := position
						{
							position368, tokenIndex368 := position, tokenIndex
							{
								position370, tokenIndex370 := position, tokenIndex
								if buffer[position] != rune('f') {
									goto l371
								}
								position++
								goto l370
							l371:
								position, tokenIndex = position370, tokenIndex370
								if buffer[position] != rune('F') {
									goto l369
								}
								position++
							}
						l370:
							if !_rules[rulesp]() {
								goto l369
							}
							{
								add(ruleAction74, position)
							}
							goto l368
						l369:
							position, tokenIndex = position368, tokenIndex368
							if !_rules[rulevalue]() {
								goto l356
							}
						}
					l368:
						add(ruleeDice4, position367)
					}
				}
			l358:
				add(ruleeDice3, position357)
			}
			return true
		l356:
			position, tokenIndex = position356, tokenIndex356
			return false
		},
		/* 29 eDice4 <- <((('f' / 'F') sp Action74) / value)> */
		nil,
		/* 30 value <- <(number / ('t' 'h' 'i' 's' sp '.' sp identifier sp Action75) / ('i' 'n' 't' '(' sp e0 sp ')' sp Action76) / ('s' 't' 'r' '(' sp e0 sp ')' sp Action77) / assign_expr / (identifier Action78) / sub / fstring)> */
		func() bool {
			position374, tokenIndex374 := position, tokenIndex
			{
				position375 := position
				{
					position376, tokenIndex376 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l377
					}
					goto l376
				l377:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('t') {
						goto l378
					}
					position++
					if buffer[position] != rune('h') {
						goto l378
					}
					position++
					if buffer[position] != rune('i') {
						goto l378
					}
					position++
					if buffer[position] != rune('s') {
						goto l378
					}
					position++
					if !_rules[rulesp]() {
						goto l378
					}
					if buffer[position] != rune('.') {
						goto l378
					}
					position++
					if !_rules[rulesp]() {
						goto l378
					}
					if !_rules[ruleidentifier]() {
						goto l378
					}
					if !_rules[rulesp]() {
						goto l378
					}
					{
						add(ruleAction75, position)
					}
					goto l376
				l378:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('i') {
						goto l380
					}
					position++
					if buffer[position] != rune('n') {
						goto l380
					}
					position++
					if buffer[position] != rune('t') {
						goto l380
					}
					position++
					if buffer[position] != rune('(') {
						goto l380
					}
					position++
					if !_rules[rulesp]() {
						goto l380
					}
					if !_rules[rulee0]() {
						goto l380
					}
					if !_rules[rulesp]() {
						goto l380
					}
					if buffer[position] != rune(')') {
						goto l380
					}
					position++
					if !_rules[rulesp]() {
						goto l380
					}
					{
						add(ruleAction76, position)
					}
					goto l376
				l380:
					position, tokenIndex = position376, tokenIndex376
					if buffer[position] != rune('s') {
						goto l382
					}
					position++
					if buffer[position] != rune('t') {
						goto l382
					}
					position++
					if buffer[position] != rune('r') {
						goto l382
					}
					position++
					if buffer[position] != rune('(') {
						goto l382
					}
					position++
					if !_rules[rulesp]() {
						goto l382
					}
					if !_rules[rulee0]() {
						goto l382
					}
					if !_rules[rulesp]() {
						goto l382
					}
					if buffer[position] != rune(')') {
						goto l382
					}
					position++
					if !_rules[rulesp]() {
						goto l382
					}
					{
						add(ruleAction77, position)
					}
					goto l376
				l382:
					position, tokenIndex = position376, tokenIndex376
					if !_rules[ruleassign_expr]() {
						goto l384
					}
					goto l376
				l384:
					position, tokenIndex = position376, tokenIndex376
					if !_rules[ruleidentifier]() {
						goto l385
					}
					{
						add(ruleAction78, position)
					}
					goto l376
				l385:
					position, tokenIndex = position376, tokenIndex376
					{
						position388 := position
						{
							position389 := position
							if buffer[position] != rune('(') {
								goto l387
							}
							position++
							if !_rules[rulesp]() {
								goto l387
							}
							add(ruleopen, position389)
						}
						if !_rules[rulee0]() {
							goto l387
						}
						{
							position390 := position
							if buffer[position] != rune(')') {
								goto l387
							}
							position++
							if !_rules[rulesp]() {
								goto l387
							}
							add(ruleclose, position390)
						}
						add(rulesub, position388)
					}
					goto l376
				l387:
					position, tokenIndex = position376, tokenIndex376
					{
						position391 := position
						{
							switch buffer[position] {
							case '\'':
								if buffer[position] != rune('\'') {
									goto l374
								}
								position++
								{
									add(ruleAction94, position)
								}
								{
									position394 := position
								l395:
									{
										position396, tokenIndex396 := position, tokenIndex
										{
											position397 := position
											{
												position398 := position
												{
													position401, tokenIndex401 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l402
													}
													goto l401
												l402:
													position, tokenIndex = position401, tokenIndex401
													{
														position403, tokenIndex403 := position, tokenIndex
														{
															switch buffer[position] {
															case '\r':
																if buffer[position] != rune('\r') {
																	goto l403
																}
																position++
															case '\n':
																if buffer[position] != rune('\n') {
																	goto l403
																}
																position++
															case '\\':
																if buffer[position] != rune('\\') {
																	goto l403
																}
																position++
															default:
																if buffer[position] != rune('\'') {
																	goto l403
																}
																position++
															}
														}

														goto l396
													l403:
														position, tokenIndex = position403, tokenIndex403
													}
													if !matchDot() {
														goto l396
													}
												}
											l401:
											l399:
												{
													position400, tokenIndex400 := position, tokenIndex
													{
														position405, tokenIndex405 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l406
														}
														goto l405
													l406:
														position, tokenIndex = position405, tokenIndex405
														{
															position407, tokenIndex407 := position, tokenIndex
															{
																switch buffer[position] {
																case '\r':
																	if buffer[position] != rune('\r') {
																		goto l407
																	}
																	position++
																case '\n':
																	if buffer[position] != rune('\n') {
																		goto l407
																	}
																	position++
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l407
																	}
																	position++
																default:
																	if buffer[position] != rune('\'') {
																		goto l407
																	}
																	position++
																}
															}

															goto l400
														l407:
															position, tokenIndex = position407, tokenIndex407
														}
														if !matchDot() {
															goto l400
														}
													}
												l405:
													goto l399
												l400:
													position, tokenIndex = position400, tokenIndex400
												}
												add(rulePegText, position398)
											}
											{
												add(ruleAction83, position)
											}
											add(rulestrPart3, position397)
										}
										goto l395
									l396:
										position, tokenIndex = position396, tokenIndex396
									}
									add(rulePegText, position394)
								}
								if buffer[position] != rune('\'') {
									goto l374
								}
								position++
								{
									add(ruleAction95, position)
								}
							case '"':
								if buffer[position] != rune('"') {
									goto l374
								}
								position++
								{
									add(ruleAction92, position)
								}
								{
									position412 := position
								l413:
									{
										position414, tokenIndex414 := position, tokenIndex
										{
											position415 := position
											{
												position416 := position
												{
													position419, tokenIndex419 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l420
													}
													goto l419
												l420:
													position, tokenIndex = position419, tokenIndex419
													{
														position421, tokenIndex421 := position, tokenIndex
														{
															switch buffer[position] {
															case '\r':
																if buffer[position] != rune('\r') {
																	goto l421
																}
																position++
															case '\n':
																if buffer[position] != rune('\n') {
																	goto l421
																}
																position++
															case '\\':
																if buffer[position] != rune('\\') {
																	goto l421
																}
																position++
															default:
																if buffer[position] != rune('"') {
																	goto l421
																}
																position++
															}
														}

														goto l414
													l421:
														position, tokenIndex = position421, tokenIndex421
													}
													if !matchDot() {
														goto l414
													}
												}
											l419:
											l417:
												{
													position418, tokenIndex418 := position, tokenIndex
													{
														position423, tokenIndex423 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l424
														}
														goto l423
													l424:
														position, tokenIndex = position423, tokenIndex423
														{
															position425, tokenIndex425 := position, tokenIndex
															{
																switch buffer[position] {
																case '\r':
																	if buffer[position] != rune('\r') {
																		goto l425
																	}
																	position++
																case '\n':
																	if buffer[position] != rune('\n') {
																		goto l425
																	}
																	position++
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l425
																	}
																	position++
																default:
																	if buffer[position] != rune('"') {
																		goto l425
																	}
																	position++
																}
															}

															goto l418
														l425:
															position, tokenIndex = position425, tokenIndex425
														}
														if !matchDot() {
															goto l418
														}
													}
												l423:
													goto l417
												l418:
													position, tokenIndex = position418, tokenIndex418
												}
												add(rulePegText, position416)
											}
											{
												add(ruleAction82, position)
											}
											add(rulestrPart2, position415)
										}
										goto l413
									l414:
										position, tokenIndex = position414, tokenIndex414
									}
									add(rulePegText, position412)
								}
								if buffer[position] != rune('"') {
									goto l374
								}
								position++
								{
									add(ruleAction93, position)
								}
							case '\x1e':
								if buffer[position] != rune('\x1e') {
									goto l374
								}
								position++
								{
									add(ruleAction88, position)
								}
								{
									position430 := position
								l431:
									{
										position432, tokenIndex432 := position, tokenIndex
										{
											position433, tokenIndex433 := position, tokenIndex
											if buffer[position] != rune('{') {
												goto l434
											}
											position++
											if !_rules[rulesp]() {
												goto l434
											}
											if !_rules[rulee]() {
												goto l434
											}
											{
												add(ruleAction89, position)
											}
											if buffer[position] != rune('}') {
												goto l434
											}
											position++
											goto l433
										l434:
											position, tokenIndex = position433, tokenIndex433
											if buffer[position] != rune('{') {
												goto l436
											}
											position++
											if buffer[position] != rune('%') {
												goto l436
											}
											position++
											if !_rules[rulesp]() {
												goto l436
											}
											if !_rules[rulee]() {
												goto l436
											}
											{
												add(ruleAction90, position)
											}
											if buffer[position] != rune('%') {
												goto l436
											}
											position++
											if buffer[position] != rune('}') {
												goto l436
											}
											position++
											goto l433
										l436:
											position, tokenIndex = position433, tokenIndex433
											{
												position438 := position
												{
													position439 := position
													{
														position442, tokenIndex442 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l443
														}
														goto l442
													l443:
														position, tokenIndex = position442, tokenIndex442
														{
															position444, tokenIndex444 := position, tokenIndex
															{
																switch buffer[position] {
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l444
																	}
																	position++
																case '\x1e':
																	if buffer[position] != rune('\x1e') {
																		goto l444
																	}
																	position++
																default:
																	if buffer[position] != rune('{') {
																		goto l444
																	}
																	position++
																}
															}

															goto l432
														l444:
															position, tokenIndex = position444, tokenIndex444
														}
														if !matchDot() {
															goto l432
														}
													}
												l442:
												l440:
													{
														position441, tokenIndex441 := position, tokenIndex
														{
															position446, tokenIndex446 := position, tokenIndex
															if !_rules[ruleescape]() {
																goto l447
															}
															goto l446
														l447:
															position, tokenIndex = position446, tokenIndex446
															{
																position448, tokenIndex448 := position, tokenIndex
																{
																	switch buffer[position] {
																	case '\\':
																		if buffer[position] != rune('\\') {
																			goto l448
																		}
																		position++
																	case '\x1e':
																		if buffer[position] != rune('\x1e') {
																			goto l448
																		}
																		position++
																	default:
																		if buffer[position] != rune('{') {
																			goto l448
																		}
																		position++
																	}
																}

																goto l441
															l448:
																position, tokenIndex = position448, tokenIndex448
															}
															if !matchDot() {
																goto l441
															}
														}
													l446:
														goto l440
													l441:
														position, tokenIndex = position441, tokenIndex441
													}
													add(rulePegText, position439)
												}
												{
													add(ruleAction81, position)
												}
												add(rulestrPart1, position438)
											}
										}
									l433:
										goto l431
									l432:
										position, tokenIndex = position432, tokenIndex432
									}
									add(rulePegText, position430)
								}
								if buffer[position] != rune('\x1e') {
									goto l374
								}
								position++
								{
									add(ruleAction91, position)
								}
							default:
								if buffer[position] != rune('`') {
									goto l374
								}
								position++
								{
									add(ruleAction84, position)
								}
								{
									position453 := position
								l454:
									{
										position455, tokenIndex455 := position, tokenIndex
										{
											position456, tokenIndex456 := position, tokenIndex
											if buffer[position] != rune('{') {
												goto l457
											}
											position++
											if !_rules[rulesp]() {
												goto l457
											}
											if !_rules[rulee]() {
												goto l457
											}
											{
												add(ruleAction85, position)
											}
											if buffer[position] != rune('}') {
												goto l457
											}
											position++
											goto l456
										l457:
											position, tokenIndex = position456, tokenIndex456
											if buffer[position] != rune('{') {
												goto l459
											}
											position++
											if buffer[position] != rune('{') {
												goto l459
											}
											position++
											if !_rules[rulesp]() {
												goto l459
											}
											if !_rules[rulee]() {
												goto l459
											}
											{
												add(ruleAction86, position)
											}
											if buffer[position] != rune('}') {
												goto l459
											}
											position++
											if buffer[position] != rune('}') {
												goto l459
											}
											position++
											goto l456
										l459:
											position, tokenIndex = position456, tokenIndex456
											{
												position461 := position
												{
													position462 := position
													{
														position465, tokenIndex465 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l466
														}
														goto l465
													l466:
														position, tokenIndex = position465, tokenIndex465
														{
															position467, tokenIndex467 := position, tokenIndex
															{
																switch buffer[position] {
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l467
																	}
																	position++
																case '`':
																	if buffer[position] != rune('`') {
																		goto l467
																	}
																	position++
																default:
																	if buffer[position] != rune('{') {
																		goto l467
																	}
																	position++
																}
															}

															goto l455
														l467:
															position, tokenIndex = position467, tokenIndex467
														}
														if !matchDot() {
															goto l455
														}
													}
												l465:
												l463:
													{
														position464, tokenIndex464 := position, tokenIndex
														{
															position469, tokenIndex469 := position, tokenIndex
															if !_rules[ruleescape]() {
																goto l470
															}
															goto l469
														l470:
															position, tokenIndex = position469, tokenIndex469
															{
																position471, tokenIndex471 := position, tokenIndex
																{
																	switch buffer[position] {
																	case '\\':
																		if buffer[position] != rune('\\') {
																			goto l471
																		}
																		position++
																	case '`':
																		if buffer[position] != rune('`') {
																			goto l471
																		}
																		position++
																	default:
																		if buffer[position] != rune('{') {
																			goto l471
																		}
																		position++
																	}
																}

																goto l464
															l471:
																position, tokenIndex = position471, tokenIndex471
															}
															if !matchDot() {
																goto l464
															}
														}
													l469:
														goto l463
													l464:
														position, tokenIndex = position464, tokenIndex464
													}
													add(rulePegText, position462)
												}
												{
													add(ruleAction80, position)
												}
												add(rulestrPart, position461)
											}
										}
									l456:
										goto l454
									l455:
										position, tokenIndex = position455, tokenIndex455
									}
									add(rulePegText, position453)
								}
								if buffer[position] != rune('`') {
									goto l374
								}
								position++
								{
									add(ruleAction87, position)
								}
							}
						}

						if !_rules[rulesp]() {
							goto l374
						}
						add(rulefstring, position391)
					}
				}
			l376:
				add(rulevalue, position375)
			}
			return true
		l374:
			position, tokenIndex = position374, tokenIndex374
			return false
		},
		/* 31 number <- <(<[0-9]+> sp Action79)> */
		func() bool {
			position475, tokenIndex475 := position, tokenIndex
			{
				position476 := position
				{
					position477 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l475
					}
					position++
				l478:
					{
						position479, tokenIndex479 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l479
						}
						position++
						goto l478
					l479:
						position, tokenIndex = position479, tokenIndex479
					}
					add(rulePegText, position477)
				}
				if !_rules[rulesp]() {
					goto l475
				}
				{
					add(ruleAction79, position)
				}
				add(rulenumber, position476)
			}
			return true
		l475:
			position, tokenIndex = position475, tokenIndex475
			return false
		},
		/* 32 identifier <- <(<(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) . (!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .)*)> sp)> */
		func() bool {
			position481, tokenIndex481 := position, tokenIndex
			{
				position482 := position
				{
					position483 := position
					{
						position484, tokenIndex484 := position, tokenIndex
						{
							switch buffer[position] {
							case '\x1e':
								if buffer[position] != rune('\x1e') {
									goto l484
								}
								position++
							case '\r':
								if buffer[position] != rune('\r') {
									goto l484
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l484
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l484
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l484
								}
								position++
							case '~':
								if buffer[position] != rune('~') {
									goto l484
								}
								position++
							case '}':
								if buffer[position] != rune('}') {
									goto l484
								}
								position++
							case '|':
								if buffer[position] != rune('|') {
									goto l484
								}
								position++
							case '{':
								if buffer[position] != rune('{') {
									goto l484
								}
								position++
							case '`':
								if buffer[position] != rune('`') {
									goto l484
								}
								position++
							case '^':
								if buffer[position] != rune('^') {
									goto l484
								}
								position++
							case ']':
								if buffer[position] != rune(']') {
									goto l484
								}
								position++
							case '\\':
								if buffer[position] != rune('\\') {
									goto l484
								}
								position++
							case '[':
								if buffer[position] != rune('[') {
									goto l484
								}
								position++
							case '@':
								if buffer[position] != rune('@') {
									goto l484
								}
								position++
							case '?':
								if buffer[position] != rune('?') {
									goto l484
								}
								position++
							case '>':
								if buffer[position] != rune('>') {
									goto l484
								}
								position++
							case '=':
								if buffer[position] != rune('=') {
									goto l484
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l484
								}
								position++
							case ';':
								if buffer[position] != rune(';') {
									goto l484
								}
								position++
							case ':':
								if buffer[position] != rune(':') {
									goto l484
								}
								position++
							case '/':
								if buffer[position] != rune('/') {
									goto l484
								}
								position++
							case '+':
								if buffer[position] != rune('+') {
									goto l484
								}
								position++
							case '*':
								if buffer[position] != rune('*') {
									goto l484
								}
								position++
							case ')':
								if buffer[position] != rune(')') {
									goto l484
								}
								position++
							case '(':
								if buffer[position] != rune('(') {
									goto l484
								}
								position++
							case '\'':
								if buffer[position] != rune('\'') {
									goto l484
								}
								position++
							case '&':
								if buffer[position] != rune('&') {
									goto l484
								}
								position++
							case '%':
								if buffer[position] != rune('%') {
									goto l484
								}
								position++
							case '#':
								if buffer[position] != rune('#') {
									goto l484
								}
								position++
							case '"':
								if buffer[position] != rune('"') {
									goto l484
								}
								position++
							case '!':
								if buffer[position] != rune('!') {
									goto l484
								}
								position++
							case ',', '-', '.':
								if c := buffer[position]; c < rune(',') || c > rune('.') {
									goto l484
								}
								position++
							default:
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l484
								}
								position++
							}
						}

						goto l481
					l484:
						position, tokenIndex = position484, tokenIndex484
					}
					if !matchDot() {
						goto l481
					}
				l486:
					{
						position487, tokenIndex487 := position, tokenIndex
						{
							position488, tokenIndex488 := position, tokenIndex
							{
								switch buffer[position] {
								case '\x1e':
									if buffer[position] != rune('\x1e') {
										goto l488
									}
									position++
								case '\r':
									if buffer[position] != rune('\r') {
										goto l488
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l488
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l488
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l488
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l488
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l488
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l488
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l488
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l488
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l488
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l488
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l488
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l488
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l488
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l488
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l488
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l488
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l488
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l488
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l488
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l488
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l488
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l488
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l488
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l488
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l488
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l488
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l488
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l488
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l488
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l488
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l488
									}
									position++
								}
							}

							goto l487
						l488:
							position, tokenIndex = position488, tokenIndex488
						}
						if !matchDot() {
							goto l487
						}
						goto l486
					l487:
						position, tokenIndex = position487, tokenIndex487
					}
					add(rulePegText, position483)
				}
				if !_rules[rulesp]() {
					goto l481
				}
				add(ruleidentifier, position482)
			}
			return true
		l481:
			position, tokenIndex = position481, tokenIndex481
			return false
		},
		/* 33 sub <- <(open e0 close)> */
		nil,
		/* 34 add <- <(('+' / '＋') sp)> */
		func() bool {
			position491, tokenIndex491 := position, tokenIndex
			{
				position492 := position
				{
					position493, tokenIndex493 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l494
					}
					position++
					goto l493
				l494:
					position, tokenIndex = position493, tokenIndex493
					if buffer[position] != rune('＋') {
						goto l491
					}
					position++
				}
			l493:
				if !_rules[rulesp]() {
					goto l491
				}
				add(ruleadd, position492)
			}
			return true
		l491:
			position, tokenIndex = position491, tokenIndex491
			return false
		},
		/* 35 minus <- <(('-' / '－') sp)> */
		func() bool {
			position495, tokenIndex495 := position, tokenIndex
			{
				position496 := position
				{
					position497, tokenIndex497 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l498
					}
					position++
					goto l497
				l498:
					position, tokenIndex = position497, tokenIndex497
					if buffer[position] != rune('－') {
						goto l495
					}
					position++
				}
			l497:
				if !_rules[rulesp]() {
					goto l495
				}
				add(ruleminus, position496)
			}
			return true
		l495:
			position, tokenIndex = position495, tokenIndex495
			return false
		},
		/* 36 multiply <- <(('*' / '＊') sp)> */
		nil,
		/* 37 divide <- <(('/' / '／') sp)> */
		nil,
		/* 38 modulus <- <('%' sp)> */
		nil,
		/* 39 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 40 open <- <('(' sp)> */
		nil,
		/* 41 close <- <(')' sp)> */
		nil,
		/* 42 bitwiseOr <- <('|' sp)> */
		nil,
		/* 43 logicOr <- <('|' '|' sp)> */
		nil,
		/* 44 bitwiseAnd <- <(('&' / ('&' 'a' 'm' 'p' ';')) sp)> */
		nil,
		/* 45 logicAnd <- <((('&' '&') / ('&' 'a' 'm' 'p' ';' '&' 'a' 'm' 'p' ';')) sp)> */
		nil,
		/* 46 sp <- <((&('/') ('/' '/' (!'\n' .)*)) | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position510 := position
			l511:
				{
					position512, tokenIndex512 := position, tokenIndex
					{
						switch buffer[position] {
						case '/':
							if buffer[position] != rune('/') {
								goto l512
							}
							position++
							if buffer[position] != rune('/') {
								goto l512
							}
							position++
						l514:
							{
								position515, tokenIndex515 := position, tokenIndex
								{
									position516, tokenIndex516 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l516
									}
									position++
									goto l515
								l516:
									position, tokenIndex = position516, tokenIndex516
								}
								if !matchDot() {
									goto l515
								}
								goto l514
							l515:
								position, tokenIndex = position515, tokenIndex515
							}
						case '\r':
							if buffer[position] != rune('\r') {
								goto l512
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l512
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l512
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l512
							}
							position++
						}
					}

					goto l511
				l512:
					position, tokenIndex = position512, tokenIndex512
				}
				add(rulesp, position510)
			}
			return true
		},
		/* 47 lt <- <(('<' / '＜') sp)> */
		nil,
		/* 48 gt <- <(('>' / '＞') sp)> */
		nil,
		/* 49 le <- <((('<' '=') / ('＜' '＝')) sp)> */
		nil,
		/* 50 ge <- <((('>' '=') / ('＞' '＝')) sp)> */
		nil,
		/* 51 eq <- <((('=' '=') / ('＝' '＝')) sp)> */
		nil,
		/* 52 ne <- <((('!' '=') / ('！' '＝')) sp)> */
		nil,
		/* 53 strPart <- <(<(escape / (!((&('\\') '\\') | (&('`') '`') | (&('{') '{')) .))+> Action80)> */
		nil,
		/* 54 strPart1 <- <(<(escape / (!((&('\\') '\\') | (&('\x1e') '\x1e') | (&('{') '{')) .))+> Action81)> */
		nil,
		/* 55 strPart2 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('"') '"')) .))+> Action82)> */
		nil,
		/* 56 strPart3 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('\'') '\'')) .))+> Action83)> */
		nil,
		/* 57 fstring <- <(((&('\'') ('\'' Action94 <strPart3*> '\'' Action95)) | (&('"') ('"' Action92 <strPart2*> '"' Action93)) | (&('\x1e') ('\x1e' Action88 <(('{' sp e Action89 '}') / ('{' '%' sp e Action90 ('%' '}')) / strPart1)*> '\x1e' Action91)) | (&('`') ('`' Action84 <(('{' sp e Action85 '}') / ('{' '{' sp e Action86 ('}' '}')) / strPart)*> '`' Action87))) sp)> */
		nil,
		/* 58 escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		func() bool {
			position528, tokenIndex528 := position, tokenIndex
			{
				position529 := position
				if buffer[position] != rune('\\') {
					goto l528
				}
				position++
				{
					switch buffer[position] {
					case '\\':
						if buffer[position] != rune('\\') {
							goto l528
						}
						position++
					case '\'':
						if buffer[position] != rune('\'') {
							goto l528
						}
						position++
					case '"':
						if buffer[position] != rune('"') {
							goto l528
						}
						position++
					case 'r':
						if buffer[position] != rune('r') {
							goto l528
						}
						position++
					case 'f':
						if buffer[position] != rune('f') {
							goto l528
						}
						position++
					case 'n':
						if buffer[position] != rune('n') {
							goto l528
						}
						position++
					case 't':
						if buffer[position] != rune('t') {
							goto l528
						}
						position++
					default:
						if buffer[position] != rune('b') {
							goto l528
						}
						position++
					}
				}

				add(ruleescape, position529)
			}
			return true
		l528:
			position, tokenIndex = position528, tokenIndex528
			return false
		},
		/* 59 st_expr <- <(st_modify_multi_1 / st_assign_multi / st_modify_multi_2)> */
		nil,
		/* 60 est <- <((&'(' e0) / (!{p.flags.DisableBitwiseOp = true} e0 !{p.flags.DisableBitwiseOp = false}))> */
		func() bool {
			position532, tokenIndex532 := position, tokenIndex
			{
				position533 := position
				{
					position534, tokenIndex534 := position, tokenIndex
					{
						position536, tokenIndex536 := position, tokenIndex
						if buffer[position] != rune('(') {
							goto l535
						}
						position++
						position, tokenIndex = position536, tokenIndex536
					}
					if !_rules[rulee0]() {
						goto l535
					}
					goto l534
				l535:
					position, tokenIndex = position534, tokenIndex534
					p.flags.DisableBitwiseOp = true
					if !_rules[rulee0]() {
						goto l532
					}
					p.flags.DisableBitwiseOp = false
				}
			l534:
				add(ruleest, position533)
			}
			return true
		l532:
			position, tokenIndex = position532, tokenIndex532
			return false
		},
		/* 61 st_assign_multi <- <(st_assign sp ','? sp)+> */
		nil,
		/* 62 st_assign <- <((st_name2 sp (':' / '=') sp est Action96) / (st_name1 est Action97) / (st_name2r sp (':' / '=') sp est Action98) / (st_name1r est Action99) / ('&' st_name2 sp (':' / '=') sp Action100 <est> Action101) / ('&' st_name2r sp (':' / '=') sp Action102 <est> Action103))> */
		nil,
		/* 63 st_modify_multi_1 <- <(((st_name2 st_modify_rest1) / (st_name2r st_modify_rest1) / (st_name1 st_modify_rest) / (st_name1r st_modify_rest)) sp ','? sp st_modify_multi_rest)> */
		nil,
		/* 64 st_modify_rest1 <- <(sp (('+' '=' sp <e0> Action104) / ('-' '=' sp <e0> Action105)))> */
		func() bool {
			position540, tokenIndex540 := position, tokenIndex
			{
				position541 := position
				if !_rules[rulesp]() {
					goto l540
				}
				{
					position542, tokenIndex542 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l543
					}
					position++
					if buffer[position] != rune('=') {
						goto l543
					}
					position++
					if !_rules[rulesp]() {
						goto l543
					}
					{
						position544 := position
						if !_rules[rulee0]() {
							goto l543
						}
						add(rulePegText, position544)
					}
					{
						add(ruleAction104, position)
					}
					goto l542
				l543:
					position, tokenIndex = position542, tokenIndex542
					if buffer[position] != rune('-') {
						goto l540
					}
					position++
					if buffer[position] != rune('=') {
						goto l540
					}
					position++
					if !_rules[rulesp]() {
						goto l540
					}
					{
						position546 := position
						if !_rules[rulee0]() {
							goto l540
						}
						add(rulePegText, position546)
					}
					{
						add(ruleAction105, position)
					}
				}
			l542:
				add(rulest_modify_rest1, position541)
			}
			return true
		l540:
			position, tokenIndex = position540, tokenIndex540
			return false
		},
		/* 65 st_modify_multi_2 <- <(st_modify2 sp ','? sp st_modify_multi_rest)> */
		nil,
		/* 66 st_modify_multi_rest <- <(st_modify2 sp ','? sp)*> */
		func() bool {
			{
				position550 := position
			l551:
				{
					position552, tokenIndex552 := position, tokenIndex
					if !_rules[rulest_modify2]() {
						goto l552
					}
					if !_rules[rulesp]() {
						goto l552
					}
					{
						position553, tokenIndex553 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l553
						}
						position++
						goto l554
					l553:
						position, tokenIndex = position553, tokenIndex553
					}
				l554:
					if !_rules[rulesp]() {
						goto l552
					}
					goto l551
				l552:
					position, tokenIndex = position552, tokenIndex552
				}
				add(rulest_modify_multi_rest, position550)
			}
			return true
		},
		/* 67 st_modify2 <- <((st_name2 st_modify_rest) / (st_name2r st_modify_rest))> */
		func() bool {
			position555, tokenIndex555 := position, tokenIndex
			{
				position556 := position
				{
					position557, tokenIndex557 := position, tokenIndex
					if !_rules[rulest_name2]() {
						goto l558
					}
					if !_rules[rulest_modify_rest]() {
						goto l558
					}
					goto l557
				l558:
					position, tokenIndex = position557, tokenIndex557
					if !_rules[rulest_name2r]() {
						goto l555
					}
					if !_rules[rulest_modify_rest]() {
						goto l555
					}
				}
			l557:
				add(rulest_modify2, position556)
			}
			return true
		l555:
			position, tokenIndex = position555, tokenIndex555
			return false
		},
		/* 68 st_modify_rest <- <(sp (('+' '='? sp <e0> Action106) / (&'-' sp <e0> Action107) / ('-' '='? sp <e0> Action108)))> */
		func() bool {
			position559, tokenIndex559 := position, tokenIndex
			{
				position560 := position
				if !_rules[rulesp]() {
					goto l559
				}
				{
					position561, tokenIndex561 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l562
					}
					position++
					{
						position563, tokenIndex563 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l563
						}
						position++
						goto l564
					l563:
						position, tokenIndex = position563, tokenIndex563
					}
				l564:
					if !_rules[rulesp]() {
						goto l562
					}
					{
						position565 := position
						if !_rules[rulee0]() {
							goto l562
						}
						add(rulePegText, position565)
					}
					{
						add(ruleAction106, position)
					}
					goto l561
				l562:
					position, tokenIndex = position561, tokenIndex561
					{
						position568, tokenIndex568 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l567
						}
						position++
						position, tokenIndex = position568, tokenIndex568
					}
					if !_rules[rulesp]() {
						goto l567
					}
					{
						position569 := position
						if !_rules[rulee0]() {
							goto l567
						}
						add(rulePegText, position569)
					}
					{
						add(ruleAction107, position)
					}
					goto l561
				l567:
					position, tokenIndex = position561, tokenIndex561
					if buffer[position] != rune('-') {
						goto l559
					}
					position++
					{
						position571, tokenIndex571 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l571
						}
						position++
						goto l572
					l571:
						position, tokenIndex = position571, tokenIndex571
					}
				l572:
					if !_rules[rulesp]() {
						goto l559
					}
					{
						position573 := position
						if !_rules[rulee0]() {
							goto l559
						}
						add(rulePegText, position573)
					}
					{
						add(ruleAction108, position)
					}
				}
			l561:
				add(rulest_modify_rest, position560)
			}
			return true
		l559:
			position, tokenIndex = position559, tokenIndex559
			return false
		},
		/* 69 st_name1 <- <(<(id_ch0+ ':' id_ch0+)> Action109)> */
		func() bool {
			position575, tokenIndex575 := position, tokenIndex
			{
				position576 := position
				{
					position577 := position
					if !_rules[ruleid_ch0]() {
						goto l575
					}
				l578:
					{
						position579, tokenIndex579 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l579
						}
						goto l578
					l579:
						position, tokenIndex = position579, tokenIndex579
					}
					if buffer[position] != rune(':') {
						goto l575
					}
					position++
					if !_rules[ruleid_ch0]() {
						goto l575
					}
				l580:
					{
						position581, tokenIndex581 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l581
						}
						goto l580
					l581:
						position, tokenIndex = position581, tokenIndex581
					}
					add(rulePegText, position577)
				}
				{
					add(ruleAction109, position)
				}
				add(rulest_name1, position576)
			}
			return true
		l575:
			position, tokenIndex = position575, tokenIndex575
			return false
		},
		/* 70 st_name1r <- <(<id_ch0+> Action110)> */
		func() bool {
			position583, tokenIndex583 := position, tokenIndex
			{
				position584 := position
				{
					position585 := position
					if !_rules[ruleid_ch0]() {
						goto l583
					}
				l586:
					{
						position587, tokenIndex587 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l587
						}
						goto l586
					l587:
						position, tokenIndex = position587, tokenIndex587
					}
					add(rulePegText, position585)
				}
				{
					add(ruleAction110, position)
				}
				add(rulest_name1r, position584)
			}
			return true
		l583:
			position, tokenIndex = position583, tokenIndex583
			return false
		},
		/* 71 st_name2 <- <(<(id_ch0 id_ch* (':' id_ch+))> Action111)> */
		func() bool {
			position589, tokenIndex589 := position, tokenIndex
			{
				position590 := position
				{
					position591 := position
					if !_rules[ruleid_ch0]() {
						goto l589
					}
				l592:
					{
						position593, tokenIndex593 := position, tokenIndex
						if !_rules[ruleid_ch]() {
							goto l593
						}
						goto l592
					l593:
						position, tokenIndex = position593, tokenIndex593
					}
					if buffer[position] != rune(':') {
						goto l589
					}
					position++
					if !_rules[ruleid_ch]() {
						goto l589
					}
				l594:
					{
						position595, tokenIndex595 := position, tokenIndex
						if !_rules[ruleid_ch]() {
							goto l595
						}
						goto l594
					l595:
						position, tokenIndex = position595, tokenIndex595
					}
					add(rulePegText, position591)
				}
				{
					add(ruleAction111, position)
				}
				add(rulest_name2, position590)
			}
			return true
		l589:
			position, tokenIndex = position589, tokenIndex589
			return false
		},
		/* 72 st_name2r <- <(<(id_ch0 id_ch*)> Action112)> */
		func() bool {
			position597, tokenIndex597 := position, tokenIndex
			{
				position598 := position
				{
					position599 := position
					if !_rules[ruleid_ch0]() {
						goto l597
					}
				l600:
					{
						position601, tokenIndex601 := position, tokenIndex
						if !_rules[ruleid_ch]() {
							goto l601
						}
						goto l600
					l601:
						position, tokenIndex = position601, tokenIndex601
					}
					add(rulePegText, position599)
				}
				{
					add(ruleAction112, position)
				}
				add(rulest_name2r, position598)
			}
			return true
		l597:
			position, tokenIndex = position597, tokenIndex597
			return false
		},
		/* 73 id_ch0 <- <(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) .)> */
		func() bool {
			position603, tokenIndex603 := position, tokenIndex
			{
				position604 := position
				{
					position605, tokenIndex605 := position, tokenIndex
					{
						switch buffer[position] {
						case '\x1e':
							if buffer[position] != rune('\x1e') {
								goto l605
							}
							position++
						case '\r':
							if buffer[position] != rune('\r') {
								goto l605
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l605
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l605
							}
							position++
						case ' ':
							if buffer[position] != rune(' ') {
								goto l605
							}
							position++
						case '~':
							if buffer[position] != rune('~') {
								goto l605
							}
							position++
						case '}':
							if buffer[position] != rune('}') {
								goto l605
							}
							position++
						case '|':
							if buffer[position] != rune('|') {
								goto l605
							}
							position++
						case '{':
							if buffer[position] != rune('{') {
								goto l605
							}
							position++
						case '`':
							if buffer[position] != rune('`') {
								goto l605
							}
							position++
						case '^':
							if buffer[position] != rune('^') {
								goto l605
							}
							position++
						case ']':
							if buffer[position] != rune(']') {
								goto l605
							}
							position++
						case '\\':
							if buffer[position] != rune('\\') {
								goto l605
							}
							position++
						case '[':
							if buffer[position] != rune('[') {
								goto l605
							}
							position++
						case '@':
							if buffer[position] != rune('@') {
								goto l605
							}
							position++
						case '?':
							if buffer[position] != rune('?') {
								goto l605
							}
							position++
						case '>':
							if buffer[position] != rune('>') {
								goto l605
							}
							position++
						case '=':
							if buffer[position] != rune('=') {
								goto l605
							}
							position++
						case '<':
							if buffer[position] != rune('<') {
								goto l605
							}
							position++
						case ';':
							if buffer[position] != rune(';') {
								goto l605
							}
							position++
						case ':':
							if buffer[position] != rune(':') {
								goto l605
							}
							position++
						case '+':
							if buffer[position] != rune('+') {
								goto l605
							}
							position++
						case '*':
							if buffer[position] != rune('*') {
								goto l605
							}
							position++
						case ')':
							if buffer[position] != rune(')') {
								goto l605
							}
							position++
						case '(':
							if buffer[position] != rune('(') {
								goto l605
							}
							position++
						case '\'':
							if buffer[position] != rune('\'') {
								goto l605
							}
							position++
						case '&':
							if buffer[position] != rune('&') {
								goto l605
							}
							position++
						case '%':
							if buffer[position] != rune('%') {
								goto l605
							}
							position++
						case '$':
							if buffer[position] != rune('$') {
								goto l605
							}
							position++
						case '#':
							if buffer[position] != rune('#') {
								goto l605
							}
							position++
						case '"':
							if buffer[position] != rune('"') {
								goto l605
							}
							position++
						case '!':
							if buffer[position] != rune('!') {
								goto l605
							}
							position++
						case ',', '-', '.':
							if c := buffer[position]; c < rune(',') || c > rune('.') {
								goto l605
							}
							position++
						default:
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l605
							}
							position++
						}
					}

					goto l603
				l605:
					position, tokenIndex = position605, tokenIndex605
				}
				if !matchDot() {
					goto l603
				}
				add(ruleid_ch0, position604)
			}
			return true
		l603:
			position, tokenIndex = position603, tokenIndex603
			return false
		},
		/* 74 id_ch <- <(id_ch0 / [0-9])> */
		func() bool {
			position607, tokenIndex607 := position, tokenIndex
			{
				position608 := position
				{
					position609, tokenIndex609 := position, tokenIndex
					if !_rules[ruleid_ch0]() {
						goto l610
					}
					goto l609
				l610:
					position, tokenIndex = position609, tokenIndex609
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l607
					}
					position++
				}
			l609:
				add(ruleid_ch, position608)
			}
			return true
		l607:
			position, tokenIndex = position607, tokenIndex607
			return false
		},
		/* 76 Action0 <- <{ p.AddOperator(TypeHalt) }> */
		nil,
		/* 77 Action1 <- <{ p.AddOperator(TypeClearDetail) }> */
		nil,
		/* 78 Action2 <- <{ p.AddValueStr(string(text)) }> */
		nil,
		/* 79 Action3 <- <{ p.AddStore() }> */
		nil,
		/* 80 Action4 <- <{p.AddOperator(TypePop)}> */
		nil,
		/* 81 Action5 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 82 Action6 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset(); }> */
		nil,
		/* 83 Action7 <- <{ p.PopAndSetOffset() }> */
		nil,
		/* 84 Action8 <- <{ p.AddValueStr(""); }> */
		nil,
		/* 85 Action9 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 86 Action10 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset(); }> */
		nil,
		/* 87 Action11 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 88 Action12 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset() }> */
		nil,
		/* 89 Action13 <- <{ p.PopAndSetOffset() }> */
		nil,
		/* 90 Action14 <- <{ p.CounterPush() }> */
		nil,
		/* 91 Action15 <- <{p.CounterAdd(1)}> */
		nil,
		/* 92 Action16 <- <{ p.AddValueStr(""); limit:=p.CounterPop()+1; for i:=int64(0); i<limit; i++ { p.PopAndSetOffset() } }> */
		nil,
		/* 93 Action17 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 94 Action18 <- <{ p.AddOperator(TypeBitwiseOr) }> */
		nil,
		/* 95 Action19 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 96 Action20 <- <{ p.AddOperator(TypeBitwiseAnd) }> */
		nil,
		/* 97 Action21 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 98 Action22 <- <{ p.AddOperator(TypeCompLT) }> */
		nil,
		/* 99 Action23 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 100 Action24 <- <{ p.AddOperator(TypeCompLE) }> */
		nil,
		/* 101 Action25 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 102 Action26 <- <{ p.AddOperator(TypeCompEQ) }> */
		nil,
		/* 103 Action27 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 104 Action28 <- <{ p.AddOperator(TypeCompNE) }> */
		nil,
		/* 105 Action29 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 106 Action30 <- <{ p.AddOperator(TypeCompGE) }> */
		nil,
		/* 107 Action31 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 108 Action32 <- <{ p.AddOperator(TypeCompGT) }> */
		nil,
		/* 109 Action33 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 110 Action34 <- <{ p.AddOperator(TypeAdd) }> */
		nil,
		/* 111 Action35 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 112 Action36 <- <{ p.AddOperator(TypeSubtract) }> */
		nil,
		/* 113 Action37 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 114 Action38 <- <{ p.AddOperator(TypeMultiply) }> */
		nil,
		/* 115 Action39 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 116 Action40 <- <{ p.AddOperator(TypeDivide) }> */
		nil,
		/* 117 Action41 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 118 Action42 <- <{ p.AddOperator(TypeModulus) }> */
		nil,
		/* 119 Action43 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 120 Action44 <- <{ p.AddOperator(TypeExponentiation) }> */
		nil,
		/* 121 Action45 <- <{ p.AddOperator(TypeNegation) }> */
		nil,
		/* 122 Action46 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetK)}> */
		nil,
		/* 123 Action47 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetQ)}> */
		nil,
		/* 124 Action48 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 125 Action49 <- <{ p.AddOperator(TypeDiceSetQ) }> */
		nil,
		/* 126 Action50 <- <{ p.AddOperatorWithInt64(TypeDiceSetK, 1) }> */
		nil,
		/* 127 Action51 <- <{ p.AddOperatorWithInt64(TypeDiceSetQ, 1) }> */
		nil,
		/* 128 Action52 <- <{ p.AddOperator(TypeWodSetInit) }> */
		nil,
		/* 129 Action53 <- <{ p.AddOperator(TypeWodSetPool) }> */
		nil,
		/* 130 Action54 <- <{ p.AddOperator(TypeDCSetInit) }> */
		nil,
		/* 131 Action55 <- <{ p.AddOperator(TypeDCSetPool) }> */
		nil,
		/* 132 Action56 <- <{ p.AddValue("2"); p.AddLeftValueMark() }> */
		nil,
		/* 133 Action57 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 134 Action58 <- <{ p.AddValue("1"); p.AddLeftValueMark() }> */
		nil,
		/* 135 Action59 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 136 Action60 <- <{ p.AddValue("2"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 137 Action61 <- <{ p.AddValue("1"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 138 Action62 <- <{ p.AddOperator(TypeWodSetPoints) }> */
		nil,
		/* 139 Action63 <- <{ p.AddOperator(TypeWodSetThreshold) }> */
		nil,
		/* 140 Action64 <- <{ p.AddOperator(TypeWodSetThresholdQ) }> */
		nil,
		/* 141 Action65 <- <{ p.AddOperator(TypeDiceWod) }> */
		nil,
		/* 142 Action66 <- <{ p.AddOperator(TypeDCSetPoints) }> */
		nil,
		/* 143 Action67 <- <{ p.AddOperator(TypeDiceDC) }> */
		nil,
		/* 144 Action68 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 145 Action69 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 146 Action70 <- <{ p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 147 Action71 <- <{ p.AddValue("1"); p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 148 Action72 <- <{ p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 149 Action73 <- <{ p.AddValue("1"); p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 150 Action74 <- <{ p.AddValue("0"); p.AddValue("0"); p.AddOperator(TypeDiceFate) }> */
		nil,
		/* 151 Action75 <- <{ p.AddLoadVarnameForThis(text) }> */
		nil,
		/* 152 Action76 <- <{ p.WriteCode(TypeConvertInt, 0, "") }> */
		nil,
		/* 153 Action77 <- <{ p.WriteCode(TypeConvertStr, 0, "") }> */
		nil,
		/* 154 Action78 <- <{ p.AddLoadVarname(string(text)) }> */
		nil,
		nil,
		/* 156 Action79 <- <{ p.AddValue(string(text)) }> */
		nil,
		/* 157 Action80 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 158 Action81 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 159 Action82 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 160 Action83 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 161 Action84 <- <{ p.CounterPush() }> */
		nil,
		/* 162 Action85 <- <{p.CounterAdd(1)}> */
		nil,
		/* 163 Action86 <- <{p.CounterAdd(1)}> */
		nil,
		/* 164 Action87 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 165 Action88 <- <{ p.CounterPush() }> */
		nil,
		/* 166 Action89 <- <{p.CounterAdd(1)}> */
		nil,
		/* 167 Action90 <- <{p.CounterAdd(1)}> */
		nil,
		/* 168 Action91 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 169 Action92 <- <{ p.CounterPush() }> */
		nil,
		/* 170 Action93 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 171 Action94 <- <{ p.CounterPush() }> */
		nil,
		/* 172 Action95 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 173 Action96 <- <{ p.AddStName() }> */
		nil,
		/* 174 Action97 <- <{ p.AddStName() }> */
		nil,
		/* 175 Action98 <- <{ p.AddStName() }> */
		nil,
		/* 176 Action99 <- <{ p.AddStName() }> */
		nil,
		/* 177 Action100 <- <{ p.CodePush() }> */
		nil,
		/* 178 Action101 <- <{ p.CodePop(); p.AddStoreComputed(text); p.AddStName() }> */
		nil,
		/* 179 Action102 <- <{ p.CodePush() }> */
		nil,
		/* 180 Action103 <- <{ p.CodePop(); p.AddStoreComputed(text); p.AddStName() }> */
		nil,
		/* 181 Action104 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 182 Action105 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 183 Action106 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 184 Action107 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 185 Action108 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 186 Action109 <- <{ p.AddValueStr(text) }> */
		nil,
		/* 187 Action110 <- <{ p.AddValueStr(text) }> */
		nil,
		/* 188 Action111 <- <{ p.AddValueStr(text) }> */
		nil,
		/* 189 Action112 <- <{ p.AddValueStr(text) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
