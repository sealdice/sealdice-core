package dice

// Code generated by peg -inline dice/roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleeBase
	rulee
	ruleeOne
	ruleassign_expr
	rules0
	ruleblock
	rulestmtElse
	rulestmtIf
	rulee0
	ruleeSimpleSwitch
	ruleeTernary
	ruleeBitwise
	ruleeBitwise1
	ruleeComp
	rulee1
	rulee2
	rulee3
	rulee4
	rulee5
	ruledndDiceSuffix
	rulekqDiceOp
	rule_dnumber
	rulesimpleDice2
	rulewodDicePool
	ruledoubleCrossDicePool
	ruleeDice
	rulelaNumberOrLeftParen
	ruleeDice2
	ruleeDice2x
	ruleeDice3
	ruleeDice4
	rulevalue
	rulenumber
	ruleidentifier
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulebitwiseOr
	rulelogicOr
	rulebitwiseAnd
	rulelogicAnd
	rulesp
	rulelt
	rulegt
	rulele
	rulege
	ruleeq
	rulene
	rulestrPart
	rulestrPart1
	rulestrPart2
	rulestrPart3
	rulefstring
	ruleescape
	rulest_expr
	ruleest
	rulest_assign_multi
	rulest_assign
	rulest_modify_multi_1
	rulest_modify_rest1
	rulest_modify_multi_2
	rulest_modify_multi_rest
	rulest_modify2
	rulest_modify_rest
	rulest_name1
	rulest_name1r
	rulest_name2
	rulest_name2r
	ruleid_ch0
	ruleid_ch
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
	ruleAction49
	ruleAction50
	ruleAction51
	ruleAction52
	ruleAction53
	ruleAction54
	ruleAction55
	ruleAction56
	ruleAction57
	ruleAction58
	ruleAction59
	ruleAction60
	ruleAction61
	ruleAction62
	ruleAction63
	ruleAction64
	ruleAction65
	ruleAction66
	ruleAction67
	ruleAction68
	ruleAction69
	ruleAction70
	ruleAction71
	ruleAction72
	ruleAction73
	ruleAction74
	ruleAction75
	ruleAction76
	ruleAction77
	ruleAction78
	ruleAction79
	rulePegText
	ruleAction80
	ruleAction81
	ruleAction82
	ruleAction83
	ruleAction84
	ruleAction85
	ruleAction86
	ruleAction87
	ruleAction88
	ruleAction89
	ruleAction90
	ruleAction91
	ruleAction92
	ruleAction93
	ruleAction94
	ruleAction95
	ruleAction96
	ruleAction97
	ruleAction98
	ruleAction99
	ruleAction100
	ruleAction101
	ruleAction102
	ruleAction103
	ruleAction104
	ruleAction105
	ruleAction106
	ruleAction107
	ruleAction108
	ruleAction109
	ruleAction110
	ruleAction111
	ruleAction112
	ruleAction113
	ruleAction114
)

var rul3s = [...]string{
	"Unknown",
	"eBase",
	"e",
	"eOne",
	"assign_expr",
	"s0",
	"block",
	"stmtElse",
	"stmtIf",
	"e0",
	"eSimpleSwitch",
	"eTernary",
	"eBitwise",
	"eBitwise1",
	"eComp",
	"e1",
	"e2",
	"e3",
	"e4",
	"e5",
	"dndDiceSuffix",
	"kqDiceOp",
	"_dnumber",
	"simpleDice2",
	"wodDicePool",
	"doubleCrossDicePool",
	"eDice",
	"laNumberOrLeftParen",
	"eDice2",
	"eDice2x",
	"eDice3",
	"eDice4",
	"value",
	"number",
	"identifier",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"bitwiseOr",
	"logicOr",
	"bitwiseAnd",
	"logicAnd",
	"sp",
	"lt",
	"gt",
	"le",
	"ge",
	"eq",
	"ne",
	"strPart",
	"strPart1",
	"strPart2",
	"strPart3",
	"fstring",
	"escape",
	"st_expr",
	"est",
	"st_assign_multi",
	"st_assign",
	"st_modify_multi_1",
	"st_modify_rest1",
	"st_modify_multi_2",
	"st_modify_multi_rest",
	"st_modify2",
	"st_modify_rest",
	"st_name1",
	"st_name1r",
	"st_name2",
	"st_name2r",
	"id_ch0",
	"id_ch",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
	"Action49",
	"Action50",
	"Action51",
	"Action52",
	"Action53",
	"Action54",
	"Action55",
	"Action56",
	"Action57",
	"Action58",
	"Action59",
	"Action60",
	"Action61",
	"Action62",
	"Action63",
	"Action64",
	"Action65",
	"Action66",
	"Action67",
	"Action68",
	"Action69",
	"Action70",
	"Action71",
	"Action72",
	"Action73",
	"Action74",
	"Action75",
	"Action76",
	"Action77",
	"Action78",
	"Action79",
	"PegText",
	"Action80",
	"Action81",
	"Action82",
	"Action83",
	"Action84",
	"Action85",
	"Action86",
	"Action87",
	"Action88",
	"Action89",
	"Action90",
	"Action91",
	"Action92",
	"Action93",
	"Action94",
	"Action95",
	"Action96",
	"Action97",
	"Action98",
	"Action99",
	"Action100",
	"Action101",
	"Action102",
	"Action103",
	"Action104",
	"Action105",
	"Action106",
	"Action107",
	"Action108",
	"Action109",
	"Action110",
	"Action111",
	"Action112",
	"Action113",
	"Action114",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type DiceRollParser struct {
	RollExpression

	Buffer string
	buffer []rune
	rules  [193]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *DiceRollParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *DiceRollParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *DiceRollParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *DiceRollParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *DiceRollParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *DiceRollParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *DiceRollParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeHalt)
		case ruleAction1:
			p.AddOperator(TypeClearDetail)
		case ruleAction2:
			p.AddValueStr(string(text))
		case ruleAction3:
			p.AddStore()
		case ruleAction4:
			p.AddOperator(TypePop)
		case ruleAction5:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction6:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction7:
			p.PopAndSetOffset()
		case ruleAction8:
			p.AddValueStr("")
		case ruleAction9:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction10:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction11:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction12:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction13:
			p.PopAndSetOffset()
		case ruleAction14:
			p.CounterPush()
		case ruleAction15:
			p.CounterAdd(1)
		case ruleAction16:
			p.AddValueStr("")
			limit := p.CounterPop() + 1
			for i := int64(0); i < limit; i++ {
				p.PopAndSetOffset()
			}
		case ruleAction17:
			p.AddLeftValueMark()
		case ruleAction18:
			p.AddOperator(TypeBitwiseOr)
		case ruleAction19:
			p.AddLeftValueMark()
		case ruleAction20:
			p.AddOperator(TypeBitwiseAnd)
		case ruleAction21:
			p.AddLeftValueMark()
		case ruleAction22:
			p.AddOperator(TypeCompLT)
		case ruleAction23:
			p.AddLeftValueMark()
		case ruleAction24:
			p.AddOperator(TypeCompLE)
		case ruleAction25:
			p.AddLeftValueMark()
		case ruleAction26:
			p.AddOperator(TypeCompEQ)
		case ruleAction27:
			p.AddLeftValueMark()
		case ruleAction28:
			p.AddOperator(TypeCompNE)
		case ruleAction29:
			p.AddLeftValueMark()
		case ruleAction30:
			p.AddOperator(TypeCompGE)
		case ruleAction31:
			p.AddLeftValueMark()
		case ruleAction32:
			p.AddOperator(TypeCompGT)
		case ruleAction33:
			p.AddLeftValueMark()
		case ruleAction34:
			p.AddOperator(TypeAdd)
		case ruleAction35:
			p.AddLeftValueMark()
		case ruleAction36:
			p.AddOperator(TypeSubtract)
		case ruleAction37:
			p.AddLeftValueMark()
		case ruleAction38:
			p.AddOperator(TypeMultiply)
		case ruleAction39:
			p.AddLeftValueMark()
		case ruleAction40:
			p.AddOperator(TypeDivide)
		case ruleAction41:
			p.AddLeftValueMark()
		case ruleAction42:
			p.AddOperator(TypeModulus)
		case ruleAction43:
			p.AddLeftValueMark()
		case ruleAction44:
			p.AddOperator(TypeExponentiation)
		case ruleAction45:
			p.AddOperator(TypeNegation)
		case ruleAction46:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetK)
		case ruleAction47:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetQ)
		case ruleAction48:
			p.AddOperator(TypeDiceSetK)
		case ruleAction49:
			p.AddOperator(TypeDiceSetQ)
		case ruleAction50:
			p.AddOperatorWithInt64(TypeDiceSetK, 1)
		case ruleAction51:
			p.AddOperatorWithInt64(TypeDiceSetQ, 1)
		case ruleAction52:
			p.AddOperator(TypeWodSetInit)
		case ruleAction53:
			p.AddOperator(TypeWodSetPool)
		case ruleAction54:
			p.AddOperator(TypeDCSetInit)
		case ruleAction55:
			p.AddOperator(TypeDCSetPool)
		case ruleAction56:
			p.AddValue("2")
			p.AddLeftValueMark()
		case ruleAction57:
			p.AddOperator(TypeDice)
		case ruleAction58:
			p.AddValue("1")
			p.AddLeftValueMark()
		case ruleAction59:
			p.AddOperator(TypeDice)
		case ruleAction60:
			p.AddValue("2")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction61:
			p.AddValue("1")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction62:
			p.AddOperator(TypeWodSetPoints)
		case ruleAction63:
			p.AddOperator(TypeWodSetThreshold)
		case ruleAction64:
			p.AddOperator(TypeWodSetThresholdQ)
		case ruleAction65:
			p.AddOperator(TypeDiceWod)
		case ruleAction66:
			p.AddOperator(TypeDCSetPoints)
		case ruleAction67:
			p.AddOperator(TypeDiceDC)
		case ruleAction68:
			p.AddLeftValueMark()
		case ruleAction69:
			p.AddValue("0")
		case ruleAction70:
			p.AddOperator(TypeDice)
		case ruleAction71:
			p.AddOperator(TypeDicePenalty)
		case ruleAction72:
			p.AddValue("1")
			p.AddOperator(TypeDicePenalty)
		case ruleAction73:
			p.AddOperator(TypeDiceBonus)
		case ruleAction74:
			p.AddValue("1")
			p.AddOperator(TypeDiceBonus)
		case ruleAction75:
			p.AddValue("0")
			p.AddValue("0")
			p.AddOperator(TypeDiceFate)
		case ruleAction76:
			p.AddLoadVarnameForThis(text)
		case ruleAction77:
			p.WriteCode(TypeConvertInt, 0, "")
		case ruleAction78:
			p.WriteCode(TypeConvertStr, 0, "")
		case ruleAction79:
			p.AddLoadVarname(string(text))
		case ruleAction80:
			p.AddValue(string(text))
		case ruleAction81:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction82:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction83:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction84:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction85:
			p.CounterPush()
		case ruleAction86:
			p.CounterAdd(1)
		case ruleAction87:
			p.CounterAdd(1)
		case ruleAction88:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction89:
			p.CounterPush()
		case ruleAction90:
			p.CounterAdd(1)
		case ruleAction91:
			p.CounterAdd(1)
		case ruleAction92:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction93:
			p.CounterPush()
		case ruleAction94:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction95:
			p.CounterPush()
		case ruleAction96:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction97:
			p.AddStName()
		case ruleAction98:
			p.AddStName()
		case ruleAction99:
			p.AddStName()
		case ruleAction100:
			p.AddStName()
		case ruleAction101:
			p.CodePush()
		case ruleAction102:
			p.CodePop()
			p.AddStoreComputed(text)
			p.AddStName()
		case ruleAction103:
			p.CodePush()
		case ruleAction104:
			p.CodePop()
			p.AddStoreComputed(text)
			p.AddStName()
		case ruleAction105:
			p.AddStModify("+", text)
		case ruleAction106:
			p.AddStModify("-", text)
		case ruleAction107:
			p.AddStModify("+", text)
		case ruleAction108:
			p.AddStModify("-", text)
		case ruleAction109:
			p.AddStModify("-", text)
		case ruleAction110:
			p.AddValueStr(text)
		case ruleAction111:
			p.AddValueStr(text)
		case ruleAction112:
			p.AddValueStr(text)
		case ruleAction113:
			p.AddValueStr(text)
		case ruleAction114:
			p.AddValueStr(text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *DiceRollParser) Init(options ...func(*DiceRollParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 eBase <- <(e Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulee]() {
					goto l0
				}
				{
					add(ruleAction0, position)
				}
				add(ruleeBase, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e <- <(('^' 's' 't' st_expr) / (&{p.flags.DisableBlock} e0) / (eOne (';' sp Action1 eOne?)*))> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				{
					position5, tokenIndex5 := position, tokenIndex
					if buffer[position] != rune('^') {
						goto l6
					}
					position++
					if buffer[position] != rune('s') {
						goto l6
					}
					position++
					if buffer[position] != rune('t') {
						goto l6
					}
					position++
					{
						position7 := position
						{
							position8, tokenIndex8 := position, tokenIndex
							{
								position10 := position
								{
									position11, tokenIndex11 := position, tokenIndex
									if !_rules[rulest_name2]() {
										goto l12
									}
									if !_rules[rulest_modify_rest1]() {
										goto l12
									}
									goto l11
								l12:
									position, tokenIndex = position11, tokenIndex11
									if !_rules[rulest_name2r]() {
										goto l13
									}
									if !_rules[rulest_modify_rest1]() {
										goto l13
									}
									goto l11
								l13:
									position, tokenIndex = position11, tokenIndex11
									if !_rules[rulest_name1]() {
										goto l14
									}
									if !_rules[rulest_modify_rest]() {
										goto l14
									}
									goto l11
								l14:
									position, tokenIndex = position11, tokenIndex11
									if !_rules[rulest_name1r]() {
										goto l9
									}
									if !_rules[rulest_modify_rest]() {
										goto l9
									}
								}
							l11:
								if !_rules[rulesp]() {
									goto l9
								}
								{
									position15, tokenIndex15 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l15
									}
									position++
									goto l16
								l15:
									position, tokenIndex = position15, tokenIndex15
								}
							l16:
								if !_rules[rulesp]() {
									goto l9
								}
								if !_rules[rulest_modify_multi_rest]() {
									goto l9
								}
								add(rulest_modify_multi_1, position10)
							}
							goto l8
						l9:
							position, tokenIndex = position8, tokenIndex8
							{
								position18 := position
								{
									position21 := position
									{
										position22, tokenIndex22 := position, tokenIndex
										if !_rules[rulest_name2]() {
											goto l23
										}
										if !_rules[rulesp]() {
											goto l23
										}
										{
											position24, tokenIndex24 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l25
											}
											position++
											goto l24
										l25:
											position, tokenIndex = position24, tokenIndex24
											if buffer[position] != rune('=') {
												goto l23
											}
											position++
										}
									l24:
										if !_rules[rulesp]() {
											goto l23
										}
										if !_rules[ruleest]() {
											goto l23
										}
										{
											add(ruleAction97, position)
										}
										goto l22
									l23:
										position, tokenIndex = position22, tokenIndex22
										if !_rules[rulest_name1]() {
											goto l27
										}
										if !_rules[ruleest]() {
											goto l27
										}
										{
											add(ruleAction98, position)
										}
										goto l22
									l27:
										position, tokenIndex = position22, tokenIndex22
										if !_rules[rulest_name2r]() {
											goto l29
										}
										if !_rules[rulesp]() {
											goto l29
										}
										{
											position30, tokenIndex30 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l31
											}
											position++
											goto l30
										l31:
											position, tokenIndex = position30, tokenIndex30
											if buffer[position] != rune('=') {
												goto l29
											}
											position++
										}
									l30:
										if !_rules[rulesp]() {
											goto l29
										}
										if !_rules[ruleest]() {
											goto l29
										}
										{
											add(ruleAction99, position)
										}
										goto l22
									l29:
										position, tokenIndex = position22, tokenIndex22
										if !_rules[rulest_name1r]() {
											goto l33
										}
										if !_rules[ruleest]() {
											goto l33
										}
										{
											add(ruleAction100, position)
										}
										goto l22
									l33:
										position, tokenIndex = position22, tokenIndex22
										if buffer[position] != rune('&') {
											goto l35
										}
										position++
										if !_rules[rulest_name2]() {
											goto l35
										}
										if !_rules[rulesp]() {
											goto l35
										}
										{
											position36, tokenIndex36 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l37
											}
											position++
											goto l36
										l37:
											position, tokenIndex = position36, tokenIndex36
											if buffer[position] != rune('=') {
												goto l35
											}
											position++
										}
									l36:
										if !_rules[rulesp]() {
											goto l35
										}
										{
											add(ruleAction101, position)
										}
										{
											position39 := position
											if !_rules[ruleest]() {
												goto l35
											}
											add(rulePegText, position39)
										}
										{
											add(ruleAction102, position)
										}
										goto l22
									l35:
										position, tokenIndex = position22, tokenIndex22
										if buffer[position] != rune('&') {
											goto l17
										}
										position++
										if !_rules[rulest_name2r]() {
											goto l17
										}
										if !_rules[rulesp]() {
											goto l17
										}
										{
											position41, tokenIndex41 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l42
											}
											position++
											goto l41
										l42:
											position, tokenIndex = position41, tokenIndex41
											if buffer[position] != rune('=') {
												goto l17
											}
											position++
										}
									l41:
										if !_rules[rulesp]() {
											goto l17
										}
										{
											add(ruleAction103, position)
										}
										{
											position44 := position
											if !_rules[ruleest]() {
												goto l17
											}
											add(rulePegText, position44)
										}
										{
											add(ruleAction104, position)
										}
									}
								l22:
									add(rulest_assign, position21)
								}
								if !_rules[rulesp]() {
									goto l17
								}
								{
									position46, tokenIndex46 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l46
									}
									position++
									goto l47
								l46:
									position, tokenIndex = position46, tokenIndex46
								}
							l47:
								if !_rules[rulesp]() {
									goto l17
								}
							l19:
								{
									position20, tokenIndex20 := position, tokenIndex
									{
										position48 := position
										{
											position49, tokenIndex49 := position, tokenIndex
											if !_rules[rulest_name2]() {
												goto l50
											}
											if !_rules[rulesp]() {
												goto l50
											}
											{
												position51, tokenIndex51 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l52
												}
												position++
												goto l51
											l52:
												position, tokenIndex = position51, tokenIndex51
												if buffer[position] != rune('=') {
													goto l50
												}
												position++
											}
										l51:
											if !_rules[rulesp]() {
												goto l50
											}
											if !_rules[ruleest]() {
												goto l50
											}
											{
												add(ruleAction97, position)
											}
											goto l49
										l50:
											position, tokenIndex = position49, tokenIndex49
											if !_rules[rulest_name1]() {
												goto l54
											}
											if !_rules[ruleest]() {
												goto l54
											}
											{
												add(ruleAction98, position)
											}
											goto l49
										l54:
											position, tokenIndex = position49, tokenIndex49
											if !_rules[rulest_name2r]() {
												goto l56
											}
											if !_rules[rulesp]() {
												goto l56
											}
											{
												position57, tokenIndex57 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l58
												}
												position++
												goto l57
											l58:
												position, tokenIndex = position57, tokenIndex57
												if buffer[position] != rune('=') {
													goto l56
												}
												position++
											}
										l57:
											if !_rules[rulesp]() {
												goto l56
											}
											if !_rules[ruleest]() {
												goto l56
											}
											{
												add(ruleAction99, position)
											}
											goto l49
										l56:
											position, tokenIndex = position49, tokenIndex49
											if !_rules[rulest_name1r]() {
												goto l60
											}
											if !_rules[ruleest]() {
												goto l60
											}
											{
												add(ruleAction100, position)
											}
											goto l49
										l60:
											position, tokenIndex = position49, tokenIndex49
											if buffer[position] != rune('&') {
												goto l62
											}
											position++
											if !_rules[rulest_name2]() {
												goto l62
											}
											if !_rules[rulesp]() {
												goto l62
											}
											{
												position63, tokenIndex63 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l64
												}
												position++
												goto l63
											l64:
												position, tokenIndex = position63, tokenIndex63
												if buffer[position] != rune('=') {
													goto l62
												}
												position++
											}
										l63:
											if !_rules[rulesp]() {
												goto l62
											}
											{
												add(ruleAction101, position)
											}
											{
												position66 := position
												if !_rules[ruleest]() {
													goto l62
												}
												add(rulePegText, position66)
											}
											{
												add(ruleAction102, position)
											}
											goto l49
										l62:
											position, tokenIndex = position49, tokenIndex49
											if buffer[position] != rune('&') {
												goto l20
											}
											position++
											if !_rules[rulest_name2r]() {
												goto l20
											}
											if !_rules[rulesp]() {
												goto l20
											}
											{
												position68, tokenIndex68 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l69
												}
												position++
												goto l68
											l69:
												position, tokenIndex = position68, tokenIndex68
												if buffer[position] != rune('=') {
													goto l20
												}
												position++
											}
										l68:
											if !_rules[rulesp]() {
												goto l20
											}
											{
												add(ruleAction103, position)
											}
											{
												position71 := position
												if !_rules[ruleest]() {
													goto l20
												}
												add(rulePegText, position71)
											}
											{
												add(ruleAction104, position)
											}
										}
									l49:
										add(rulest_assign, position48)
									}
									if !_rules[rulesp]() {
										goto l20
									}
									{
										position73, tokenIndex73 := position, tokenIndex
										if buffer[position] != rune(',') {
											goto l73
										}
										position++
										goto l74
									l73:
										position, tokenIndex = position73, tokenIndex73
									}
								l74:
									if !_rules[rulesp]() {
										goto l20
									}
									goto l19
								l20:
									position, tokenIndex = position20, tokenIndex20
								}
								add(rulest_assign_multi, position18)
							}
							goto l8
						l17:
							position, tokenIndex = position8, tokenIndex8
							{
								position75 := position
								if !_rules[rulest_modify2]() {
									goto l6
								}
								if !_rules[rulesp]() {
									goto l6
								}
								{
									position76, tokenIndex76 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l76
									}
									position++
									goto l77
								l76:
									position, tokenIndex = position76, tokenIndex76
								}
							l77:
								if !_rules[rulesp]() {
									goto l6
								}
								if !_rules[rulest_modify_multi_rest]() {
									goto l6
								}
								add(rulest_modify_multi_2, position75)
							}
						}
					l8:
						add(rulest_expr, position7)
					}
					goto l5
				l6:
					position, tokenIndex = position5, tokenIndex5
					if !(p.flags.DisableBlock) {
						goto l78
					}
					if !_rules[rulee0]() {
						goto l78
					}
					goto l5
				l78:
					position, tokenIndex = position5, tokenIndex5
					if !_rules[ruleeOne]() {
						goto l3
					}
				l79:
					{
						position80, tokenIndex80 := position, tokenIndex
						if buffer[position] != rune(';') {
							goto l80
						}
						position++
						if !_rules[rulesp]() {
							goto l80
						}
						{
							add(ruleAction1, position)
						}
						{
							position82, tokenIndex82 := position, tokenIndex
							if !_rules[ruleeOne]() {
								goto l82
							}
							goto l83
						l82:
							position, tokenIndex = position82, tokenIndex82
						}
					l83:
						goto l79
					l80:
						position, tokenIndex = position80, tokenIndex80
					}
				}
			l5:
				add(rulee, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 eOne <- <(sp (s0 / e0 / assign_expr))> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				if !_rules[rulesp]() {
					goto l84
				}
				{
					position86, tokenIndex86 := position, tokenIndex
					{
						position88 := position
						{
							position89 := position
							if buffer[position] != rune('i') {
								goto l87
							}
							position++
							if buffer[position] != rune('f') {
								goto l87
							}
							position++
							if !_rules[rulesp]() {
								goto l87
							}
							if !_rules[rulee0]() {
								goto l87
							}
							{
								add(ruleAction5, position)
							}
							if !_rules[ruleblock]() {
								goto l87
							}
							{
								add(ruleAction6, position)
							}
							{
								position92, tokenIndex92 := position, tokenIndex
								{
									position94 := position
									if buffer[position] != rune('e') {
										goto l92
									}
									position++
									if buffer[position] != rune('l') {
										goto l92
									}
									position++
									if buffer[position] != rune('s') {
										goto l92
									}
									position++
									if buffer[position] != rune('e') {
										goto l92
									}
									position++
									if !_rules[rulesp]() {
										goto l92
									}
									if !_rules[ruleblock]() {
										goto l92
									}
									add(rulestmtElse, position94)
								}
								goto l93
							l92:
								position, tokenIndex = position92, tokenIndex92
							}
						l93:
							{
								add(ruleAction7, position)
							}
							{
								add(ruleAction8, position)
							}
							add(rulestmtIf, position89)
						}
						add(rules0, position88)
					}
					goto l86
				l87:
					position, tokenIndex = position86, tokenIndex86
					if !_rules[rulee0]() {
						goto l97
					}
					goto l86
				l97:
					position, tokenIndex = position86, tokenIndex86
					if !_rules[ruleassign_expr]() {
						goto l84
					}
				}
			l86:
				add(ruleeOne, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 3 assign_expr <- <(&{!p.flags.DisableBlock} identifier Action2 '=' sp e0 Action3)> */
		func() bool {
			position98, tokenIndex98 := position, tokenIndex
			{
				position99 := position
				if !(!p.flags.DisableBlock) {
					goto l98
				}
				if !_rules[ruleidentifier]() {
					goto l98
				}
				{
					add(ruleAction2, position)
				}
				if buffer[position] != rune('=') {
					goto l98
				}
				position++
				if !_rules[rulesp]() {
					goto l98
				}
				if !_rules[rulee0]() {
					goto l98
				}
				{
					add(ruleAction3, position)
				}
				add(ruleassign_expr, position99)
			}
			return true
		l98:
			position, tokenIndex = position98, tokenIndex98
			return false
		},
		/* 4 s0 <- <stmtIf> */
		nil,
		/* 5 block <- <((('{' sp '}') / ('{' sp e Action4 '}')) sp)> */
		func() bool {
			position103, tokenIndex103 := position, tokenIndex
			{
				position104 := position
				{
					position105, tokenIndex105 := position, tokenIndex
					if buffer[position] != rune('{') {
						goto l106
					}
					position++
					if !_rules[rulesp]() {
						goto l106
					}
					if buffer[position] != rune('}') {
						goto l106
					}
					position++
					goto l105
				l106:
					position, tokenIndex = position105, tokenIndex105
					if buffer[position] != rune('{') {
						goto l103
					}
					position++
					if !_rules[rulesp]() {
						goto l103
					}
					if !_rules[rulee]() {
						goto l103
					}
					{
						add(ruleAction4, position)
					}
					if buffer[position] != rune('}') {
						goto l103
					}
					position++
				}
			l105:
				if !_rules[rulesp]() {
					goto l103
				}
				add(ruleblock, position104)
			}
			return true
		l103:
			position, tokenIndex = position103, tokenIndex103
			return false
		},
		/* 6 stmtElse <- <('e' 'l' 's' 'e' sp block)> */
		nil,
		/* 7 stmtIf <- <('i' 'f' sp e0 Action5 block Action6 stmtElse? Action7 Action8)> */
		nil,
		/* 8 e0 <- <eTernary> */
		func() bool {
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				{
					position112 := position
					{
						position113, tokenIndex113 := position, tokenIndex
						if !_rules[ruleeBitwise]() {
							goto l114
						}
						if buffer[position] != rune('?') {
							goto l114
						}
						position++
						if !_rules[rulesp]() {
							goto l114
						}
						{
							add(ruleAction11, position)
						}
						if !_rules[ruleeBitwise]() {
							goto l114
						}
						if buffer[position] != rune(':') {
							goto l114
						}
						position++
						if !_rules[rulesp]() {
							goto l114
						}
						{
							add(ruleAction12, position)
						}
						if !_rules[ruleeBitwise]() {
							goto l114
						}
						{
							add(ruleAction13, position)
						}
						goto l113
					l114:
						position, tokenIndex = position113, tokenIndex113
						if !_rules[ruleeSimpleSwitch]() {
							goto l118
						}
						{
							add(ruleAction14, position)
						}
					l120:
						{
							position121, tokenIndex121 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l121
							}
							position++
							if !_rules[rulesp]() {
								goto l121
							}
							if !_rules[ruleeSimpleSwitch]() {
								goto l121
							}
							{
								add(ruleAction15, position)
							}
							goto l120
						l121:
							position, tokenIndex = position121, tokenIndex121
						}
						{
							add(ruleAction16, position)
						}
						goto l113
					l118:
						position, tokenIndex = position113, tokenIndex113
						if !_rules[ruleeBitwise]() {
							goto l110
						}
					}
				l113:
					add(ruleeTernary, position112)
				}
				add(rulee0, position111)
			}
			return true
		l110:
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 9 eSimpleSwitch <- <(eBitwise '?' sp Action9 eBitwise Action10)> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				if !_rules[ruleeBitwise]() {
					goto l124
				}
				if buffer[position] != rune('?') {
					goto l124
				}
				position++
				if !_rules[rulesp]() {
					goto l124
				}
				{
					add(ruleAction9, position)
				}
				if !_rules[ruleeBitwise]() {
					goto l124
				}
				{
					add(ruleAction10, position)
				}
				add(ruleeSimpleSwitch, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 10 eTernary <- <((eBitwise '?' sp Action11 eBitwise ':' sp Action12 eBitwise Action13) / (eSimpleSwitch Action14 (',' sp eSimpleSwitch Action15)* Action16) / eBitwise)> */
		nil,
		/* 11 eBitwise <- <((&{p.flags.DisableBitwiseOp} eComp) / eBitwise1)> */
		func() bool {
			position129, tokenIndex129 := position, tokenIndex
			{
				position130 := position
				{
					position131, tokenIndex131 := position, tokenIndex
					if !(p.flags.DisableBitwiseOp) {
						goto l132
					}
					if !_rules[ruleeComp]() {
						goto l132
					}
					goto l131
				l132:
					position, tokenIndex = position131, tokenIndex131
					{
						position133 := position
						if !_rules[ruleeComp]() {
							goto l129
						}
					l134:
						{
							position135, tokenIndex135 := position, tokenIndex
							{
								position136, tokenIndex136 := position, tokenIndex
								{
									position138, tokenIndex138 := position, tokenIndex
									{
										position140 := position
										if buffer[position] != rune('|') {
											goto l139
										}
										position++
										if buffer[position] != rune('|') {
											goto l139
										}
										position++
										if !_rules[rulesp]() {
											goto l139
										}
										add(rulelogicOr, position140)
									}
									goto l138
								l139:
									position, tokenIndex = position138, tokenIndex138
									{
										position141 := position
										if buffer[position] != rune('|') {
											goto l137
										}
										position++
										if !_rules[rulesp]() {
											goto l137
										}
										add(rulebitwiseOr, position141)
									}
								}
							l138:
								{
									add(ruleAction17, position)
								}
								if !_rules[ruleeComp]() {
									goto l137
								}
								{
									add(ruleAction18, position)
								}
								goto l136
							l137:
								position, tokenIndex = position136, tokenIndex136
								{
									position144, tokenIndex144 := position, tokenIndex
									{
										position146 := position
										{
											position147, tokenIndex147 := position, tokenIndex
											if buffer[position] != rune('&') {
												goto l148
											}
											position++
											if buffer[position] != rune('&') {
												goto l148
											}
											position++
											goto l147
										l148:
											position, tokenIndex = position147, tokenIndex147
											if buffer[position] != rune('&') {
												goto l145
											}
											position++
											if buffer[position] != rune('a') {
												goto l145
											}
											position++
											if buffer[position] != rune('m') {
												goto l145
											}
											position++
											if buffer[position] != rune('p') {
												goto l145
											}
											position++
											if buffer[position] != rune(';') {
												goto l145
											}
											position++
											if buffer[position] != rune('&') {
												goto l145
											}
											position++
											if buffer[position] != rune('a') {
												goto l145
											}
											position++
											if buffer[position] != rune('m') {
												goto l145
											}
											position++
											if buffer[position] != rune('p') {
												goto l145
											}
											position++
											if buffer[position] != rune(';') {
												goto l145
											}
											position++
										}
									l147:
										if !_rules[rulesp]() {
											goto l145
										}
										add(rulelogicAnd, position146)
									}
									goto l144
								l145:
									position, tokenIndex = position144, tokenIndex144
									{
										position149 := position
										{
											position150, tokenIndex150 := position, tokenIndex
											if buffer[position] != rune('&') {
												goto l151
											}
											position++
											goto l150
										l151:
											position, tokenIndex = position150, tokenIndex150
											if buffer[position] != rune('&') {
												goto l135
											}
											position++
											if buffer[position] != rune('a') {
												goto l135
											}
											position++
											if buffer[position] != rune('m') {
												goto l135
											}
											position++
											if buffer[position] != rune('p') {
												goto l135
											}
											position++
											if buffer[position] != rune(';') {
												goto l135
											}
											position++
										}
									l150:
										if !_rules[rulesp]() {
											goto l135
										}
										add(rulebitwiseAnd, position149)
									}
								}
							l144:
								{
									add(ruleAction19, position)
								}
								if !_rules[ruleeComp]() {
									goto l135
								}
								{
									add(ruleAction20, position)
								}
							}
						l136:
							goto l134
						l135:
							position, tokenIndex = position135, tokenIndex135
						}
						add(ruleeBitwise1, position133)
					}
				}
			l131:
				add(ruleeBitwise, position130)
			}
			return true
		l129:
			position, tokenIndex = position129, tokenIndex129
			return false
		},
		/* 12 eBitwise1 <- <(eComp (((logicOr / bitwiseOr) Action17 eComp Action18) / ((logicAnd / bitwiseAnd) Action19 eComp Action20))*)> */
		nil,
		/* 13 eComp <- <(e1 ((lt Action21 e1 Action22) / (le Action23 e1 Action24) / (eq Action25 e1 Action26) / (ne Action27 e1 Action28) / (ge Action29 e1 Action30) / (gt Action31 e1 Action32))*)> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if !_rules[rulee1]() {
					goto l155
				}
			l157:
				{
					position158, tokenIndex158 := position, tokenIndex
					{
						position159, tokenIndex159 := position, tokenIndex
						{
							position161 := position
							{
								position162, tokenIndex162 := position, tokenIndex
								if buffer[position] != rune('<') {
									goto l163
								}
								position++
								goto l162
							l163:
								position, tokenIndex = position162, tokenIndex162
								if buffer[position] != rune('＜') {
									goto l160
								}
								position++
							}
						l162:
							if !_rules[rulesp]() {
								goto l160
							}
							add(rulelt, position161)
						}
						{
							add(ruleAction21, position)
						}
						if !_rules[rulee1]() {
							goto l160
						}
						{
							add(ruleAction22, position)
						}
						goto l159
					l160:
						position, tokenIndex = position159, tokenIndex159
						{
							position167 := position
							{
								position168, tokenIndex168 := position, tokenIndex
								if buffer[position] != rune('<') {
									goto l169
								}
								position++
								if buffer[position] != rune('=') {
									goto l169
								}
								position++
								goto l168
							l169:
								position, tokenIndex = position168, tokenIndex168
								if buffer[position] != rune('＜') {
									goto l166
								}
								position++
								if buffer[position] != rune('＝') {
									goto l166
								}
								position++
							}
						l168:
							if !_rules[rulesp]() {
								goto l166
							}
							add(rulele, position167)
						}
						{
							add(ruleAction23, position)
						}
						if !_rules[rulee1]() {
							goto l166
						}
						{
							add(ruleAction24, position)
						}
						goto l159
					l166:
						position, tokenIndex = position159, tokenIndex159
						{
							position173 := position
							{
								position174, tokenIndex174 := position, tokenIndex
								if buffer[position] != rune('=') {
									goto l175
								}
								position++
								if buffer[position] != rune('=') {
									goto l175
								}
								position++
								goto l174
							l175:
								position, tokenIndex = position174, tokenIndex174
								if buffer[position] != rune('＝') {
									goto l172
								}
								position++
								if buffer[position] != rune('＝') {
									goto l172
								}
								position++
							}
						l174:
							if !_rules[rulesp]() {
								goto l172
							}
							add(ruleeq, position173)
						}
						{
							add(ruleAction25, position)
						}
						if !_rules[rulee1]() {
							goto l172
						}
						{
							add(ruleAction26, position)
						}
						goto l159
					l172:
						position, tokenIndex = position159, tokenIndex159
						{
							position179 := position
							{
								position180, tokenIndex180 := position, tokenIndex
								if buffer[position] != rune('!') {
									goto l181
								}
								position++
								if buffer[position] != rune('=') {
									goto l181
								}
								position++
								goto l180
							l181:
								position, tokenIndex = position180, tokenIndex180
								if buffer[position] != rune('！') {
									goto l178
								}
								position++
								if buffer[position] != rune('＝') {
									goto l178
								}
								position++
							}
						l180:
							if !_rules[rulesp]() {
								goto l178
							}
							add(rulene, position179)
						}
						{
							add(ruleAction27, position)
						}
						if !_rules[rulee1]() {
							goto l178
						}
						{
							add(ruleAction28, position)
						}
						goto l159
					l178:
						position, tokenIndex = position159, tokenIndex159
						{
							position185 := position
							{
								position186, tokenIndex186 := position, tokenIndex
								if buffer[position] != rune('>') {
									goto l187
								}
								position++
								if buffer[position] != rune('=') {
									goto l187
								}
								position++
								goto l186
							l187:
								position, tokenIndex = position186, tokenIndex186
								if buffer[position] != rune('＞') {
									goto l184
								}
								position++
								if buffer[position] != rune('＝') {
									goto l184
								}
								position++
							}
						l186:
							if !_rules[rulesp]() {
								goto l184
							}
							add(rulege, position185)
						}
						{
							add(ruleAction29, position)
						}
						if !_rules[rulee1]() {
							goto l184
						}
						{
							add(ruleAction30, position)
						}
						goto l159
					l184:
						position, tokenIndex = position159, tokenIndex159
						{
							position190 := position
							{
								position191, tokenIndex191 := position, tokenIndex
								if buffer[position] != rune('>') {
									goto l192
								}
								position++
								goto l191
							l192:
								position, tokenIndex = position191, tokenIndex191
								if buffer[position] != rune('＞') {
									goto l158
								}
								position++
							}
						l191:
							if !_rules[rulesp]() {
								goto l158
							}
							add(rulegt, position190)
						}
						{
							add(ruleAction31, position)
						}
						if !_rules[rulee1]() {
							goto l158
						}
						{
							add(ruleAction32, position)
						}
					}
				l159:
					goto l157
				l158:
					position, tokenIndex = position158, tokenIndex158
				}
				add(ruleeComp, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 14 e1 <- <(e2 ((add Action33 e2 Action34) / (minus Action35 e2 Action36))*)> */
		func() bool {
			position195, tokenIndex195 := position, tokenIndex
			{
				position196 := position
				if !_rules[rulee2]() {
					goto l195
				}
			l197:
				{
					position198, tokenIndex198 := position, tokenIndex
					{
						position199, tokenIndex199 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l200
						}
						{
							add(ruleAction33, position)
						}
						if !_rules[rulee2]() {
							goto l200
						}
						{
							add(ruleAction34, position)
						}
						goto l199
					l200:
						position, tokenIndex = position199, tokenIndex199
						if !_rules[ruleminus]() {
							goto l198
						}
						{
							add(ruleAction35, position)
						}
						if !_rules[rulee2]() {
							goto l198
						}
						{
							add(ruleAction36, position)
						}
					}
				l199:
					goto l197
				l198:
					position, tokenIndex = position198, tokenIndex198
				}
				add(rulee1, position196)
			}
			return true
		l195:
			position, tokenIndex = position195, tokenIndex195
			return false
		},
		/* 15 e2 <- <(e3 ((multiply Action37 e3 Action38) / (divide Action39 e3 Action40) / (modulus Action41 e3 Action42))*)> */
		func() bool {
			position205, tokenIndex205 := position, tokenIndex
			{
				position206 := position
				if !_rules[rulee3]() {
					goto l205
				}
			l207:
				{
					position208, tokenIndex208 := position, tokenIndex
					{
						position209, tokenIndex209 := position, tokenIndex
						{
							position211 := position
							{
								position212, tokenIndex212 := position, tokenIndex
								if buffer[position] != rune('*') {
									goto l213
								}
								position++
								goto l212
							l213:
								position, tokenIndex = position212, tokenIndex212
								if buffer[position] != rune('＊') {
									goto l210
								}
								position++
							}
						l212:
							if !_rules[rulesp]() {
								goto l210
							}
							add(rulemultiply, position211)
						}
						{
							add(ruleAction37, position)
						}
						if !_rules[rulee3]() {
							goto l210
						}
						{
							add(ruleAction38, position)
						}
						goto l209
					l210:
						position, tokenIndex = position209, tokenIndex209
						{
							position217 := position
							{
								position218, tokenIndex218 := position, tokenIndex
								if buffer[position] != rune('/') {
									goto l219
								}
								position++
								goto l218
							l219:
								position, tokenIndex = position218, tokenIndex218
								if buffer[position] != rune('／') {
									goto l216
								}
								position++
							}
						l218:
							if !_rules[rulesp]() {
								goto l216
							}
							add(ruledivide, position217)
						}
						{
							add(ruleAction39, position)
						}
						if !_rules[rulee3]() {
							goto l216
						}
						{
							add(ruleAction40, position)
						}
						goto l209
					l216:
						position, tokenIndex = position209, tokenIndex209
						{
							position222 := position
							if buffer[position] != rune('%') {
								goto l208
							}
							position++
							if !_rules[rulesp]() {
								goto l208
							}
							add(rulemodulus, position222)
						}
						{
							add(ruleAction41, position)
						}
						if !_rules[rulee3]() {
							goto l208
						}
						{
							add(ruleAction42, position)
						}
					}
				l209:
					goto l207
				l208:
					position, tokenIndex = position208, tokenIndex208
				}
				add(rulee2, position206)
			}
			return true
		l205:
			position, tokenIndex = position205, tokenIndex205
			return false
		},
		/* 16 e3 <- <(e4 (exponentiation Action43 e4 Action44)*)> */
		func() bool {
			position225, tokenIndex225 := position, tokenIndex
			{
				position226 := position
				if !_rules[rulee4]() {
					goto l225
				}
			l227:
				{
					position228, tokenIndex228 := position, tokenIndex
					{
						position229 := position
						{
							position230, tokenIndex230 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l231
							}
							position++
							if !_rules[rulesp]() {
								goto l231
							}
							goto l230
						l231:
							position, tokenIndex = position230, tokenIndex230
							if buffer[position] != rune('*') {
								goto l228
							}
							position++
							if buffer[position] != rune('*') {
								goto l228
							}
							position++
							if !_rules[rulesp]() {
								goto l228
							}
						}
					l230:
						add(ruleexponentiation, position229)
					}
					{
						add(ruleAction43, position)
					}
					if !_rules[rulee4]() {
						goto l228
					}
					{
						add(ruleAction44, position)
					}
					goto l227
				l228:
					position, tokenIndex = position228, tokenIndex228
				}
				add(rulee3, position226)
			}
			return true
		l225:
			position, tokenIndex = position225, tokenIndex225
			return false
		},
		/* 17 e4 <- <((minus e5 Action45) / e5)> */
		func() bool {
			position234, tokenIndex234 := position, tokenIndex
			{
				position235 := position
				{
					position236, tokenIndex236 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l237
					}
					if !_rules[rulee5]() {
						goto l237
					}
					{
						add(ruleAction45, position)
					}
					goto l236
				l237:
					position, tokenIndex = position236, tokenIndex236
					if !_rules[rulee5]() {
						goto l234
					}
				}
			l236:
				add(rulee4, position235)
			}
			return true
		l234:
			position, tokenIndex = position234, tokenIndex234
			return false
		},
		/* 18 e5 <- <((add eDice) / eDice)> */
		func() bool {
			position239, tokenIndex239 := position, tokenIndex
			{
				position240 := position
				{
					position241, tokenIndex241 := position, tokenIndex
					if !_rules[ruleadd]() {
						goto l242
					}
					if !_rules[ruleeDice]() {
						goto l242
					}
					goto l241
				l242:
					position, tokenIndex = position241, tokenIndex241
					if !_rules[ruleeDice]() {
						goto l239
					}
				}
			l241:
				add(rulee5, position240)
			}
			return true
		l239:
			position, tokenIndex = position239, tokenIndex239
			return false
		},
		/* 19 dndDiceSuffix <- <(((('优' '势') / ('優' '勢') / ('k' 'h')) Action46 sp) / ((('劣' '势') / ('劣' '勢') / ('k' 'l')) Action47 sp))> */
		func() bool {
			position243, tokenIndex243 := position, tokenIndex
			{
				position244 := position
				{
					position245, tokenIndex245 := position, tokenIndex
					{
						position247, tokenIndex247 := position, tokenIndex
						if buffer[position] != rune('优') {
							goto l248
						}
						position++
						if buffer[position] != rune('势') {
							goto l248
						}
						position++
						goto l247
					l248:
						position, tokenIndex = position247, tokenIndex247
						if buffer[position] != rune('優') {
							goto l249
						}
						position++
						if buffer[position] != rune('勢') {
							goto l249
						}
						position++
						goto l247
					l249:
						position, tokenIndex = position247, tokenIndex247
						if buffer[position] != rune('k') {
							goto l246
						}
						position++
						if buffer[position] != rune('h') {
							goto l246
						}
						position++
					}
				l247:
					{
						add(ruleAction46, position)
					}
					if !_rules[rulesp]() {
						goto l246
					}
					goto l245
				l246:
					position, tokenIndex = position245, tokenIndex245
					{
						position251, tokenIndex251 := position, tokenIndex
						if buffer[position] != rune('劣') {
							goto l252
						}
						position++
						if buffer[position] != rune('势') {
							goto l252
						}
						position++
						goto l251
					l252:
						position, tokenIndex = position251, tokenIndex251
						if buffer[position] != rune('劣') {
							goto l253
						}
						position++
						if buffer[position] != rune('勢') {
							goto l253
						}
						position++
						goto l251
					l253:
						position, tokenIndex = position251, tokenIndex251
						if buffer[position] != rune('k') {
							goto l243
						}
						position++
						if buffer[position] != rune('l') {
							goto l243
						}
						position++
					}
				l251:
					{
						add(ruleAction47, position)
					}
					if !_rules[rulesp]() {
						goto l243
					}
				}
			l245:
				add(ruledndDiceSuffix, position244)
			}
			return true
		l243:
			position, tokenIndex = position243, tokenIndex243
			return false
		},
		/* 20 kqDiceOp <- <(('k' eDice2 Action48)? ('q' eDice2 Action49)? ('d' 'l' eDice2 Action50)? ('d' 'h' eDice2 Action51)?)> */
		func() bool {
			{
				position256 := position
				{
					position257, tokenIndex257 := position, tokenIndex
					if buffer[position] != rune('k') {
						goto l257
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l257
					}
					{
						add(ruleAction48, position)
					}
					goto l258
				l257:
					position, tokenIndex = position257, tokenIndex257
				}
			l258:
				{
					position260, tokenIndex260 := position, tokenIndex
					if buffer[position] != rune('q') {
						goto l260
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l260
					}
					{
						add(ruleAction49, position)
					}
					goto l261
				l260:
					position, tokenIndex = position260, tokenIndex260
				}
			l261:
				{
					position263, tokenIndex263 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l263
					}
					position++
					if buffer[position] != rune('l') {
						goto l263
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l263
					}
					{
						add(ruleAction50, position)
					}
					goto l264
				l263:
					position, tokenIndex = position263, tokenIndex263
				}
			l264:
				{
					position266, tokenIndex266 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l266
					}
					position++
					if buffer[position] != rune('h') {
						goto l266
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l266
					}
					{
						add(ruleAction51, position)
					}
					goto l267
				l266:
					position, tokenIndex = position266, tokenIndex266
				}
			l267:
				add(rulekqDiceOp, position256)
			}
			return true
		},
		/* 21 _dnumber <- <&(('d' / 'D') (number / '('))> */
		func() bool {
			position269, tokenIndex269 := position, tokenIndex
			{
				position270 := position
				{
					position271, tokenIndex271 := position, tokenIndex
					{
						position272, tokenIndex272 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l273
						}
						position++
						goto l272
					l273:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('D') {
							goto l269
						}
						position++
					}
				l272:
					{
						position274, tokenIndex274 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l275
						}
						goto l274
					l275:
						position, tokenIndex = position274, tokenIndex274
						if buffer[position] != rune('(') {
							goto l269
						}
						position++
					}
				l274:
					position, tokenIndex = position271, tokenIndex271
				}
				add(rule_dnumber, position270)
			}
			return true
		l269:
			position, tokenIndex = position269, tokenIndex269
			return false
		},
		/* 22 simpleDice2 <- <(&(number / '(') eDice2)> */
		func() bool {
			position276, tokenIndex276 := position, tokenIndex
			{
				position277 := position
				{
					position278, tokenIndex278 := position, tokenIndex
					{
						position279, tokenIndex279 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l280
						}
						goto l279
					l280:
						position, tokenIndex = position279, tokenIndex279
						if buffer[position] != rune('(') {
							goto l276
						}
						position++
					}
				l279:
					position, tokenIndex = position278, tokenIndex278
				}
				if !_rules[ruleeDice2]() {
					goto l276
				}
				add(rulesimpleDice2, position277)
			}
			return true
		l276:
			position, tokenIndex = position276, tokenIndex276
			return false
		},
		/* 23 wodDicePool <- <(Action52 (simpleDice2 Action53)?)> */
		nil,
		/* 24 doubleCrossDicePool <- <(Action54 (simpleDice2 Action55))> */
		nil,
		/* 25 eDice <- <((_dnumber ('d' / 'D') Action56 eDice2 dndDiceSuffix Action57) / (_dnumber ('d' / 'D') Action58 eDice2 kqDiceOp Action59) / (('d' / 'D') dndDiceSuffix Action60) / (('d' / 'D') !(!('!' / '"' / '#' / '$' / '%' / '&' / '\'' / '(' / ')' / '*' / '+' / [,-.] / '/' / ';' / '<' / '=' / '>' / '?' / '@' / '[' / '\\' / ']' / '^' / '`' / '{' / '|' / '}' / '~' / ' ' / '\t' / '\n' / '\r') .) sp Action61) / (&{!p.flags.DisableDicePool} wodDicePool ('a' / 'A') simpleDice2 ((('m' / 'M') simpleDice2 Action62) / (('k' / 'K') simpleDice2 Action63) / (('q' / 'Q') simpleDice2 Action64))* Action65) / (&{!p.flags.DisableCrossDice} doubleCrossDicePool ('c' / 'C') simpleDice2 (('m' / 'M') simpleDice2 Action66)* Action67) / (eDice2 (('d' / 'D') Action68 (simpleDice2 / (&{!p.flags.DisableNumDice} sp Action69)) kqDiceOp Action70)*))> */
		func() bool {
			position283, tokenIndex283 := position, tokenIndex
			{
				position284 := position
				{
					position285, tokenIndex285 := position, tokenIndex
					if !_rules[rule_dnumber]() {
						goto l286
					}
					{
						position287, tokenIndex287 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l288
						}
						position++
						goto l287
					l288:
						position, tokenIndex = position287, tokenIndex287
						if buffer[position] != rune('D') {
							goto l286
						}
						position++
					}
				l287:
					{
						add(ruleAction56, position)
					}
					if !_rules[ruleeDice2]() {
						goto l286
					}
					if !_rules[ruledndDiceSuffix]() {
						goto l286
					}
					{
						add(ruleAction57, position)
					}
					goto l285
				l286:
					position, tokenIndex = position285, tokenIndex285
					if !_rules[rule_dnumber]() {
						goto l291
					}
					{
						position292, tokenIndex292 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l293
						}
						position++
						goto l292
					l293:
						position, tokenIndex = position292, tokenIndex292
						if buffer[position] != rune('D') {
							goto l291
						}
						position++
					}
				l292:
					{
						add(ruleAction58, position)
					}
					if !_rules[ruleeDice2]() {
						goto l291
					}
					if !_rules[rulekqDiceOp]() {
						goto l291
					}
					{
						add(ruleAction59, position)
					}
					goto l285
				l291:
					position, tokenIndex = position285, tokenIndex285
					{
						position297, tokenIndex297 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l298
						}
						position++
						goto l297
					l298:
						position, tokenIndex = position297, tokenIndex297
						if buffer[position] != rune('D') {
							goto l296
						}
						position++
					}
				l297:
					if !_rules[ruledndDiceSuffix]() {
						goto l296
					}
					{
						add(ruleAction60, position)
					}
					goto l285
				l296:
					position, tokenIndex = position285, tokenIndex285
					{
						position301, tokenIndex301 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l302
						}
						position++
						goto l301
					l302:
						position, tokenIndex = position301, tokenIndex301
						if buffer[position] != rune('D') {
							goto l300
						}
						position++
					}
				l301:
					{
						position303, tokenIndex303 := position, tokenIndex
						{
							position304, tokenIndex304 := position, tokenIndex
							{
								position305, tokenIndex305 := position, tokenIndex
								if buffer[position] != rune('!') {
									goto l306
								}
								position++
								goto l305
							l306:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('"') {
									goto l307
								}
								position++
								goto l305
							l307:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('#') {
									goto l308
								}
								position++
								goto l305
							l308:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('$') {
									goto l309
								}
								position++
								goto l305
							l309:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('%') {
									goto l310
								}
								position++
								goto l305
							l310:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('&') {
									goto l311
								}
								position++
								goto l305
							l311:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('\'') {
									goto l312
								}
								position++
								goto l305
							l312:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('(') {
									goto l313
								}
								position++
								goto l305
							l313:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune(')') {
									goto l314
								}
								position++
								goto l305
							l314:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('*') {
									goto l315
								}
								position++
								goto l305
							l315:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('+') {
									goto l316
								}
								position++
								goto l305
							l316:
								position, tokenIndex = position305, tokenIndex305
								if c := buffer[position]; c < rune(',') || c > rune('.') {
									goto l317
								}
								position++
								goto l305
							l317:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('/') {
									goto l318
								}
								position++
								goto l305
							l318:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune(';') {
									goto l319
								}
								position++
								goto l305
							l319:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('<') {
									goto l320
								}
								position++
								goto l305
							l320:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('=') {
									goto l321
								}
								position++
								goto l305
							l321:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('>') {
									goto l322
								}
								position++
								goto l305
							l322:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('?') {
									goto l323
								}
								position++
								goto l305
							l323:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('@') {
									goto l324
								}
								position++
								goto l305
							l324:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('[') {
									goto l325
								}
								position++
								goto l305
							l325:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('\\') {
									goto l326
								}
								position++
								goto l305
							l326:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune(']') {
									goto l327
								}
								position++
								goto l305
							l327:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('^') {
									goto l328
								}
								position++
								goto l305
							l328:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('`') {
									goto l329
								}
								position++
								goto l305
							l329:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('{') {
									goto l330
								}
								position++
								goto l305
							l330:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('|') {
									goto l331
								}
								position++
								goto l305
							l331:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('}') {
									goto l332
								}
								position++
								goto l305
							l332:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('~') {
									goto l333
								}
								position++
								goto l305
							l333:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune(' ') {
									goto l334
								}
								position++
								goto l305
							l334:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('\t') {
									goto l335
								}
								position++
								goto l305
							l335:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('\n') {
									goto l336
								}
								position++
								goto l305
							l336:
								position, tokenIndex = position305, tokenIndex305
								if buffer[position] != rune('\r') {
									goto l304
								}
								position++
							}
						l305:
							goto l303
						l304:
							position, tokenIndex = position304, tokenIndex304
						}
						if !matchDot() {
							goto l303
						}
						goto l300
					l303:
						position, tokenIndex = position303, tokenIndex303
					}
					if !_rules[rulesp]() {
						goto l300
					}
					{
						add(ruleAction61, position)
					}
					goto l285
				l300:
					position, tokenIndex = position285, tokenIndex285
					if !(!p.flags.DisableDicePool) {
						goto l338
					}
					{
						position339 := position
						{
							add(ruleAction52, position)
						}
						{
							position341, tokenIndex341 := position, tokenIndex
							if !_rules[rulesimpleDice2]() {
								goto l341
							}
							{
								add(ruleAction53, position)
							}
							goto l342
						l341:
							position, tokenIndex = position341, tokenIndex341
						}
					l342:
						add(rulewodDicePool, position339)
					}
					{
						position344, tokenIndex344 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l345
						}
						position++
						goto l344
					l345:
						position, tokenIndex = position344, tokenIndex344
						if buffer[position] != rune('A') {
							goto l338
						}
						position++
					}
				l344:
					if !_rules[rulesimpleDice2]() {
						goto l338
					}
				l346:
					{
						position347, tokenIndex347 := position, tokenIndex
						{
							position348, tokenIndex348 := position, tokenIndex
							{
								position350, tokenIndex350 := position, tokenIndex
								if buffer[position] != rune('m') {
									goto l351
								}
								position++
								goto l350
							l351:
								position, tokenIndex = position350, tokenIndex350
								if buffer[position] != rune('M') {
									goto l349
								}
								position++
							}
						l350:
							if !_rules[rulesimpleDice2]() {
								goto l349
							}
							{
								add(ruleAction62, position)
							}
							goto l348
						l349:
							position, tokenIndex = position348, tokenIndex348
							{
								position354, tokenIndex354 := position, tokenIndex
								if buffer[position] != rune('k') {
									goto l355
								}
								position++
								goto l354
							l355:
								position, tokenIndex = position354, tokenIndex354
								if buffer[position] != rune('K') {
									goto l353
								}
								position++
							}
						l354:
							if !_rules[rulesimpleDice2]() {
								goto l353
							}
							{
								add(ruleAction63, position)
							}
							goto l348
						l353:
							position, tokenIndex = position348, tokenIndex348
							{
								position357, tokenIndex357 := position, tokenIndex
								if buffer[position] != rune('q') {
									goto l358
								}
								position++
								goto l357
							l358:
								position, tokenIndex = position357, tokenIndex357
								if buffer[position] != rune('Q') {
									goto l347
								}
								position++
							}
						l357:
							if !_rules[rulesimpleDice2]() {
								goto l347
							}
							{
								add(ruleAction64, position)
							}
						}
					l348:
						goto l346
					l347:
						position, tokenIndex = position347, tokenIndex347
					}
					{
						add(ruleAction65, position)
					}
					goto l285
				l338:
					position, tokenIndex = position285, tokenIndex285
					if !(!p.flags.DisableCrossDice) {
						goto l361
					}
					{
						position362 := position
						{
							add(ruleAction54, position)
						}
						if !_rules[rulesimpleDice2]() {
							goto l361
						}
						{
							add(ruleAction55, position)
						}
						add(ruledoubleCrossDicePool, position362)
					}
					{
						position365, tokenIndex365 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l366
						}
						position++
						goto l365
					l366:
						position, tokenIndex = position365, tokenIndex365
						if buffer[position] != rune('C') {
							goto l361
						}
						position++
					}
				l365:
					if !_rules[rulesimpleDice2]() {
						goto l361
					}
				l367:
					{
						position368, tokenIndex368 := position, tokenIndex
						{
							position369, tokenIndex369 := position, tokenIndex
							if buffer[position] != rune('m') {
								goto l370
							}
							position++
							goto l369
						l370:
							position, tokenIndex = position369, tokenIndex369
							if buffer[position] != rune('M') {
								goto l368
							}
							position++
						}
					l369:
						if !_rules[rulesimpleDice2]() {
							goto l368
						}
						{
							add(ruleAction66, position)
						}
						goto l367
					l368:
						position, tokenIndex = position368, tokenIndex368
					}
					{
						add(ruleAction67, position)
					}
					goto l285
				l361:
					position, tokenIndex = position285, tokenIndex285
					if !_rules[ruleeDice2]() {
						goto l283
					}
				l373:
					{
						position374, tokenIndex374 := position, tokenIndex
						{
							position375, tokenIndex375 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l376
							}
							position++
							goto l375
						l376:
							position, tokenIndex = position375, tokenIndex375
							if buffer[position] != rune('D') {
								goto l374
							}
							position++
						}
					l375:
						{
							add(ruleAction68, position)
						}
						{
							position378, tokenIndex378 := position, tokenIndex
							if !_rules[rulesimpleDice2]() {
								goto l379
							}
							goto l378
						l379:
							position, tokenIndex = position378, tokenIndex378
							if !(!p.flags.DisableNumDice) {
								goto l374
							}
							if !_rules[rulesp]() {
								goto l374
							}
							{
								add(ruleAction69, position)
							}
						}
					l378:
						if !_rules[rulekqDiceOp]() {
							goto l374
						}
						{
							add(ruleAction70, position)
						}
						goto l373
					l374:
						position, tokenIndex = position374, tokenIndex374
					}
				}
			l285:
				add(ruleeDice, position284)
			}
			return true
		l283:
			position, tokenIndex = position283, tokenIndex283
			return false
		},
		/* 26 laNumberOrLeftParen <- <&(number / '(')> */
		func() bool {
			position382, tokenIndex382 := position, tokenIndex
			{
				position383 := position
				{
					position384, tokenIndex384 := position, tokenIndex
					{
						position385, tokenIndex385 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l386
						}
						goto l385
					l386:
						position, tokenIndex = position385, tokenIndex385
						if buffer[position] != rune('(') {
							goto l382
						}
						position++
					}
				l385:
					position, tokenIndex = position384, tokenIndex384
				}
				add(rulelaNumberOrLeftParen, position383)
			}
			return true
		l382:
			position, tokenIndex = position382, tokenIndex382
			return false
		},
		/* 27 eDice2 <- <((&{!p.flags.DisableBPDice} eDice2x) / eDice4)> */
		func() bool {
			position387, tokenIndex387 := position, tokenIndex
			{
				position388 := position
				{
					position389, tokenIndex389 := position, tokenIndex
					if !(!p.flags.DisableBPDice) {
						goto l390
					}
					{
						position391 := position
						{
							position392, tokenIndex392 := position, tokenIndex
							{
								position394, tokenIndex394 := position, tokenIndex
								if buffer[position] != rune('p') {
									goto l395
								}
								position++
								goto l394
							l395:
								position, tokenIndex = position394, tokenIndex394
								if buffer[position] != rune('P') {
									goto l393
								}
								position++
							}
						l394:
							if !_rules[rulelaNumberOrLeftParen]() {
								goto l393
							}
							if !_rules[ruleeDice3]() {
								goto l393
							}
							{
								add(ruleAction71, position)
							}
							goto l392
						l393:
							position, tokenIndex = position392, tokenIndex392
							{
								position398, tokenIndex398 := position, tokenIndex
								if buffer[position] != rune('p') {
									goto l399
								}
								position++
								goto l398
							l399:
								position, tokenIndex = position398, tokenIndex398
								if buffer[position] != rune('P') {
									goto l397
								}
								position++
							}
						l398:
							{
								add(ruleAction72, position)
							}
							goto l392
						l397:
							position, tokenIndex = position392, tokenIndex392
							if !_rules[ruleeDice3]() {
								goto l390
							}
						}
					l392:
						add(ruleeDice2x, position391)
					}
					goto l389
				l390:
					position, tokenIndex = position389, tokenIndex389
					if !_rules[ruleeDice4]() {
						goto l387
					}
				}
			l389:
				add(ruleeDice2, position388)
			}
			return true
		l387:
			position, tokenIndex = position387, tokenIndex387
			return false
		},
		/* 28 eDice2x <- <((('p' / 'P') laNumberOrLeftParen eDice3 Action71) / (('p' / 'P') Action72) / eDice3)> */
		nil,
		/* 29 eDice3 <- <((('b' / 'B') laNumberOrLeftParen value Action73) / (('b' / 'B') Action74) / eDice4)> */
		func() bool {
			position402, tokenIndex402 := position, tokenIndex
			{
				position403 := position
				{
					position404, tokenIndex404 := position, tokenIndex
					{
						position406, tokenIndex406 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l407
						}
						position++
						goto l406
					l407:
						position, tokenIndex = position406, tokenIndex406
						if buffer[position] != rune('B') {
							goto l405
						}
						position++
					}
				l406:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l405
					}
					if !_rules[rulevalue]() {
						goto l405
					}
					{
						add(ruleAction73, position)
					}
					goto l404
				l405:
					position, tokenIndex = position404, tokenIndex404
					{
						position410, tokenIndex410 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l411
						}
						position++
						goto l410
					l411:
						position, tokenIndex = position410, tokenIndex410
						if buffer[position] != rune('B') {
							goto l409
						}
						position++
					}
				l410:
					{
						add(ruleAction74, position)
					}
					goto l404
				l409:
					position, tokenIndex = position404, tokenIndex404
					if !_rules[ruleeDice4]() {
						goto l402
					}
				}
			l404:
				add(ruleeDice3, position403)
			}
			return true
		l402:
			position, tokenIndex = position402, tokenIndex402
			return false
		},
		/* 30 eDice4 <- <((('f' / 'F') sp Action75) / value)> */
		func() bool {
			position413, tokenIndex413 := position, tokenIndex
			{
				position414 := position
				{
					position415, tokenIndex415 := position, tokenIndex
					{
						position417, tokenIndex417 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l418
						}
						position++
						goto l417
					l418:
						position, tokenIndex = position417, tokenIndex417
						if buffer[position] != rune('F') {
							goto l416
						}
						position++
					}
				l417:
					if !_rules[rulesp]() {
						goto l416
					}
					{
						add(ruleAction75, position)
					}
					goto l415
				l416:
					position, tokenIndex = position415, tokenIndex415
					if !_rules[rulevalue]() {
						goto l413
					}
				}
			l415:
				add(ruleeDice4, position414)
			}
			return true
		l413:
			position, tokenIndex = position413, tokenIndex413
			return false
		},
		/* 31 value <- <(number / ('t' 'h' 'i' 's' sp '.' sp identifier sp Action76) / ('i' 'n' 't' '(' sp e0 sp ')' sp Action77) / ('s' 't' 'r' '(' sp e0 sp ')' sp Action78) / assign_expr / (identifier Action79) / sub / fstring)> */
		func() bool {
			position420, tokenIndex420 := position, tokenIndex
			{
				position421 := position
				{
					position422, tokenIndex422 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l423
					}
					goto l422
				l423:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('t') {
						goto l424
					}
					position++
					if buffer[position] != rune('h') {
						goto l424
					}
					position++
					if buffer[position] != rune('i') {
						goto l424
					}
					position++
					if buffer[position] != rune('s') {
						goto l424
					}
					position++
					if !_rules[rulesp]() {
						goto l424
					}
					if buffer[position] != rune('.') {
						goto l424
					}
					position++
					if !_rules[rulesp]() {
						goto l424
					}
					if !_rules[ruleidentifier]() {
						goto l424
					}
					if !_rules[rulesp]() {
						goto l424
					}
					{
						add(ruleAction76, position)
					}
					goto l422
				l424:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('i') {
						goto l426
					}
					position++
					if buffer[position] != rune('n') {
						goto l426
					}
					position++
					if buffer[position] != rune('t') {
						goto l426
					}
					position++
					if buffer[position] != rune('(') {
						goto l426
					}
					position++
					if !_rules[rulesp]() {
						goto l426
					}
					if !_rules[rulee0]() {
						goto l426
					}
					if !_rules[rulesp]() {
						goto l426
					}
					if buffer[position] != rune(')') {
						goto l426
					}
					position++
					if !_rules[rulesp]() {
						goto l426
					}
					{
						add(ruleAction77, position)
					}
					goto l422
				l426:
					position, tokenIndex = position422, tokenIndex422
					if buffer[position] != rune('s') {
						goto l428
					}
					position++
					if buffer[position] != rune('t') {
						goto l428
					}
					position++
					if buffer[position] != rune('r') {
						goto l428
					}
					position++
					if buffer[position] != rune('(') {
						goto l428
					}
					position++
					if !_rules[rulesp]() {
						goto l428
					}
					if !_rules[rulee0]() {
						goto l428
					}
					if !_rules[rulesp]() {
						goto l428
					}
					if buffer[position] != rune(')') {
						goto l428
					}
					position++
					if !_rules[rulesp]() {
						goto l428
					}
					{
						add(ruleAction78, position)
					}
					goto l422
				l428:
					position, tokenIndex = position422, tokenIndex422
					if !_rules[ruleassign_expr]() {
						goto l430
					}
					goto l422
				l430:
					position, tokenIndex = position422, tokenIndex422
					if !_rules[ruleidentifier]() {
						goto l431
					}
					{
						add(ruleAction79, position)
					}
					goto l422
				l431:
					position, tokenIndex = position422, tokenIndex422
					{
						position434 := position
						{
							position435 := position
							if buffer[position] != rune('(') {
								goto l433
							}
							position++
							if !_rules[rulesp]() {
								goto l433
							}
							add(ruleopen, position435)
						}
						if !_rules[rulee0]() {
							goto l433
						}
						{
							position436 := position
							if buffer[position] != rune(')') {
								goto l433
							}
							position++
							if !_rules[rulesp]() {
								goto l433
							}
							add(ruleclose, position436)
						}
						add(rulesub, position434)
					}
					goto l422
				l433:
					position, tokenIndex = position422, tokenIndex422
					{
						position437 := position
						{
							position438, tokenIndex438 := position, tokenIndex
							if buffer[position] != rune('`') {
								goto l439
							}
							position++
							{
								add(ruleAction85, position)
							}
							{
								position441 := position
							l442:
								{
									position443, tokenIndex443 := position, tokenIndex
									{
										position444, tokenIndex444 := position, tokenIndex
										if buffer[position] != rune('{') {
											goto l445
										}
										position++
										if !_rules[rulesp]() {
											goto l445
										}
										if !_rules[rulee]() {
											goto l445
										}
										{
											add(ruleAction86, position)
										}
										if buffer[position] != rune('}') {
											goto l445
										}
										position++
										goto l444
									l445:
										position, tokenIndex = position444, tokenIndex444
										if buffer[position] != rune('{') {
											goto l447
										}
										position++
										if buffer[position] != rune('{') {
											goto l447
										}
										position++
										if !_rules[rulesp]() {
											goto l447
										}
										if !_rules[rulee]() {
											goto l447
										}
										{
											add(ruleAction87, position)
										}
										if buffer[position] != rune('}') {
											goto l447
										}
										position++
										if buffer[position] != rune('}') {
											goto l447
										}
										position++
										goto l444
									l447:
										position, tokenIndex = position444, tokenIndex444
										{
											position449 := position
											{
												position450 := position
												{
													position453, tokenIndex453 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l454
													}
													goto l453
												l454:
													position, tokenIndex = position453, tokenIndex453
													{
														position455, tokenIndex455 := position, tokenIndex
														{
															position456, tokenIndex456 := position, tokenIndex
															if buffer[position] != rune('{') {
																goto l457
															}
															position++
															goto l456
														l457:
															position, tokenIndex = position456, tokenIndex456
															if buffer[position] != rune('`') {
																goto l458
															}
															position++
															goto l456
														l458:
															position, tokenIndex = position456, tokenIndex456
															if buffer[position] != rune('\\') {
																goto l455
															}
															position++
														}
													l456:
														goto l443
													l455:
														position, tokenIndex = position455, tokenIndex455
													}
													if !matchDot() {
														goto l443
													}
												}
											l453:
											l451:
												{
													position452, tokenIndex452 := position, tokenIndex
													{
														position459, tokenIndex459 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l460
														}
														goto l459
													l460:
														position, tokenIndex = position459, tokenIndex459
														{
															position461, tokenIndex461 := position, tokenIndex
															{
																position462, tokenIndex462 := position, tokenIndex
																if buffer[position] != rune('{') {
																	goto l463
																}
																position++
																goto l462
															l463:
																position, tokenIndex = position462, tokenIndex462
																if buffer[position] != rune('`') {
																	goto l464
																}
																position++
																goto l462
															l464:
																position, tokenIndex = position462, tokenIndex462
																if buffer[position] != rune('\\') {
																	goto l461
																}
																position++
															}
														l462:
															goto l452
														l461:
															position, tokenIndex = position461, tokenIndex461
														}
														if !matchDot() {
															goto l452
														}
													}
												l459:
													goto l451
												l452:
													position, tokenIndex = position452, tokenIndex452
												}
												add(rulePegText, position450)
											}
											{
												add(ruleAction81, position)
											}
											add(rulestrPart, position449)
										}
									}
								l444:
									goto l442
								l443:
									position, tokenIndex = position443, tokenIndex443
								}
								add(rulePegText, position441)
							}
							if buffer[position] != rune('`') {
								goto l439
							}
							position++
							{
								add(ruleAction88, position)
							}
							goto l438
						l439:
							position, tokenIndex = position438, tokenIndex438
							if buffer[position] != rune('\x1e') {
								goto l467
							}
							position++
							{
								add(ruleAction89, position)
							}
							{
								position469 := position
							l470:
								{
									position471, tokenIndex471 := position, tokenIndex
									{
										position472, tokenIndex472 := position, tokenIndex
										if buffer[position] != rune('{') {
											goto l473
										}
										position++
										if !_rules[rulesp]() {
											goto l473
										}
										if !_rules[rulee]() {
											goto l473
										}
										{
											add(ruleAction90, position)
										}
										if buffer[position] != rune('}') {
											goto l473
										}
										position++
										goto l472
									l473:
										position, tokenIndex = position472, tokenIndex472
										if buffer[position] != rune('{') {
											goto l475
										}
										position++
										if buffer[position] != rune('%') {
											goto l475
										}
										position++
										if !_rules[rulesp]() {
											goto l475
										}
										if !_rules[rulee]() {
											goto l475
										}
										{
											add(ruleAction91, position)
										}
										if buffer[position] != rune('%') {
											goto l475
										}
										position++
										if buffer[position] != rune('}') {
											goto l475
										}
										position++
										goto l472
									l475:
										position, tokenIndex = position472, tokenIndex472
										{
											position477 := position
											{
												position478 := position
												{
													position481, tokenIndex481 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l482
													}
													goto l481
												l482:
													position, tokenIndex = position481, tokenIndex481
													{
														position483, tokenIndex483 := position, tokenIndex
														{
															position484, tokenIndex484 := position, tokenIndex
															if buffer[position] != rune('{') {
																goto l485
															}
															position++
															goto l484
														l485:
															position, tokenIndex = position484, tokenIndex484
															if buffer[position] != rune('\x1e') {
																goto l486
															}
															position++
															goto l484
														l486:
															position, tokenIndex = position484, tokenIndex484
															if buffer[position] != rune('\\') {
																goto l483
															}
															position++
														}
													l484:
														goto l471
													l483:
														position, tokenIndex = position483, tokenIndex483
													}
													if !matchDot() {
														goto l471
													}
												}
											l481:
											l479:
												{
													position480, tokenIndex480 := position, tokenIndex
													{
														position487, tokenIndex487 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l488
														}
														goto l487
													l488:
														position, tokenIndex = position487, tokenIndex487
														{
															position489, tokenIndex489 := position, tokenIndex
															{
																position490, tokenIndex490 := position, tokenIndex
																if buffer[position] != rune('{') {
																	goto l491
																}
																position++
																goto l490
															l491:
																position, tokenIndex = position490, tokenIndex490
																if buffer[position] != rune('\x1e') {
																	goto l492
																}
																position++
																goto l490
															l492:
																position, tokenIndex = position490, tokenIndex490
																if buffer[position] != rune('\\') {
																	goto l489
																}
																position++
															}
														l490:
															goto l480
														l489:
															position, tokenIndex = position489, tokenIndex489
														}
														if !matchDot() {
															goto l480
														}
													}
												l487:
													goto l479
												l480:
													position, tokenIndex = position480, tokenIndex480
												}
												add(rulePegText, position478)
											}
											{
												add(ruleAction82, position)
											}
											add(rulestrPart1, position477)
										}
									}
								l472:
									goto l470
								l471:
									position, tokenIndex = position471, tokenIndex471
								}
								add(rulePegText, position469)
							}
							if buffer[position] != rune('\x1e') {
								goto l467
							}
							position++
							{
								add(ruleAction92, position)
							}
							goto l438
						l467:
							position, tokenIndex = position438, tokenIndex438
							if buffer[position] != rune('"') {
								goto l495
							}
							position++
							{
								add(ruleAction93, position)
							}
							{
								position497 := position
							l498:
								{
									position499, tokenIndex499 := position, tokenIndex
									{
										position500 := position
										{
											position501 := position
											{
												position504, tokenIndex504 := position, tokenIndex
												if !_rules[ruleescape]() {
													goto l505
												}
												goto l504
											l505:
												position, tokenIndex = position504, tokenIndex504
												{
													position506, tokenIndex506 := position, tokenIndex
													{
														position507, tokenIndex507 := position, tokenIndex
														if buffer[position] != rune('"') {
															goto l508
														}
														position++
														goto l507
													l508:
														position, tokenIndex = position507, tokenIndex507
														if buffer[position] != rune('\\') {
															goto l509
														}
														position++
														goto l507
													l509:
														position, tokenIndex = position507, tokenIndex507
														if buffer[position] != rune('\n') {
															goto l510
														}
														position++
														goto l507
													l510:
														position, tokenIndex = position507, tokenIndex507
														if buffer[position] != rune('\r') {
															goto l506
														}
														position++
													}
												l507:
													goto l499
												l506:
													position, tokenIndex = position506, tokenIndex506
												}
												if !matchDot() {
													goto l499
												}
											}
										l504:
										l502:
											{
												position503, tokenIndex503 := position, tokenIndex
												{
													position511, tokenIndex511 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l512
													}
													goto l511
												l512:
													position, tokenIndex = position511, tokenIndex511
													{
														position513, tokenIndex513 := position, tokenIndex
														{
															position514, tokenIndex514 := position, tokenIndex
															if buffer[position] != rune('"') {
																goto l515
															}
															position++
															goto l514
														l515:
															position, tokenIndex = position514, tokenIndex514
															if buffer[position] != rune('\\') {
																goto l516
															}
															position++
															goto l514
														l516:
															position, tokenIndex = position514, tokenIndex514
															if buffer[position] != rune('\n') {
																goto l517
															}
															position++
															goto l514
														l517:
															position, tokenIndex = position514, tokenIndex514
															if buffer[position] != rune('\r') {
																goto l513
															}
															position++
														}
													l514:
														goto l503
													l513:
														position, tokenIndex = position513, tokenIndex513
													}
													if !matchDot() {
														goto l503
													}
												}
											l511:
												goto l502
											l503:
												position, tokenIndex = position503, tokenIndex503
											}
											add(rulePegText, position501)
										}
										{
											add(ruleAction83, position)
										}
										add(rulestrPart2, position500)
									}
									goto l498
								l499:
									position, tokenIndex = position499, tokenIndex499
								}
								add(rulePegText, position497)
							}
							if buffer[position] != rune('"') {
								goto l495
							}
							position++
							{
								add(ruleAction94, position)
							}
							goto l438
						l495:
							position, tokenIndex = position438, tokenIndex438
							if buffer[position] != rune('\'') {
								goto l420
							}
							position++
							{
								add(ruleAction95, position)
							}
							{
								position521 := position
							l522:
								{
									position523, tokenIndex523 := position, tokenIndex
									{
										position524 := position
										{
											position525 := position
											{
												position528, tokenIndex528 := position, tokenIndex
												if !_rules[ruleescape]() {
													goto l529
												}
												goto l528
											l529:
												position, tokenIndex = position528, tokenIndex528
												{
													position530, tokenIndex530 := position, tokenIndex
													{
														position531, tokenIndex531 := position, tokenIndex
														if buffer[position] != rune('\'') {
															goto l532
														}
														position++
														goto l531
													l532:
														position, tokenIndex = position531, tokenIndex531
														if buffer[position] != rune('\\') {
															goto l533
														}
														position++
														goto l531
													l533:
														position, tokenIndex = position531, tokenIndex531
														if buffer[position] != rune('\n') {
															goto l534
														}
														position++
														goto l531
													l534:
														position, tokenIndex = position531, tokenIndex531
														if buffer[position] != rune('\r') {
															goto l530
														}
														position++
													}
												l531:
													goto l523
												l530:
													position, tokenIndex = position530, tokenIndex530
												}
												if !matchDot() {
													goto l523
												}
											}
										l528:
										l526:
											{
												position527, tokenIndex527 := position, tokenIndex
												{
													position535, tokenIndex535 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l536
													}
													goto l535
												l536:
													position, tokenIndex = position535, tokenIndex535
													{
														position537, tokenIndex537 := position, tokenIndex
														{
															position538, tokenIndex538 := position, tokenIndex
															if buffer[position] != rune('\'') {
																goto l539
															}
															position++
															goto l538
														l539:
															position, tokenIndex = position538, tokenIndex538
															if buffer[position] != rune('\\') {
																goto l540
															}
															position++
															goto l538
														l540:
															position, tokenIndex = position538, tokenIndex538
															if buffer[position] != rune('\n') {
																goto l541
															}
															position++
															goto l538
														l541:
															position, tokenIndex = position538, tokenIndex538
															if buffer[position] != rune('\r') {
																goto l537
															}
															position++
														}
													l538:
														goto l527
													l537:
														position, tokenIndex = position537, tokenIndex537
													}
													if !matchDot() {
														goto l527
													}
												}
											l535:
												goto l526
											l527:
												position, tokenIndex = position527, tokenIndex527
											}
											add(rulePegText, position525)
										}
										{
											add(ruleAction84, position)
										}
										add(rulestrPart3, position524)
									}
									goto l522
								l523:
									position, tokenIndex = position523, tokenIndex523
								}
								add(rulePegText, position521)
							}
							if buffer[position] != rune('\'') {
								goto l420
							}
							position++
							{
								add(ruleAction96, position)
							}
						}
					l438:
						if !_rules[rulesp]() {
							goto l420
						}
						add(rulefstring, position437)
					}
				}
			l422:
				add(rulevalue, position421)
			}
			return true
		l420:
			position, tokenIndex = position420, tokenIndex420
			return false
		},
		/* 32 number <- <(<[0-9]+> sp Action80)> */
		func() bool {
			position544, tokenIndex544 := position, tokenIndex
			{
				position545 := position
				{
					position546 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l544
					}
					position++
				l547:
					{
						position548, tokenIndex548 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l548
						}
						position++
						goto l547
					l548:
						position, tokenIndex = position548, tokenIndex548
					}
					add(rulePegText, position546)
				}
				if !_rules[rulesp]() {
					goto l544
				}
				{
					add(ruleAction80, position)
				}
				add(rulenumber, position545)
			}
			return true
		l544:
			position, tokenIndex = position544, tokenIndex544
			return false
		},
		/* 33 identifier <- <(<(!('!' / '"' / '#' / '%' / '&' / '\'' / '(' / ')' / '*' / '+' / [,-.] / '/' / ':' / ';' / '<' / '=' / '>' / '?' / '@' / '[' / '\\' / ']' / '^' / '`' / '{' / '|' / '}' / '~' / [0-9] / ' ' / '\t' / '\n' / '\r' / '\x1e') . (!('!' / '"' / '#' / '$' / '%' / '&' / '\'' / '(' / ')' / '*' / '+' / [,-.] / '/' / ';' / '<' / '=' / '>' / '?' / '@' / '[' / '\\' / ']' / '^' / '`' / '{' / '|' / '}' / '~' / ' ' / '\t' / '\n' / '\r' / '\x1e') .)*)> sp)> */
		func() bool {
			position550, tokenIndex550 := position, tokenIndex
			{
				position551 := position
				{
					position552 := position
					{
						position553, tokenIndex553 := position, tokenIndex
						{
							position554, tokenIndex554 := position, tokenIndex
							if buffer[position] != rune('!') {
								goto l555
							}
							position++
							goto l554
						l555:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('"') {
								goto l556
							}
							position++
							goto l554
						l556:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('#') {
								goto l557
							}
							position++
							goto l554
						l557:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('%') {
								goto l558
							}
							position++
							goto l554
						l558:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('&') {
								goto l559
							}
							position++
							goto l554
						l559:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('\'') {
								goto l560
							}
							position++
							goto l554
						l560:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('(') {
								goto l561
							}
							position++
							goto l554
						l561:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune(')') {
								goto l562
							}
							position++
							goto l554
						l562:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('*') {
								goto l563
							}
							position++
							goto l554
						l563:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('+') {
								goto l564
							}
							position++
							goto l554
						l564:
							position, tokenIndex = position554, tokenIndex554
							if c := buffer[position]; c < rune(',') || c > rune('.') {
								goto l565
							}
							position++
							goto l554
						l565:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('/') {
								goto l566
							}
							position++
							goto l554
						l566:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune(':') {
								goto l567
							}
							position++
							goto l554
						l567:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune(';') {
								goto l568
							}
							position++
							goto l554
						l568:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('<') {
								goto l569
							}
							position++
							goto l554
						l569:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('=') {
								goto l570
							}
							position++
							goto l554
						l570:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('>') {
								goto l571
							}
							position++
							goto l554
						l571:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('?') {
								goto l572
							}
							position++
							goto l554
						l572:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('@') {
								goto l573
							}
							position++
							goto l554
						l573:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('[') {
								goto l574
							}
							position++
							goto l554
						l574:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('\\') {
								goto l575
							}
							position++
							goto l554
						l575:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune(']') {
								goto l576
							}
							position++
							goto l554
						l576:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('^') {
								goto l577
							}
							position++
							goto l554
						l577:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('`') {
								goto l578
							}
							position++
							goto l554
						l578:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('{') {
								goto l579
							}
							position++
							goto l554
						l579:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('|') {
								goto l580
							}
							position++
							goto l554
						l580:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('}') {
								goto l581
							}
							position++
							goto l554
						l581:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('~') {
								goto l582
							}
							position++
							goto l554
						l582:
							position, tokenIndex = position554, tokenIndex554
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l583
							}
							position++
							goto l554
						l583:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune(' ') {
								goto l584
							}
							position++
							goto l554
						l584:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('\t') {
								goto l585
							}
							position++
							goto l554
						l585:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('\n') {
								goto l586
							}
							position++
							goto l554
						l586:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('\r') {
								goto l587
							}
							position++
							goto l554
						l587:
							position, tokenIndex = position554, tokenIndex554
							if buffer[position] != rune('\x1e') {
								goto l553
							}
							position++
						}
					l554:
						goto l550
					l553:
						position, tokenIndex = position553, tokenIndex553
					}
					if !matchDot() {
						goto l550
					}
				l588:
					{
						position589, tokenIndex589 := position, tokenIndex
						{
							position590, tokenIndex590 := position, tokenIndex
							{
								position591, tokenIndex591 := position, tokenIndex
								if buffer[position] != rune('!') {
									goto l592
								}
								position++
								goto l591
							l592:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('"') {
									goto l593
								}
								position++
								goto l591
							l593:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('#') {
									goto l594
								}
								position++
								goto l591
							l594:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('$') {
									goto l595
								}
								position++
								goto l591
							l595:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('%') {
									goto l596
								}
								position++
								goto l591
							l596:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('&') {
									goto l597
								}
								position++
								goto l591
							l597:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('\'') {
									goto l598
								}
								position++
								goto l591
							l598:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('(') {
									goto l599
								}
								position++
								goto l591
							l599:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune(')') {
									goto l600
								}
								position++
								goto l591
							l600:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('*') {
									goto l601
								}
								position++
								goto l591
							l601:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('+') {
									goto l602
								}
								position++
								goto l591
							l602:
								position, tokenIndex = position591, tokenIndex591
								if c := buffer[position]; c < rune(',') || c > rune('.') {
									goto l603
								}
								position++
								goto l591
							l603:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('/') {
									goto l604
								}
								position++
								goto l591
							l604:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune(';') {
									goto l605
								}
								position++
								goto l591
							l605:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('<') {
									goto l606
								}
								position++
								goto l591
							l606:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('=') {
									goto l607
								}
								position++
								goto l591
							l607:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('>') {
									goto l608
								}
								position++
								goto l591
							l608:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('?') {
									goto l609
								}
								position++
								goto l591
							l609:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('@') {
									goto l610
								}
								position++
								goto l591
							l610:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('[') {
									goto l611
								}
								position++
								goto l591
							l611:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('\\') {
									goto l612
								}
								position++
								goto l591
							l612:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune(']') {
									goto l613
								}
								position++
								goto l591
							l613:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('^') {
									goto l614
								}
								position++
								goto l591
							l614:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('`') {
									goto l615
								}
								position++
								goto l591
							l615:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('{') {
									goto l616
								}
								position++
								goto l591
							l616:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('|') {
									goto l617
								}
								position++
								goto l591
							l617:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('}') {
									goto l618
								}
								position++
								goto l591
							l618:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('~') {
									goto l619
								}
								position++
								goto l591
							l619:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune(' ') {
									goto l620
								}
								position++
								goto l591
							l620:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('\t') {
									goto l621
								}
								position++
								goto l591
							l621:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('\n') {
									goto l622
								}
								position++
								goto l591
							l622:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('\r') {
									goto l623
								}
								position++
								goto l591
							l623:
								position, tokenIndex = position591, tokenIndex591
								if buffer[position] != rune('\x1e') {
									goto l590
								}
								position++
							}
						l591:
							goto l589
						l590:
							position, tokenIndex = position590, tokenIndex590
						}
						if !matchDot() {
							goto l589
						}
						goto l588
					l589:
						position, tokenIndex = position589, tokenIndex589
					}
					add(rulePegText, position552)
				}
				if !_rules[rulesp]() {
					goto l550
				}
				add(ruleidentifier, position551)
			}
			return true
		l550:
			position, tokenIndex = position550, tokenIndex550
			return false
		},
		/* 34 sub <- <(open e0 close)> */
		nil,
		/* 35 add <- <(('+' / '＋') sp)> */
		func() bool {
			position625, tokenIndex625 := position, tokenIndex
			{
				position626 := position
				{
					position627, tokenIndex627 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l628
					}
					position++
					goto l627
				l628:
					position, tokenIndex = position627, tokenIndex627
					if buffer[position] != rune('＋') {
						goto l625
					}
					position++
				}
			l627:
				if !_rules[rulesp]() {
					goto l625
				}
				add(ruleadd, position626)
			}
			return true
		l625:
			position, tokenIndex = position625, tokenIndex625
			return false
		},
		/* 36 minus <- <(('-' / '－') sp)> */
		func() bool {
			position629, tokenIndex629 := position, tokenIndex
			{
				position630 := position
				{
					position631, tokenIndex631 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l632
					}
					position++
					goto l631
				l632:
					position, tokenIndex = position631, tokenIndex631
					if buffer[position] != rune('－') {
						goto l629
					}
					position++
				}
			l631:
				if !_rules[rulesp]() {
					goto l629
				}
				add(ruleminus, position630)
			}
			return true
		l629:
			position, tokenIndex = position629, tokenIndex629
			return false
		},
		/* 37 multiply <- <(('*' / '＊') sp)> */
		nil,
		/* 38 divide <- <(('/' / '／') sp)> */
		nil,
		/* 39 modulus <- <('%' sp)> */
		nil,
		/* 40 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 41 open <- <('(' sp)> */
		nil,
		/* 42 close <- <(')' sp)> */
		nil,
		/* 43 bitwiseOr <- <('|' sp)> */
		nil,
		/* 44 logicOr <- <('|' '|' sp)> */
		nil,
		/* 45 bitwiseAnd <- <(('&' / ('&' 'a' 'm' 'p' ';')) sp)> */
		nil,
		/* 46 logicAnd <- <((('&' '&') / ('&' 'a' 'm' 'p' ';' '&' 'a' 'm' 'p' ';')) sp)> */
		nil,
		/* 47 sp <- <(' ' / '\t' / '\n' / '\r' / ('/' '/' (!'\n' .)*))*> */
		func() bool {
			{
				position644 := position
			l645:
				{
					position646, tokenIndex646 := position, tokenIndex
					{
						position647, tokenIndex647 := position, tokenIndex
						if buffer[position] != rune(' ') {
							goto l648
						}
						position++
						goto l647
					l648:
						position, tokenIndex = position647, tokenIndex647
						if buffer[position] != rune('\t') {
							goto l649
						}
						position++
						goto l647
					l649:
						position, tokenIndex = position647, tokenIndex647
						if buffer[position] != rune('\n') {
							goto l650
						}
						position++
						goto l647
					l650:
						position, tokenIndex = position647, tokenIndex647
						if buffer[position] != rune('\r') {
							goto l651
						}
						position++
						goto l647
					l651:
						position, tokenIndex = position647, tokenIndex647
						if buffer[position] != rune('/') {
							goto l646
						}
						position++
						if buffer[position] != rune('/') {
							goto l646
						}
						position++
					l652:
						{
							position653, tokenIndex653 := position, tokenIndex
							{
								position654, tokenIndex654 := position, tokenIndex
								if buffer[position] != rune('\n') {
									goto l654
								}
								position++
								goto l653
							l654:
								position, tokenIndex = position654, tokenIndex654
							}
							if !matchDot() {
								goto l653
							}
							goto l652
						l653:
							position, tokenIndex = position653, tokenIndex653
						}
					}
				l647:
					goto l645
				l646:
					position, tokenIndex = position646, tokenIndex646
				}
				add(rulesp, position644)
			}
			return true
		},
		/* 48 lt <- <(('<' / '＜') sp)> */
		nil,
		/* 49 gt <- <(('>' / '＞') sp)> */
		nil,
		/* 50 le <- <((('<' '=') / ('＜' '＝')) sp)> */
		nil,
		/* 51 ge <- <((('>' '=') / ('＞' '＝')) sp)> */
		nil,
		/* 52 eq <- <((('=' '=') / ('＝' '＝')) sp)> */
		nil,
		/* 53 ne <- <((('!' '=') / ('！' '＝')) sp)> */
		nil,
		/* 54 strPart <- <(<(escape / (!('{' / '`' / '\\') .))+> Action81)> */
		nil,
		/* 55 strPart1 <- <(<(escape / (!('{' / '\x1e' / '\\') .))+> Action82)> */
		nil,
		/* 56 strPart2 <- <(<(escape / (!('"' / '\\' / '\n' / '\r') .))+> Action83)> */
		nil,
		/* 57 strPart3 <- <(<(escape / (!('\'' / '\\' / '\n' / '\r') .))+> Action84)> */
		nil,
		/* 58 fstring <- <((('`' Action85 <(('{' sp e Action86 '}') / ('{' '{' sp e Action87 ('}' '}')) / strPart)*> '`' Action88) / ('\x1e' Action89 <(('{' sp e Action90 '}') / ('{' '%' sp e Action91 ('%' '}')) / strPart1)*> '\x1e' Action92) / ('"' Action93 <strPart2*> '"' Action94) / ('\'' Action95 <strPart3*> '\'' Action96)) sp)> */
		nil,
		/* 59 escape <- <('\\' ('b' / 't' / 'n' / 'f' / 'r' / '"' / '\'' / '\\'))> */
		func() bool {
			position666, tokenIndex666 := position, tokenIndex
			{
				position667 := position
				if buffer[position] != rune('\\') {
					goto l666
				}
				position++
				{
					position668, tokenIndex668 := position, tokenIndex
					if buffer[position] != rune('b') {
						goto l669
					}
					position++
					goto l668
				l669:
					position, tokenIndex = position668, tokenIndex668
					if buffer[position] != rune('t') {
						goto l670
					}
					position++
					goto l668
				l670:
					position, tokenIndex = position668, tokenIndex668
					if buffer[position] != rune('n') {
						goto l671
					}
					position++
					goto l668
				l671:
					position, tokenIndex = position668, tokenIndex668
					if buffer[position] != rune('f') {
						goto l672
					}
					position++
					goto l668
				l672:
					position, tokenIndex = position668, tokenIndex668
					if buffer[position] != rune('r') {
						goto l673
					}
					position++
					goto l668
				l673:
					position, tokenIndex = position668, tokenIndex668
					if buffer[position] != rune('"') {
						goto l674
					}
					position++
					goto l668
				l674:
					position, tokenIndex = position668, tokenIndex668
					if buffer[position] != rune('\'') {
						goto l675
					}
					position++
					goto l668
				l675:
					position, tokenIndex = position668, tokenIndex668
					if buffer[position] != rune('\\') {
						goto l666
					}
					position++
				}
			l668:
				add(ruleescape, position667)
			}
			return true
		l666:
			position, tokenIndex = position666, tokenIndex666
			return false
		},
		/* 60 st_expr <- <(st_modify_multi_1 / st_assign_multi / st_modify_multi_2)> */
		nil,
		/* 61 est <- <((&'(' e0) / (!{p.flags.DisableBitwiseOp = true} !{p.flags.DisableNumDice = true} !{p.flags.DisableCrossDice = true} !{p.flags.DisableDicePool = true} e0 !{p.flags.DisableBitwiseOp = false} !{p.flags.DisableNumDice = false} !{p.flags.DisableCrossDice = false} !{p.flags.DisableDicePool = false}))> */
		func() bool {
			position677, tokenIndex677 := position, tokenIndex
			{
				position678 := position
				{
					position679, tokenIndex679 := position, tokenIndex
					{
						position681, tokenIndex681 := position, tokenIndex
						if buffer[position] != rune('(') {
							goto l680
						}
						position++
						position, tokenIndex = position681, tokenIndex681
					}
					if !_rules[rulee0]() {
						goto l680
					}
					goto l679
				l680:
					position, tokenIndex = position679, tokenIndex679
					p.flags.DisableBitwiseOp = true
					p.flags.DisableNumDice = true
					p.flags.DisableCrossDice = true
					p.flags.DisableDicePool = true
					if !_rules[rulee0]() {
						goto l677
					}
					p.flags.DisableBitwiseOp = false
					p.flags.DisableNumDice = false
					p.flags.DisableCrossDice = false
					p.flags.DisableDicePool = false
				}
			l679:
				add(ruleest, position678)
			}
			return true
		l677:
			position, tokenIndex = position677, tokenIndex677
			return false
		},
		/* 62 st_assign_multi <- <(st_assign sp ','? sp)+> */
		nil,
		/* 63 st_assign <- <((st_name2 sp (':' / '=') sp est Action97) / (st_name1 est Action98) / (st_name2r sp (':' / '=') sp est Action99) / (st_name1r est Action100) / ('&' st_name2 sp (':' / '=') sp Action101 <est> Action102) / ('&' st_name2r sp (':' / '=') sp Action103 <est> Action104))> */
		nil,
		/* 64 st_modify_multi_1 <- <(((st_name2 st_modify_rest1) / (st_name2r st_modify_rest1) / (st_name1 st_modify_rest) / (st_name1r st_modify_rest)) sp ','? sp st_modify_multi_rest)> */
		nil,
		/* 65 st_modify_rest1 <- <(sp (('+' '=' sp <e0> Action105) / ('-' '=' sp <e0> Action106)))> */
		func() bool {
			position685, tokenIndex685 := position, tokenIndex
			{
				position686 := position
				if !_rules[rulesp]() {
					goto l685
				}
				{
					position687, tokenIndex687 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l688
					}
					position++
					if buffer[position] != rune('=') {
						goto l688
					}
					position++
					if !_rules[rulesp]() {
						goto l688
					}
					{
						position689 := position
						if !_rules[rulee0]() {
							goto l688
						}
						add(rulePegText, position689)
					}
					{
						add(ruleAction105, position)
					}
					goto l687
				l688:
					position, tokenIndex = position687, tokenIndex687
					if buffer[position] != rune('-') {
						goto l685
					}
					position++
					if buffer[position] != rune('=') {
						goto l685
					}
					position++
					if !_rules[rulesp]() {
						goto l685
					}
					{
						position691 := position
						if !_rules[rulee0]() {
							goto l685
						}
						add(rulePegText, position691)
					}
					{
						add(ruleAction106, position)
					}
				}
			l687:
				add(rulest_modify_rest1, position686)
			}
			return true
		l685:
			position, tokenIndex = position685, tokenIndex685
			return false
		},
		/* 66 st_modify_multi_2 <- <(st_modify2 sp ','? sp st_modify_multi_rest)> */
		nil,
		/* 67 st_modify_multi_rest <- <(st_modify2 sp ','? sp)*> */
		func() bool {
			{
				position695 := position
			l696:
				{
					position697, tokenIndex697 := position, tokenIndex
					if !_rules[rulest_modify2]() {
						goto l697
					}
					if !_rules[rulesp]() {
						goto l697
					}
					{
						position698, tokenIndex698 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l698
						}
						position++
						goto l699
					l698:
						position, tokenIndex = position698, tokenIndex698
					}
				l699:
					if !_rules[rulesp]() {
						goto l697
					}
					goto l696
				l697:
					position, tokenIndex = position697, tokenIndex697
				}
				add(rulest_modify_multi_rest, position695)
			}
			return true
		},
		/* 68 st_modify2 <- <((st_name2 st_modify_rest) / (st_name2r st_modify_rest))> */
		func() bool {
			position700, tokenIndex700 := position, tokenIndex
			{
				position701 := position
				{
					position702, tokenIndex702 := position, tokenIndex
					if !_rules[rulest_name2]() {
						goto l703
					}
					if !_rules[rulest_modify_rest]() {
						goto l703
					}
					goto l702
				l703:
					position, tokenIndex = position702, tokenIndex702
					if !_rules[rulest_name2r]() {
						goto l700
					}
					if !_rules[rulest_modify_rest]() {
						goto l700
					}
				}
			l702:
				add(rulest_modify2, position701)
			}
			return true
		l700:
			position, tokenIndex = position700, tokenIndex700
			return false
		},
		/* 69 st_modify_rest <- <(sp (('+' '='? sp <e0> Action107) / (&'-' sp <e0> Action108) / ('-' '='? sp <e0> Action109)))> */
		func() bool {
			position704, tokenIndex704 := position, tokenIndex
			{
				position705 := position
				if !_rules[rulesp]() {
					goto l704
				}
				{
					position706, tokenIndex706 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l707
					}
					position++
					{
						position708, tokenIndex708 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l708
						}
						position++
						goto l709
					l708:
						position, tokenIndex = position708, tokenIndex708
					}
				l709:
					if !_rules[rulesp]() {
						goto l707
					}
					{
						position710 := position
						if !_rules[rulee0]() {
							goto l707
						}
						add(rulePegText, position710)
					}
					{
						add(ruleAction107, position)
					}
					goto l706
				l707:
					position, tokenIndex = position706, tokenIndex706
					{
						position713, tokenIndex713 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l712
						}
						position++
						position, tokenIndex = position713, tokenIndex713
					}
					if !_rules[rulesp]() {
						goto l712
					}
					{
						position714 := position
						if !_rules[rulee0]() {
							goto l712
						}
						add(rulePegText, position714)
					}
					{
						add(ruleAction108, position)
					}
					goto l706
				l712:
					position, tokenIndex = position706, tokenIndex706
					if buffer[position] != rune('-') {
						goto l704
					}
					position++
					{
						position716, tokenIndex716 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l716
						}
						position++
						goto l717
					l716:
						position, tokenIndex = position716, tokenIndex716
					}
				l717:
					if !_rules[rulesp]() {
						goto l704
					}
					{
						position718 := position
						if !_rules[rulee0]() {
							goto l704
						}
						add(rulePegText, position718)
					}
					{
						add(ruleAction109, position)
					}
				}
			l706:
				add(rulest_modify_rest, position705)
			}
			return true
		l704:
			position, tokenIndex = position704, tokenIndex704
			return false
		},
		/* 70 st_name1 <- <(<(id_ch0+ ':' id_ch0+)> Action110)> */
		func() bool {
			position720, tokenIndex720 := position, tokenIndex
			{
				position721 := position
				{
					position722 := position
					if !_rules[ruleid_ch0]() {
						goto l720
					}
				l723:
					{
						position724, tokenIndex724 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l724
						}
						goto l723
					l724:
						position, tokenIndex = position724, tokenIndex724
					}
					if buffer[position] != rune(':') {
						goto l720
					}
					position++
					if !_rules[ruleid_ch0]() {
						goto l720
					}
				l725:
					{
						position726, tokenIndex726 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l726
						}
						goto l725
					l726:
						position, tokenIndex = position726, tokenIndex726
					}
					add(rulePegText, position722)
				}
				{
					add(ruleAction110, position)
				}
				add(rulest_name1, position721)
			}
			return true
		l720:
			position, tokenIndex = position720, tokenIndex720
			return false
		},
		/* 71 st_name1r <- <(<id_ch0+> Action111)> */
		func() bool {
			position728, tokenIndex728 := position, tokenIndex
			{
				position729 := position
				{
					position730 := position
					if !_rules[ruleid_ch0]() {
						goto l728
					}
				l731:
					{
						position732, tokenIndex732 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l732
						}
						goto l731
					l732:
						position, tokenIndex = position732, tokenIndex732
					}
					add(rulePegText, position730)
				}
				{
					add(ruleAction111, position)
				}
				add(rulest_name1r, position729)
			}
			return true
		l728:
			position, tokenIndex = position728, tokenIndex728
			return false
		},
		/* 72 st_name2 <- <(<(id_ch0 id_ch* (':' id_ch+))> Action112)> */
		func() bool {
			position734, tokenIndex734 := position, tokenIndex
			{
				position735 := position
				{
					position736 := position
					if !_rules[ruleid_ch0]() {
						goto l734
					}
				l737:
					{
						position738, tokenIndex738 := position, tokenIndex
						if !_rules[ruleid_ch]() {
							goto l738
						}
						goto l737
					l738:
						position, tokenIndex = position738, tokenIndex738
					}
					if buffer[position] != rune(':') {
						goto l734
					}
					position++
					if !_rules[ruleid_ch]() {
						goto l734
					}
				l739:
					{
						position740, tokenIndex740 := position, tokenIndex
						if !_rules[ruleid_ch]() {
							goto l740
						}
						goto l739
					l740:
						position, tokenIndex = position740, tokenIndex740
					}
					add(rulePegText, position736)
				}
				{
					add(ruleAction112, position)
				}
				add(rulest_name2, position735)
			}
			return true
		l734:
			position, tokenIndex = position734, tokenIndex734
			return false
		},
		/* 73 st_name2r <- <((<(id_ch0 id_ch*)> Action113) / ('\'' <(id_ch0 / [0-9] / ' ' / ':')+> '\'' Action114))> */
		func() bool {
			position742, tokenIndex742 := position, tokenIndex
			{
				position743 := position
				{
					position744, tokenIndex744 := position, tokenIndex
					{
						position746 := position
						if !_rules[ruleid_ch0]() {
							goto l745
						}
					l747:
						{
							position748, tokenIndex748 := position, tokenIndex
							if !_rules[ruleid_ch]() {
								goto l748
							}
							goto l747
						l748:
							position, tokenIndex = position748, tokenIndex748
						}
						add(rulePegText, position746)
					}
					{
						add(ruleAction113, position)
					}
					goto l744
				l745:
					position, tokenIndex = position744, tokenIndex744
					if buffer[position] != rune('\'') {
						goto l742
					}
					position++
					{
						position750 := position
						{
							position753, tokenIndex753 := position, tokenIndex
							if !_rules[ruleid_ch0]() {
								goto l754
							}
							goto l753
						l754:
							position, tokenIndex = position753, tokenIndex753
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l755
							}
							position++
							goto l753
						l755:
							position, tokenIndex = position753, tokenIndex753
							if buffer[position] != rune(' ') {
								goto l756
							}
							position++
							goto l753
						l756:
							position, tokenIndex = position753, tokenIndex753
							if buffer[position] != rune(':') {
								goto l742
							}
							position++
						}
					l753:
					l751:
						{
							position752, tokenIndex752 := position, tokenIndex
							{
								position757, tokenIndex757 := position, tokenIndex
								if !_rules[ruleid_ch0]() {
									goto l758
								}
								goto l757
							l758:
								position, tokenIndex = position757, tokenIndex757
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l759
								}
								position++
								goto l757
							l759:
								position, tokenIndex = position757, tokenIndex757
								if buffer[position] != rune(' ') {
									goto l760
								}
								position++
								goto l757
							l760:
								position, tokenIndex = position757, tokenIndex757
								if buffer[position] != rune(':') {
									goto l752
								}
								position++
							}
						l757:
							goto l751
						l752:
							position, tokenIndex = position752, tokenIndex752
						}
						add(rulePegText, position750)
					}
					if buffer[position] != rune('\'') {
						goto l742
					}
					position++
					{
						add(ruleAction114, position)
					}
				}
			l744:
				add(rulest_name2r, position743)
			}
			return true
		l742:
			position, tokenIndex = position742, tokenIndex742
			return false
		},
		/* 74 id_ch0 <- <(!('!' / '"' / '#' / '$' / '%' / '&' / '\'' / '(' / ')' / '*' / '+' / [,-.] / ':' / ';' / '<' / '=' / '>' / '?' / '@' / '[' / '\\' / ']' / '^' / '`' / '{' / '|' / '}' / '~' / ' ' / [0-9] / '\t' / '\n' / '\r' / '\x1e') .)> */
		func() bool {
			position762, tokenIndex762 := position, tokenIndex
			{
				position763 := position
				{
					position764, tokenIndex764 := position, tokenIndex
					{
						position765, tokenIndex765 := position, tokenIndex
						if buffer[position] != rune('!') {
							goto l766
						}
						position++
						goto l765
					l766:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('"') {
							goto l767
						}
						position++
						goto l765
					l767:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('#') {
							goto l768
						}
						position++
						goto l765
					l768:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('$') {
							goto l769
						}
						position++
						goto l765
					l769:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('%') {
							goto l770
						}
						position++
						goto l765
					l770:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('&') {
							goto l771
						}
						position++
						goto l765
					l771:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('\'') {
							goto l772
						}
						position++
						goto l765
					l772:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('(') {
							goto l773
						}
						position++
						goto l765
					l773:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune(')') {
							goto l774
						}
						position++
						goto l765
					l774:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('*') {
							goto l775
						}
						position++
						goto l765
					l775:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('+') {
							goto l776
						}
						position++
						goto l765
					l776:
						position, tokenIndex = position765, tokenIndex765
						if c := buffer[position]; c < rune(',') || c > rune('.') {
							goto l777
						}
						position++
						goto l765
					l777:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune(':') {
							goto l778
						}
						position++
						goto l765
					l778:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune(';') {
							goto l779
						}
						position++
						goto l765
					l779:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('<') {
							goto l780
						}
						position++
						goto l765
					l780:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('=') {
							goto l781
						}
						position++
						goto l765
					l781:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('>') {
							goto l782
						}
						position++
						goto l765
					l782:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('?') {
							goto l783
						}
						position++
						goto l765
					l783:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('@') {
							goto l784
						}
						position++
						goto l765
					l784:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('[') {
							goto l785
						}
						position++
						goto l765
					l785:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('\\') {
							goto l786
						}
						position++
						goto l765
					l786:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune(']') {
							goto l787
						}
						position++
						goto l765
					l787:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('^') {
							goto l788
						}
						position++
						goto l765
					l788:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('`') {
							goto l789
						}
						position++
						goto l765
					l789:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('{') {
							goto l790
						}
						position++
						goto l765
					l790:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('|') {
							goto l791
						}
						position++
						goto l765
					l791:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('}') {
							goto l792
						}
						position++
						goto l765
					l792:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('~') {
							goto l793
						}
						position++
						goto l765
					l793:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune(' ') {
							goto l794
						}
						position++
						goto l765
					l794:
						position, tokenIndex = position765, tokenIndex765
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l795
						}
						position++
						goto l765
					l795:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('\t') {
							goto l796
						}
						position++
						goto l765
					l796:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('\n') {
							goto l797
						}
						position++
						goto l765
					l797:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('\r') {
							goto l798
						}
						position++
						goto l765
					l798:
						position, tokenIndex = position765, tokenIndex765
						if buffer[position] != rune('\x1e') {
							goto l764
						}
						position++
					}
				l765:
					goto l762
				l764:
					position, tokenIndex = position764, tokenIndex764
				}
				if !matchDot() {
					goto l762
				}
				add(ruleid_ch0, position763)
			}
			return true
		l762:
			position, tokenIndex = position762, tokenIndex762
			return false
		},
		/* 75 id_ch <- <id_ch0> */
		func() bool {
			position799, tokenIndex799 := position, tokenIndex
			{
				position800 := position
				if !_rules[ruleid_ch0]() {
					goto l799
				}
				add(ruleid_ch, position800)
			}
			return true
		l799:
			position, tokenIndex = position799, tokenIndex799
			return false
		},
		/* 77 Action0 <- <{ p.AddOperator(TypeHalt) }> */
		nil,
		/* 78 Action1 <- <{ p.AddOperator(TypeClearDetail) }> */
		nil,
		/* 79 Action2 <- <{ p.AddValueStr(string(text)) }> */
		nil,
		/* 80 Action3 <- <{ p.AddStore() }> */
		nil,
		/* 81 Action4 <- <{p.AddOperator(TypePop)}> */
		nil,
		/* 82 Action5 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 83 Action6 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset(); }> */
		nil,
		/* 84 Action7 <- <{ p.PopAndSetOffset() }> */
		nil,
		/* 85 Action8 <- <{ p.AddValueStr(""); }> */
		nil,
		/* 86 Action9 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 87 Action10 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset(); }> */
		nil,
		/* 88 Action11 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 89 Action12 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset() }> */
		nil,
		/* 90 Action13 <- <{ p.PopAndSetOffset() }> */
		nil,
		/* 91 Action14 <- <{ p.CounterPush() }> */
		nil,
		/* 92 Action15 <- <{p.CounterAdd(1)}> */
		nil,
		/* 93 Action16 <- <{ p.AddValueStr(""); limit:=p.CounterPop()+1; for i:=int64(0); i<limit; i++ { p.PopAndSetOffset() } }> */
		nil,
		/* 94 Action17 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 95 Action18 <- <{ p.AddOperator(TypeBitwiseOr) }> */
		nil,
		/* 96 Action19 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 97 Action20 <- <{ p.AddOperator(TypeBitwiseAnd) }> */
		nil,
		/* 98 Action21 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 99 Action22 <- <{ p.AddOperator(TypeCompLT) }> */
		nil,
		/* 100 Action23 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 101 Action24 <- <{ p.AddOperator(TypeCompLE) }> */
		nil,
		/* 102 Action25 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 103 Action26 <- <{ p.AddOperator(TypeCompEQ) }> */
		nil,
		/* 104 Action27 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 105 Action28 <- <{ p.AddOperator(TypeCompNE) }> */
		nil,
		/* 106 Action29 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 107 Action30 <- <{ p.AddOperator(TypeCompGE) }> */
		nil,
		/* 108 Action31 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 109 Action32 <- <{ p.AddOperator(TypeCompGT) }> */
		nil,
		/* 110 Action33 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 111 Action34 <- <{ p.AddOperator(TypeAdd) }> */
		nil,
		/* 112 Action35 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 113 Action36 <- <{ p.AddOperator(TypeSubtract) }> */
		nil,
		/* 114 Action37 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 115 Action38 <- <{ p.AddOperator(TypeMultiply) }> */
		nil,
		/* 116 Action39 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 117 Action40 <- <{ p.AddOperator(TypeDivide) }> */
		nil,
		/* 118 Action41 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 119 Action42 <- <{ p.AddOperator(TypeModulus) }> */
		nil,
		/* 120 Action43 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 121 Action44 <- <{ p.AddOperator(TypeExponentiation) }> */
		nil,
		/* 122 Action45 <- <{ p.AddOperator(TypeNegation) }> */
		nil,
		/* 123 Action46 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetK)}> */
		nil,
		/* 124 Action47 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetQ)}> */
		nil,
		/* 125 Action48 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 126 Action49 <- <{ p.AddOperator(TypeDiceSetQ) }> */
		nil,
		/* 127 Action50 <- <{ p.AddOperatorWithInt64(TypeDiceSetK, 1) }> */
		nil,
		/* 128 Action51 <- <{ p.AddOperatorWithInt64(TypeDiceSetQ, 1) }> */
		nil,
		/* 129 Action52 <- <{ p.AddOperator(TypeWodSetInit) }> */
		nil,
		/* 130 Action53 <- <{ p.AddOperator(TypeWodSetPool) }> */
		nil,
		/* 131 Action54 <- <{ p.AddOperator(TypeDCSetInit) }> */
		nil,
		/* 132 Action55 <- <{ p.AddOperator(TypeDCSetPool) }> */
		nil,
		/* 133 Action56 <- <{ p.AddValue("2"); p.AddLeftValueMark() }> */
		nil,
		/* 134 Action57 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 135 Action58 <- <{ p.AddValue("1"); p.AddLeftValueMark() }> */
		nil,
		/* 136 Action59 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 137 Action60 <- <{ p.AddValue("2"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 138 Action61 <- <{ p.AddValue("1"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 139 Action62 <- <{ p.AddOperator(TypeWodSetPoints) }> */
		nil,
		/* 140 Action63 <- <{ p.AddOperator(TypeWodSetThreshold) }> */
		nil,
		/* 141 Action64 <- <{ p.AddOperator(TypeWodSetThresholdQ) }> */
		nil,
		/* 142 Action65 <- <{ p.AddOperator(TypeDiceWod) }> */
		nil,
		/* 143 Action66 <- <{ p.AddOperator(TypeDCSetPoints) }> */
		nil,
		/* 144 Action67 <- <{ p.AddOperator(TypeDiceDC) }> */
		nil,
		/* 145 Action68 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 146 Action69 <- <{p.AddValue("0");}> */
		nil,
		/* 147 Action70 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 148 Action71 <- <{ p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 149 Action72 <- <{ p.AddValue("1"); p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 150 Action73 <- <{ p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 151 Action74 <- <{ p.AddValue("1"); p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 152 Action75 <- <{ p.AddValue("0"); p.AddValue("0"); p.AddOperator(TypeDiceFate) }> */
		nil,
		/* 153 Action76 <- <{ p.AddLoadVarnameForThis(text) }> */
		nil,
		/* 154 Action77 <- <{ p.WriteCode(TypeConvertInt, 0, "") }> */
		nil,
		/* 155 Action78 <- <{ p.WriteCode(TypeConvertStr, 0, "") }> */
		nil,
		/* 156 Action79 <- <{ p.AddLoadVarname(string(text)) }> */
		nil,
		nil,
		/* 158 Action80 <- <{ p.AddValue(string(text)) }> */
		nil,
		/* 159 Action81 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 160 Action82 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 161 Action83 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 162 Action84 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 163 Action85 <- <{ p.CounterPush() }> */
		nil,
		/* 164 Action86 <- <{p.CounterAdd(1)}> */
		nil,
		/* 165 Action87 <- <{p.CounterAdd(1)}> */
		nil,
		/* 166 Action88 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 167 Action89 <- <{ p.CounterPush() }> */
		nil,
		/* 168 Action90 <- <{p.CounterAdd(1)}> */
		nil,
		/* 169 Action91 <- <{p.CounterAdd(1)}> */
		nil,
		/* 170 Action92 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 171 Action93 <- <{ p.CounterPush() }> */
		nil,
		/* 172 Action94 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 173 Action95 <- <{ p.CounterPush() }> */
		nil,
		/* 174 Action96 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 175 Action97 <- <{ p.AddStName() }> */
		nil,
		/* 176 Action98 <- <{ p.AddStName() }> */
		nil,
		/* 177 Action99 <- <{ p.AddStName() }> */
		nil,
		/* 178 Action100 <- <{ p.AddStName() }> */
		nil,
		/* 179 Action101 <- <{ p.CodePush() }> */
		nil,
		/* 180 Action102 <- <{ p.CodePop(); p.AddStoreComputed(text); p.AddStName() }> */
		nil,
		/* 181 Action103 <- <{ p.CodePush() }> */
		nil,
		/* 182 Action104 <- <{ p.CodePop(); p.AddStoreComputed(text); p.AddStName() }> */
		nil,
		/* 183 Action105 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 184 Action106 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 185 Action107 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 186 Action108 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 187 Action109 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 188 Action110 <- <{ p.AddValueStr(text) }> */
		nil,
		/* 189 Action111 <- <{ p.AddValueStr(text) }> */
		nil,
		/* 190 Action112 <- <{ p.AddValueStr(text) }> */
		nil,
		/* 191 Action113 <- <{ p.AddValueStr(text) }> */
		nil,
		/* 192 Action114 <- <{ p.AddValueStr(text) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
