package dice

// Code generated by peg -switch -inline dice/roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleeBase
	rulee
	ruleeOne
	ruleassign_expr
	rules0
	ruleblock
	rulestmtElse
	rulestmtIf
	rulee0
	ruleeSimpleSwitch
	ruleeTernary
	ruleeBitwise
	ruleeBitwise1
	ruleeComp
	rulee1
	rulee2
	rulee3
	rulee4
	rulee5
	ruledndDiceSuffix
	rulekqDiceOp
	rule_dnumber
	rulesimpleDice2
	rulewodDicePool
	ruledoubleCrossDicePool
	ruleeDice
	rulelaNumberOrLeftParen
	ruleeDice2
	ruleeDice2x
	ruleeDice3
	ruleeDice4
	rulevalue
	rulenumber
	ruleidentifier
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulebitwiseOr
	rulelogicOr
	rulebitwiseAnd
	rulelogicAnd
	rulesp
	rulelt
	rulegt
	rulele
	rulege
	ruleeq
	rulene
	rulestrPart
	rulestrPart1
	rulestrPart2
	rulestrPart3
	rulefstring
	ruleescape
	rulest_expr
	ruleest
	rulest_assign_multi
	rulest_assign
	rulest_modify_multi_1
	rulest_modify_rest1
	rulest_modify_multi_2
	rulest_modify_multi_rest
	rulest_modify2
	rulest_modify_rest
	rulest_name1
	rulest_name1r
	rulest_name2
	rulest_name2r
	ruleid_ch0
	ruleid_ch
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
	ruleAction49
	ruleAction50
	ruleAction51
	ruleAction52
	ruleAction53
	ruleAction54
	ruleAction55
	ruleAction56
	ruleAction57
	ruleAction58
	ruleAction59
	ruleAction60
	ruleAction61
	ruleAction62
	ruleAction63
	ruleAction64
	ruleAction65
	ruleAction66
	ruleAction67
	ruleAction68
	ruleAction69
	ruleAction70
	ruleAction71
	ruleAction72
	ruleAction73
	ruleAction74
	ruleAction75
	ruleAction76
	ruleAction77
	ruleAction78
	ruleAction79
	rulePegText
	ruleAction80
	ruleAction81
	ruleAction82
	ruleAction83
	ruleAction84
	ruleAction85
	ruleAction86
	ruleAction87
	ruleAction88
	ruleAction89
	ruleAction90
	ruleAction91
	ruleAction92
	ruleAction93
	ruleAction94
	ruleAction95
	ruleAction96
	ruleAction97
	ruleAction98
	ruleAction99
	ruleAction100
	ruleAction101
	ruleAction102
	ruleAction103
	ruleAction104
	ruleAction105
	ruleAction106
	ruleAction107
	ruleAction108
	ruleAction109
	ruleAction110
	ruleAction111
	ruleAction112
	ruleAction113
	ruleAction114
)

var rul3s = [...]string{
	"Unknown",
	"eBase",
	"e",
	"eOne",
	"assign_expr",
	"s0",
	"block",
	"stmtElse",
	"stmtIf",
	"e0",
	"eSimpleSwitch",
	"eTernary",
	"eBitwise",
	"eBitwise1",
	"eComp",
	"e1",
	"e2",
	"e3",
	"e4",
	"e5",
	"dndDiceSuffix",
	"kqDiceOp",
	"_dnumber",
	"simpleDice2",
	"wodDicePool",
	"doubleCrossDicePool",
	"eDice",
	"laNumberOrLeftParen",
	"eDice2",
	"eDice2x",
	"eDice3",
	"eDice4",
	"value",
	"number",
	"identifier",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"bitwiseOr",
	"logicOr",
	"bitwiseAnd",
	"logicAnd",
	"sp",
	"lt",
	"gt",
	"le",
	"ge",
	"eq",
	"ne",
	"strPart",
	"strPart1",
	"strPart2",
	"strPart3",
	"fstring",
	"escape",
	"st_expr",
	"est",
	"st_assign_multi",
	"st_assign",
	"st_modify_multi_1",
	"st_modify_rest1",
	"st_modify_multi_2",
	"st_modify_multi_rest",
	"st_modify2",
	"st_modify_rest",
	"st_name1",
	"st_name1r",
	"st_name2",
	"st_name2r",
	"id_ch0",
	"id_ch",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
	"Action49",
	"Action50",
	"Action51",
	"Action52",
	"Action53",
	"Action54",
	"Action55",
	"Action56",
	"Action57",
	"Action58",
	"Action59",
	"Action60",
	"Action61",
	"Action62",
	"Action63",
	"Action64",
	"Action65",
	"Action66",
	"Action67",
	"Action68",
	"Action69",
	"Action70",
	"Action71",
	"Action72",
	"Action73",
	"Action74",
	"Action75",
	"Action76",
	"Action77",
	"Action78",
	"Action79",
	"PegText",
	"Action80",
	"Action81",
	"Action82",
	"Action83",
	"Action84",
	"Action85",
	"Action86",
	"Action87",
	"Action88",
	"Action89",
	"Action90",
	"Action91",
	"Action92",
	"Action93",
	"Action94",
	"Action95",
	"Action96",
	"Action97",
	"Action98",
	"Action99",
	"Action100",
	"Action101",
	"Action102",
	"Action103",
	"Action104",
	"Action105",
	"Action106",
	"Action107",
	"Action108",
	"Action109",
	"Action110",
	"Action111",
	"Action112",
	"Action113",
	"Action114",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type DiceRollParser struct {
	RollExpression

	Buffer string
	buffer []rune
	rules  [193]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *DiceRollParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *DiceRollParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *DiceRollParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *DiceRollParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *DiceRollParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *DiceRollParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *DiceRollParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeHalt)
		case ruleAction1:
			p.AddOperator(TypeClearDetail)
		case ruleAction2:
			p.AddValueStr(string(text))
		case ruleAction3:
			p.AddStore()
		case ruleAction4:
			p.AddOperator(TypePop)
		case ruleAction5:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction6:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction7:
			p.PopAndSetOffset()
		case ruleAction8:
			p.AddValueStr("")
		case ruleAction9:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction10:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction11:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction12:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction13:
			p.PopAndSetOffset()
		case ruleAction14:
			p.CounterPush()
		case ruleAction15:
			p.CounterAdd(1)
		case ruleAction16:
			p.AddValueStr("")
			limit := p.CounterPop() + 1
			for i := int64(0); i < limit; i++ {
				p.PopAndSetOffset()
			}
		case ruleAction17:
			p.AddLeftValueMark()
		case ruleAction18:
			p.AddOperator(TypeBitwiseOr)
		case ruleAction19:
			p.AddLeftValueMark()
		case ruleAction20:
			p.AddOperator(TypeBitwiseAnd)
		case ruleAction21:
			p.AddLeftValueMark()
		case ruleAction22:
			p.AddOperator(TypeCompLT)
		case ruleAction23:
			p.AddLeftValueMark()
		case ruleAction24:
			p.AddOperator(TypeCompLE)
		case ruleAction25:
			p.AddLeftValueMark()
		case ruleAction26:
			p.AddOperator(TypeCompEQ)
		case ruleAction27:
			p.AddLeftValueMark()
		case ruleAction28:
			p.AddOperator(TypeCompNE)
		case ruleAction29:
			p.AddLeftValueMark()
		case ruleAction30:
			p.AddOperator(TypeCompGE)
		case ruleAction31:
			p.AddLeftValueMark()
		case ruleAction32:
			p.AddOperator(TypeCompGT)
		case ruleAction33:
			p.AddLeftValueMark()
		case ruleAction34:
			p.AddOperator(TypeAdd)
		case ruleAction35:
			p.AddLeftValueMark()
		case ruleAction36:
			p.AddOperator(TypeSubtract)
		case ruleAction37:
			p.AddLeftValueMark()
		case ruleAction38:
			p.AddOperator(TypeMultiply)
		case ruleAction39:
			p.AddLeftValueMark()
		case ruleAction40:
			p.AddOperator(TypeDivide)
		case ruleAction41:
			p.AddLeftValueMark()
		case ruleAction42:
			p.AddOperator(TypeModulus)
		case ruleAction43:
			p.AddLeftValueMark()
		case ruleAction44:
			p.AddOperator(TypeExponentiation)
		case ruleAction45:
			p.AddOperator(TypeNegation)
		case ruleAction46:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetK)
		case ruleAction47:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetQ)
		case ruleAction48:
			p.AddOperator(TypeDiceSetK)
		case ruleAction49:
			p.AddOperator(TypeDiceSetQ)
		case ruleAction50:
			p.AddOperatorWithInt64(TypeDiceSetK, 1)
		case ruleAction51:
			p.AddOperatorWithInt64(TypeDiceSetQ, 1)
		case ruleAction52:
			p.AddOperator(TypeWodSetInit)
		case ruleAction53:
			p.AddOperator(TypeWodSetPool)
		case ruleAction54:
			p.AddOperator(TypeDCSetInit)
		case ruleAction55:
			p.AddOperator(TypeDCSetPool)
		case ruleAction56:
			p.AddValue("2")
			p.AddLeftValueMark()
		case ruleAction57:
			p.AddOperator(TypeDice)
		case ruleAction58:
			p.AddValue("1")
			p.AddLeftValueMark()
		case ruleAction59:
			p.AddOperator(TypeDice)
		case ruleAction60:
			p.AddValue("2")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction61:
			p.AddValue("1")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction62:
			p.AddOperator(TypeWodSetPoints)
		case ruleAction63:
			p.AddOperator(TypeWodSetThreshold)
		case ruleAction64:
			p.AddOperator(TypeWodSetThresholdQ)
		case ruleAction65:
			p.AddOperator(TypeDiceWod)
		case ruleAction66:
			p.AddOperator(TypeDCSetPoints)
		case ruleAction67:
			p.AddOperator(TypeDiceDC)
		case ruleAction68:
			p.AddLeftValueMark()
		case ruleAction69:
			p.AddValue("0")
		case ruleAction70:
			p.AddOperator(TypeDice)
		case ruleAction71:
			p.AddOperator(TypeDicePenalty)
		case ruleAction72:
			p.AddValue("1")
			p.AddOperator(TypeDicePenalty)
		case ruleAction73:
			p.AddOperator(TypeDiceBonus)
		case ruleAction74:
			p.AddValue("1")
			p.AddOperator(TypeDiceBonus)
		case ruleAction75:
			p.AddValue("0")
			p.AddValue("0")
			p.AddOperator(TypeDiceFate)
		case ruleAction76:
			p.AddLoadVarnameForThis(text)
		case ruleAction77:
			p.WriteCode(TypeConvertInt, 0, "")
		case ruleAction78:
			p.WriteCode(TypeConvertStr, 0, "")
		case ruleAction79:
			p.AddLoadVarname(string(text))
		case ruleAction80:
			p.AddValue(string(text))
		case ruleAction81:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction82:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction83:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction84:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction85:
			p.CounterPush()
		case ruleAction86:
			p.CounterAdd(1)
		case ruleAction87:
			p.CounterAdd(1)
		case ruleAction88:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction89:
			p.CounterPush()
		case ruleAction90:
			p.CounterAdd(1)
		case ruleAction91:
			p.CounterAdd(1)
		case ruleAction92:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction93:
			p.CounterPush()
		case ruleAction94:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction95:
			p.CounterPush()
		case ruleAction96:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction97:
			p.AddStName()
		case ruleAction98:
			p.AddStName()
		case ruleAction99:
			p.AddStName()
		case ruleAction100:
			p.AddStName()
		case ruleAction101:
			p.CodePush()
		case ruleAction102:
			p.CodePop()
			p.AddStoreComputed(text)
			p.AddStName()
		case ruleAction103:
			p.CodePush()
		case ruleAction104:
			p.CodePop()
			p.AddStoreComputed(text)
			p.AddStName()
		case ruleAction105:
			p.AddStModify("+", text)
		case ruleAction106:
			p.AddStModify("-", text)
		case ruleAction107:
			p.AddStModify("+", text)
		case ruleAction108:
			p.AddStModify("-", text)
		case ruleAction109:
			p.AddStModify("-", text)
		case ruleAction110:
			p.AddValueStr(text)
		case ruleAction111:
			p.AddValueStr(text)
		case ruleAction112:
			p.AddValueStr(text)
		case ruleAction113:
			p.AddValueStr(text)
		case ruleAction114:
			p.AddValueStr(text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *DiceRollParser) Init(options ...func(*DiceRollParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 eBase <- <(e Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulee]() {
					goto l0
				}
				{
					add(ruleAction0, position)
				}
				add(ruleeBase, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e <- <(('^' 's' 't' st_expr) / (&{p.flags.DisableBlock} e0) / (eOne (';' sp Action1 eOne?)*))> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				{
					position5, tokenIndex5 := position, tokenIndex
					if buffer[position] != rune('^') {
						goto l6
					}
					position++
					if buffer[position] != rune('s') {
						goto l6
					}
					position++
					if buffer[position] != rune('t') {
						goto l6
					}
					position++
					{
						position7 := position
						{
							position8, tokenIndex8 := position, tokenIndex
							{
								position10 := position
								{
									position11, tokenIndex11 := position, tokenIndex
									if !_rules[rulest_name2]() {
										goto l12
									}
									if !_rules[rulest_modify_rest1]() {
										goto l12
									}
									goto l11
								l12:
									position, tokenIndex = position11, tokenIndex11
									if !_rules[rulest_name2r]() {
										goto l13
									}
									if !_rules[rulest_modify_rest1]() {
										goto l13
									}
									goto l11
								l13:
									position, tokenIndex = position11, tokenIndex11
									if !_rules[rulest_name1]() {
										goto l14
									}
									if !_rules[rulest_modify_rest]() {
										goto l14
									}
									goto l11
								l14:
									position, tokenIndex = position11, tokenIndex11
									if !_rules[rulest_name1r]() {
										goto l9
									}
									if !_rules[rulest_modify_rest]() {
										goto l9
									}
								}
							l11:
								if !_rules[rulesp]() {
									goto l9
								}
								{
									position15, tokenIndex15 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l15
									}
									position++
									goto l16
								l15:
									position, tokenIndex = position15, tokenIndex15
								}
							l16:
								if !_rules[rulesp]() {
									goto l9
								}
								if !_rules[rulest_modify_multi_rest]() {
									goto l9
								}
								add(rulest_modify_multi_1, position10)
							}
							goto l8
						l9:
							position, tokenIndex = position8, tokenIndex8
							{
								position18 := position
								{
									position21 := position
									{
										position22, tokenIndex22 := position, tokenIndex
										if !_rules[rulest_name2]() {
											goto l23
										}
										if !_rules[rulesp]() {
											goto l23
										}
										{
											position24, tokenIndex24 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l25
											}
											position++
											goto l24
										l25:
											position, tokenIndex = position24, tokenIndex24
											if buffer[position] != rune('=') {
												goto l23
											}
											position++
										}
									l24:
										if !_rules[rulesp]() {
											goto l23
										}
										if !_rules[ruleest]() {
											goto l23
										}
										{
											add(ruleAction97, position)
										}
										goto l22
									l23:
										position, tokenIndex = position22, tokenIndex22
										if !_rules[rulest_name1]() {
											goto l27
										}
										if !_rules[ruleest]() {
											goto l27
										}
										{
											add(ruleAction98, position)
										}
										goto l22
									l27:
										position, tokenIndex = position22, tokenIndex22
										if !_rules[rulest_name2r]() {
											goto l29
										}
										if !_rules[rulesp]() {
											goto l29
										}
										{
											position30, tokenIndex30 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l31
											}
											position++
											goto l30
										l31:
											position, tokenIndex = position30, tokenIndex30
											if buffer[position] != rune('=') {
												goto l29
											}
											position++
										}
									l30:
										if !_rules[rulesp]() {
											goto l29
										}
										if !_rules[ruleest]() {
											goto l29
										}
										{
											add(ruleAction99, position)
										}
										goto l22
									l29:
										position, tokenIndex = position22, tokenIndex22
										if !_rules[rulest_name1r]() {
											goto l33
										}
										if !_rules[ruleest]() {
											goto l33
										}
										{
											add(ruleAction100, position)
										}
										goto l22
									l33:
										position, tokenIndex = position22, tokenIndex22
										if buffer[position] != rune('&') {
											goto l35
										}
										position++
										if !_rules[rulest_name2]() {
											goto l35
										}
										if !_rules[rulesp]() {
											goto l35
										}
										{
											position36, tokenIndex36 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l37
											}
											position++
											goto l36
										l37:
											position, tokenIndex = position36, tokenIndex36
											if buffer[position] != rune('=') {
												goto l35
											}
											position++
										}
									l36:
										if !_rules[rulesp]() {
											goto l35
										}
										{
											add(ruleAction101, position)
										}
										{
											position39 := position
											if !_rules[ruleest]() {
												goto l35
											}
											add(rulePegText, position39)
										}
										{
											add(ruleAction102, position)
										}
										goto l22
									l35:
										position, tokenIndex = position22, tokenIndex22
										if buffer[position] != rune('&') {
											goto l17
										}
										position++
										if !_rules[rulest_name2r]() {
											goto l17
										}
										if !_rules[rulesp]() {
											goto l17
										}
										{
											position41, tokenIndex41 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l42
											}
											position++
											goto l41
										l42:
											position, tokenIndex = position41, tokenIndex41
											if buffer[position] != rune('=') {
												goto l17
											}
											position++
										}
									l41:
										if !_rules[rulesp]() {
											goto l17
										}
										{
											add(ruleAction103, position)
										}
										{
											position44 := position
											if !_rules[ruleest]() {
												goto l17
											}
											add(rulePegText, position44)
										}
										{
											add(ruleAction104, position)
										}
									}
								l22:
									add(rulest_assign, position21)
								}
								if !_rules[rulesp]() {
									goto l17
								}
								{
									position46, tokenIndex46 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l46
									}
									position++
									goto l47
								l46:
									position, tokenIndex = position46, tokenIndex46
								}
							l47:
								if !_rules[rulesp]() {
									goto l17
								}
							l19:
								{
									position20, tokenIndex20 := position, tokenIndex
									{
										position48 := position
										{
											position49, tokenIndex49 := position, tokenIndex
											if !_rules[rulest_name2]() {
												goto l50
											}
											if !_rules[rulesp]() {
												goto l50
											}
											{
												position51, tokenIndex51 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l52
												}
												position++
												goto l51
											l52:
												position, tokenIndex = position51, tokenIndex51
												if buffer[position] != rune('=') {
													goto l50
												}
												position++
											}
										l51:
											if !_rules[rulesp]() {
												goto l50
											}
											if !_rules[ruleest]() {
												goto l50
											}
											{
												add(ruleAction97, position)
											}
											goto l49
										l50:
											position, tokenIndex = position49, tokenIndex49
											if !_rules[rulest_name1]() {
												goto l54
											}
											if !_rules[ruleest]() {
												goto l54
											}
											{
												add(ruleAction98, position)
											}
											goto l49
										l54:
											position, tokenIndex = position49, tokenIndex49
											if !_rules[rulest_name2r]() {
												goto l56
											}
											if !_rules[rulesp]() {
												goto l56
											}
											{
												position57, tokenIndex57 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l58
												}
												position++
												goto l57
											l58:
												position, tokenIndex = position57, tokenIndex57
												if buffer[position] != rune('=') {
													goto l56
												}
												position++
											}
										l57:
											if !_rules[rulesp]() {
												goto l56
											}
											if !_rules[ruleest]() {
												goto l56
											}
											{
												add(ruleAction99, position)
											}
											goto l49
										l56:
											position, tokenIndex = position49, tokenIndex49
											if !_rules[rulest_name1r]() {
												goto l60
											}
											if !_rules[ruleest]() {
												goto l60
											}
											{
												add(ruleAction100, position)
											}
											goto l49
										l60:
											position, tokenIndex = position49, tokenIndex49
											if buffer[position] != rune('&') {
												goto l62
											}
											position++
											if !_rules[rulest_name2]() {
												goto l62
											}
											if !_rules[rulesp]() {
												goto l62
											}
											{
												position63, tokenIndex63 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l64
												}
												position++
												goto l63
											l64:
												position, tokenIndex = position63, tokenIndex63
												if buffer[position] != rune('=') {
													goto l62
												}
												position++
											}
										l63:
											if !_rules[rulesp]() {
												goto l62
											}
											{
												add(ruleAction101, position)
											}
											{
												position66 := position
												if !_rules[ruleest]() {
													goto l62
												}
												add(rulePegText, position66)
											}
											{
												add(ruleAction102, position)
											}
											goto l49
										l62:
											position, tokenIndex = position49, tokenIndex49
											if buffer[position] != rune('&') {
												goto l20
											}
											position++
											if !_rules[rulest_name2r]() {
												goto l20
											}
											if !_rules[rulesp]() {
												goto l20
											}
											{
												position68, tokenIndex68 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l69
												}
												position++
												goto l68
											l69:
												position, tokenIndex = position68, tokenIndex68
												if buffer[position] != rune('=') {
													goto l20
												}
												position++
											}
										l68:
											if !_rules[rulesp]() {
												goto l20
											}
											{
												add(ruleAction103, position)
											}
											{
												position71 := position
												if !_rules[ruleest]() {
													goto l20
												}
												add(rulePegText, position71)
											}
											{
												add(ruleAction104, position)
											}
										}
									l49:
										add(rulest_assign, position48)
									}
									if !_rules[rulesp]() {
										goto l20
									}
									{
										position73, tokenIndex73 := position, tokenIndex
										if buffer[position] != rune(',') {
											goto l73
										}
										position++
										goto l74
									l73:
										position, tokenIndex = position73, tokenIndex73
									}
								l74:
									if !_rules[rulesp]() {
										goto l20
									}
									goto l19
								l20:
									position, tokenIndex = position20, tokenIndex20
								}
								add(rulest_assign_multi, position18)
							}
							goto l8
						l17:
							position, tokenIndex = position8, tokenIndex8
							{
								position75 := position
								if !_rules[rulest_modify2]() {
									goto l6
								}
								if !_rules[rulesp]() {
									goto l6
								}
								{
									position76, tokenIndex76 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l76
									}
									position++
									goto l77
								l76:
									position, tokenIndex = position76, tokenIndex76
								}
							l77:
								if !_rules[rulesp]() {
									goto l6
								}
								if !_rules[rulest_modify_multi_rest]() {
									goto l6
								}
								add(rulest_modify_multi_2, position75)
							}
						}
					l8:
						add(rulest_expr, position7)
					}
					goto l5
				l6:
					position, tokenIndex = position5, tokenIndex5
					if !(p.flags.DisableBlock) {
						goto l78
					}
					if !_rules[rulee0]() {
						goto l78
					}
					goto l5
				l78:
					position, tokenIndex = position5, tokenIndex5
					if !_rules[ruleeOne]() {
						goto l3
					}
				l79:
					{
						position80, tokenIndex80 := position, tokenIndex
						if buffer[position] != rune(';') {
							goto l80
						}
						position++
						if !_rules[rulesp]() {
							goto l80
						}
						{
							add(ruleAction1, position)
						}
						{
							position82, tokenIndex82 := position, tokenIndex
							if !_rules[ruleeOne]() {
								goto l82
							}
							goto l83
						l82:
							position, tokenIndex = position82, tokenIndex82
						}
					l83:
						goto l79
					l80:
						position, tokenIndex = position80, tokenIndex80
					}
				}
			l5:
				add(rulee, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 eOne <- <(sp (s0 / e0 / assign_expr))> */
		func() bool {
			position84, tokenIndex84 := position, tokenIndex
			{
				position85 := position
				if !_rules[rulesp]() {
					goto l84
				}
				{
					position86, tokenIndex86 := position, tokenIndex
					{
						position88 := position
						{
							position89 := position
							if buffer[position] != rune('i') {
								goto l87
							}
							position++
							if buffer[position] != rune('f') {
								goto l87
							}
							position++
							if !_rules[rulesp]() {
								goto l87
							}
							if !_rules[rulee0]() {
								goto l87
							}
							{
								add(ruleAction5, position)
							}
							if !_rules[ruleblock]() {
								goto l87
							}
							{
								add(ruleAction6, position)
							}
							{
								position92, tokenIndex92 := position, tokenIndex
								{
									position94 := position
									if buffer[position] != rune('e') {
										goto l92
									}
									position++
									if buffer[position] != rune('l') {
										goto l92
									}
									position++
									if buffer[position] != rune('s') {
										goto l92
									}
									position++
									if buffer[position] != rune('e') {
										goto l92
									}
									position++
									if !_rules[rulesp]() {
										goto l92
									}
									if !_rules[ruleblock]() {
										goto l92
									}
									add(rulestmtElse, position94)
								}
								goto l93
							l92:
								position, tokenIndex = position92, tokenIndex92
							}
						l93:
							{
								add(ruleAction7, position)
							}
							{
								add(ruleAction8, position)
							}
							add(rulestmtIf, position89)
						}
						add(rules0, position88)
					}
					goto l86
				l87:
					position, tokenIndex = position86, tokenIndex86
					if !_rules[rulee0]() {
						goto l97
					}
					goto l86
				l97:
					position, tokenIndex = position86, tokenIndex86
					if !_rules[ruleassign_expr]() {
						goto l84
					}
				}
			l86:
				add(ruleeOne, position85)
			}
			return true
		l84:
			position, tokenIndex = position84, tokenIndex84
			return false
		},
		/* 3 assign_expr <- <(&{!p.flags.DisableBlock} identifier Action2 '=' sp e0 Action3)> */
		func() bool {
			position98, tokenIndex98 := position, tokenIndex
			{
				position99 := position
				if !(!p.flags.DisableBlock) {
					goto l98
				}
				if !_rules[ruleidentifier]() {
					goto l98
				}
				{
					add(ruleAction2, position)
				}
				if buffer[position] != rune('=') {
					goto l98
				}
				position++
				if !_rules[rulesp]() {
					goto l98
				}
				if !_rules[rulee0]() {
					goto l98
				}
				{
					add(ruleAction3, position)
				}
				add(ruleassign_expr, position99)
			}
			return true
		l98:
			position, tokenIndex = position98, tokenIndex98
			return false
		},
		/* 4 s0 <- <stmtIf> */
		nil,
		/* 5 block <- <((('{' sp '}') / ('{' sp e Action4 '}')) sp)> */
		func() bool {
			position103, tokenIndex103 := position, tokenIndex
			{
				position104 := position
				{
					position105, tokenIndex105 := position, tokenIndex
					if buffer[position] != rune('{') {
						goto l106
					}
					position++
					if !_rules[rulesp]() {
						goto l106
					}
					if buffer[position] != rune('}') {
						goto l106
					}
					position++
					goto l105
				l106:
					position, tokenIndex = position105, tokenIndex105
					if buffer[position] != rune('{') {
						goto l103
					}
					position++
					if !_rules[rulesp]() {
						goto l103
					}
					if !_rules[rulee]() {
						goto l103
					}
					{
						add(ruleAction4, position)
					}
					if buffer[position] != rune('}') {
						goto l103
					}
					position++
				}
			l105:
				if !_rules[rulesp]() {
					goto l103
				}
				add(ruleblock, position104)
			}
			return true
		l103:
			position, tokenIndex = position103, tokenIndex103
			return false
		},
		/* 6 stmtElse <- <('e' 'l' 's' 'e' sp block)> */
		nil,
		/* 7 stmtIf <- <('i' 'f' sp e0 Action5 block Action6 stmtElse? Action7 Action8)> */
		nil,
		/* 8 e0 <- <eTernary> */
		func() bool {
			position110, tokenIndex110 := position, tokenIndex
			{
				position111 := position
				{
					position112 := position
					{
						position113, tokenIndex113 := position, tokenIndex
						if !_rules[ruleeBitwise]() {
							goto l114
						}
						if buffer[position] != rune('?') {
							goto l114
						}
						position++
						if !_rules[rulesp]() {
							goto l114
						}
						{
							add(ruleAction11, position)
						}
						if !_rules[ruleeBitwise]() {
							goto l114
						}
						if buffer[position] != rune(':') {
							goto l114
						}
						position++
						if !_rules[rulesp]() {
							goto l114
						}
						{
							add(ruleAction12, position)
						}
						if !_rules[ruleeBitwise]() {
							goto l114
						}
						{
							add(ruleAction13, position)
						}
						goto l113
					l114:
						position, tokenIndex = position113, tokenIndex113
						if !_rules[ruleeSimpleSwitch]() {
							goto l118
						}
						{
							add(ruleAction14, position)
						}
					l120:
						{
							position121, tokenIndex121 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l121
							}
							position++
							if !_rules[rulesp]() {
								goto l121
							}
							if !_rules[ruleeSimpleSwitch]() {
								goto l121
							}
							{
								add(ruleAction15, position)
							}
							goto l120
						l121:
							position, tokenIndex = position121, tokenIndex121
						}
						{
							add(ruleAction16, position)
						}
						goto l113
					l118:
						position, tokenIndex = position113, tokenIndex113
						if !_rules[ruleeBitwise]() {
							goto l110
						}
					}
				l113:
					add(ruleeTernary, position112)
				}
				add(rulee0, position111)
			}
			return true
		l110:
			position, tokenIndex = position110, tokenIndex110
			return false
		},
		/* 9 eSimpleSwitch <- <(eBitwise '?' sp Action9 eBitwise Action10)> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				if !_rules[ruleeBitwise]() {
					goto l124
				}
				if buffer[position] != rune('?') {
					goto l124
				}
				position++
				if !_rules[rulesp]() {
					goto l124
				}
				{
					add(ruleAction9, position)
				}
				if !_rules[ruleeBitwise]() {
					goto l124
				}
				{
					add(ruleAction10, position)
				}
				add(ruleeSimpleSwitch, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 10 eTernary <- <((eBitwise '?' sp Action11 eBitwise ':' sp Action12 eBitwise Action13) / (eSimpleSwitch Action14 (',' sp eSimpleSwitch Action15)* Action16) / eBitwise)> */
		nil,
		/* 11 eBitwise <- <((&{p.flags.DisableBitwiseOp} eComp) / eBitwise1)> */
		func() bool {
			position129, tokenIndex129 := position, tokenIndex
			{
				position130 := position
				{
					position131, tokenIndex131 := position, tokenIndex
					if !(p.flags.DisableBitwiseOp) {
						goto l132
					}
					if !_rules[ruleeComp]() {
						goto l132
					}
					goto l131
				l132:
					position, tokenIndex = position131, tokenIndex131
					{
						position133 := position
						if !_rules[ruleeComp]() {
							goto l129
						}
					l134:
						{
							position135, tokenIndex135 := position, tokenIndex
							{
								position136, tokenIndex136 := position, tokenIndex
								{
									position138, tokenIndex138 := position, tokenIndex
									{
										position140 := position
										if buffer[position] != rune('|') {
											goto l139
										}
										position++
										if buffer[position] != rune('|') {
											goto l139
										}
										position++
										if !_rules[rulesp]() {
											goto l139
										}
										add(rulelogicOr, position140)
									}
									goto l138
								l139:
									position, tokenIndex = position138, tokenIndex138
									{
										position141 := position
										if buffer[position] != rune('|') {
											goto l137
										}
										position++
										if !_rules[rulesp]() {
											goto l137
										}
										add(rulebitwiseOr, position141)
									}
								}
							l138:
								{
									add(ruleAction17, position)
								}
								if !_rules[ruleeComp]() {
									goto l137
								}
								{
									add(ruleAction18, position)
								}
								goto l136
							l137:
								position, tokenIndex = position136, tokenIndex136
								{
									position144, tokenIndex144 := position, tokenIndex
									{
										position146 := position
										{
											position147, tokenIndex147 := position, tokenIndex
											if buffer[position] != rune('&') {
												goto l148
											}
											position++
											if buffer[position] != rune('&') {
												goto l148
											}
											position++
											goto l147
										l148:
											position, tokenIndex = position147, tokenIndex147
											if buffer[position] != rune('&') {
												goto l145
											}
											position++
											if buffer[position] != rune('a') {
												goto l145
											}
											position++
											if buffer[position] != rune('m') {
												goto l145
											}
											position++
											if buffer[position] != rune('p') {
												goto l145
											}
											position++
											if buffer[position] != rune(';') {
												goto l145
											}
											position++
											if buffer[position] != rune('&') {
												goto l145
											}
											position++
											if buffer[position] != rune('a') {
												goto l145
											}
											position++
											if buffer[position] != rune('m') {
												goto l145
											}
											position++
											if buffer[position] != rune('p') {
												goto l145
											}
											position++
											if buffer[position] != rune(';') {
												goto l145
											}
											position++
										}
									l147:
										if !_rules[rulesp]() {
											goto l145
										}
										add(rulelogicAnd, position146)
									}
									goto l144
								l145:
									position, tokenIndex = position144, tokenIndex144
									{
										position149 := position
										{
											position150, tokenIndex150 := position, tokenIndex
											if buffer[position] != rune('&') {
												goto l151
											}
											position++
											goto l150
										l151:
											position, tokenIndex = position150, tokenIndex150
											if buffer[position] != rune('&') {
												goto l135
											}
											position++
											if buffer[position] != rune('a') {
												goto l135
											}
											position++
											if buffer[position] != rune('m') {
												goto l135
											}
											position++
											if buffer[position] != rune('p') {
												goto l135
											}
											position++
											if buffer[position] != rune(';') {
												goto l135
											}
											position++
										}
									l150:
										if !_rules[rulesp]() {
											goto l135
										}
										add(rulebitwiseAnd, position149)
									}
								}
							l144:
								{
									add(ruleAction19, position)
								}
								if !_rules[ruleeComp]() {
									goto l135
								}
								{
									add(ruleAction20, position)
								}
							}
						l136:
							goto l134
						l135:
							position, tokenIndex = position135, tokenIndex135
						}
						add(ruleeBitwise1, position133)
					}
				}
			l131:
				add(ruleeBitwise, position130)
			}
			return true
		l129:
			position, tokenIndex = position129, tokenIndex129
			return false
		},
		/* 12 eBitwise1 <- <(eComp (((logicOr / bitwiseOr) Action17 eComp Action18) / ((logicAnd / bitwiseAnd) Action19 eComp Action20))*)> */
		nil,
		/* 13 eComp <- <(e1 ((lt Action21 e1 Action22) / (ge Action29 e1 Action30) / ((&('>') (gt Action31 e1 Action32)) | (&('!') (ne Action27 e1 Action28)) | (&('=') (eq Action25 e1 Action26)) | (&('<') (le Action23 e1 Action24))))*)> */
		func() bool {
			position155, tokenIndex155 := position, tokenIndex
			{
				position156 := position
				if !_rules[rulee1]() {
					goto l155
				}
			l157:
				{
					position158, tokenIndex158 := position, tokenIndex
					{
						position159, tokenIndex159 := position, tokenIndex
						{
							position161 := position
							{
								position162, tokenIndex162 := position, tokenIndex
								if buffer[position] != rune('<') {
									goto l163
								}
								position++
								goto l162
							l163:
								position, tokenIndex = position162, tokenIndex162
								if buffer[position] != rune('＜') {
									goto l160
								}
								position++
							}
						l162:
							if !_rules[rulesp]() {
								goto l160
							}
							add(rulelt, position161)
						}
						{
							add(ruleAction21, position)
						}
						if !_rules[rulee1]() {
							goto l160
						}
						{
							add(ruleAction22, position)
						}
						goto l159
					l160:
						position, tokenIndex = position159, tokenIndex159
						{
							position167 := position
							{
								position168, tokenIndex168 := position, tokenIndex
								if buffer[position] != rune('>') {
									goto l169
								}
								position++
								if buffer[position] != rune('=') {
									goto l169
								}
								position++
								goto l168
							l169:
								position, tokenIndex = position168, tokenIndex168
								if buffer[position] != rune('＞') {
									goto l166
								}
								position++
								if buffer[position] != rune('＝') {
									goto l166
								}
								position++
							}
						l168:
							if !_rules[rulesp]() {
								goto l166
							}
							add(rulege, position167)
						}
						{
							add(ruleAction29, position)
						}
						if !_rules[rulee1]() {
							goto l166
						}
						{
							add(ruleAction30, position)
						}
						goto l159
					l166:
						position, tokenIndex = position159, tokenIndex159
						{
							switch buffer[position] {
							case '>':
								{
									position173 := position
									{
										position174, tokenIndex174 := position, tokenIndex
										if buffer[position] != rune('>') {
											goto l175
										}
										position++
										goto l174
									l175:
										position, tokenIndex = position174, tokenIndex174
										if buffer[position] != rune('＞') {
											goto l158
										}
										position++
									}
								l174:
									if !_rules[rulesp]() {
										goto l158
									}
									add(rulegt, position173)
								}
								{
									add(ruleAction31, position)
								}
								if !_rules[rulee1]() {
									goto l158
								}
								{
									add(ruleAction32, position)
								}
							case '!':
								{
									position178 := position
									{
										position179, tokenIndex179 := position, tokenIndex
										if buffer[position] != rune('!') {
											goto l180
										}
										position++
										if buffer[position] != rune('=') {
											goto l180
										}
										position++
										goto l179
									l180:
										position, tokenIndex = position179, tokenIndex179
										if buffer[position] != rune('！') {
											goto l158
										}
										position++
										if buffer[position] != rune('＝') {
											goto l158
										}
										position++
									}
								l179:
									if !_rules[rulesp]() {
										goto l158
									}
									add(rulene, position178)
								}
								{
									add(ruleAction27, position)
								}
								if !_rules[rulee1]() {
									goto l158
								}
								{
									add(ruleAction28, position)
								}
							case '=':
								{
									position183 := position
									{
										position184, tokenIndex184 := position, tokenIndex
										if buffer[position] != rune('=') {
											goto l185
										}
										position++
										if buffer[position] != rune('=') {
											goto l185
										}
										position++
										goto l184
									l185:
										position, tokenIndex = position184, tokenIndex184
										if buffer[position] != rune('＝') {
											goto l158
										}
										position++
										if buffer[position] != rune('＝') {
											goto l158
										}
										position++
									}
								l184:
									if !_rules[rulesp]() {
										goto l158
									}
									add(ruleeq, position183)
								}
								{
									add(ruleAction25, position)
								}
								if !_rules[rulee1]() {
									goto l158
								}
								{
									add(ruleAction26, position)
								}
							default:
								{
									position188 := position
									{
										position189, tokenIndex189 := position, tokenIndex
										if buffer[position] != rune('<') {
											goto l190
										}
										position++
										if buffer[position] != rune('=') {
											goto l190
										}
										position++
										goto l189
									l190:
										position, tokenIndex = position189, tokenIndex189
										if buffer[position] != rune('＜') {
											goto l158
										}
										position++
										if buffer[position] != rune('＝') {
											goto l158
										}
										position++
									}
								l189:
									if !_rules[rulesp]() {
										goto l158
									}
									add(rulele, position188)
								}
								{
									add(ruleAction23, position)
								}
								if !_rules[rulee1]() {
									goto l158
								}
								{
									add(ruleAction24, position)
								}
							}
						}

					}
				l159:
					goto l157
				l158:
					position, tokenIndex = position158, tokenIndex158
				}
				add(ruleeComp, position156)
			}
			return true
		l155:
			position, tokenIndex = position155, tokenIndex155
			return false
		},
		/* 14 e1 <- <(e2 ((add Action33 e2 Action34) / (minus Action35 e2 Action36))*)> */
		func() bool {
			position193, tokenIndex193 := position, tokenIndex
			{
				position194 := position
				if !_rules[rulee2]() {
					goto l193
				}
			l195:
				{
					position196, tokenIndex196 := position, tokenIndex
					{
						position197, tokenIndex197 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l198
						}
						{
							add(ruleAction33, position)
						}
						if !_rules[rulee2]() {
							goto l198
						}
						{
							add(ruleAction34, position)
						}
						goto l197
					l198:
						position, tokenIndex = position197, tokenIndex197
						if !_rules[ruleminus]() {
							goto l196
						}
						{
							add(ruleAction35, position)
						}
						if !_rules[rulee2]() {
							goto l196
						}
						{
							add(ruleAction36, position)
						}
					}
				l197:
					goto l195
				l196:
					position, tokenIndex = position196, tokenIndex196
				}
				add(rulee1, position194)
			}
			return true
		l193:
			position, tokenIndex = position193, tokenIndex193
			return false
		},
		/* 15 e2 <- <(e3 ((&('%') (modulus Action41 e3 Action42)) | (&('/') (divide Action39 e3 Action40)) | (&('*') (multiply Action37 e3 Action38)))*)> */
		func() bool {
			position203, tokenIndex203 := position, tokenIndex
			{
				position204 := position
				if !_rules[rulee3]() {
					goto l203
				}
			l205:
				{
					position206, tokenIndex206 := position, tokenIndex
					{
						switch buffer[position] {
						case '%':
							{
								position208 := position
								if buffer[position] != rune('%') {
									goto l206
								}
								position++
								if !_rules[rulesp]() {
									goto l206
								}
								add(rulemodulus, position208)
							}
							{
								add(ruleAction41, position)
							}
							if !_rules[rulee3]() {
								goto l206
							}
							{
								add(ruleAction42, position)
							}
						case '/':
							{
								position211 := position
								{
									position212, tokenIndex212 := position, tokenIndex
									if buffer[position] != rune('/') {
										goto l213
									}
									position++
									goto l212
								l213:
									position, tokenIndex = position212, tokenIndex212
									if buffer[position] != rune('／') {
										goto l206
									}
									position++
								}
							l212:
								if !_rules[rulesp]() {
									goto l206
								}
								add(ruledivide, position211)
							}
							{
								add(ruleAction39, position)
							}
							if !_rules[rulee3]() {
								goto l206
							}
							{
								add(ruleAction40, position)
							}
						default:
							{
								position216 := position
								{
									position217, tokenIndex217 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l218
									}
									position++
									goto l217
								l218:
									position, tokenIndex = position217, tokenIndex217
									if buffer[position] != rune('＊') {
										goto l206
									}
									position++
								}
							l217:
								if !_rules[rulesp]() {
									goto l206
								}
								add(rulemultiply, position216)
							}
							{
								add(ruleAction37, position)
							}
							if !_rules[rulee3]() {
								goto l206
							}
							{
								add(ruleAction38, position)
							}
						}
					}

					goto l205
				l206:
					position, tokenIndex = position206, tokenIndex206
				}
				add(rulee2, position204)
			}
			return true
		l203:
			position, tokenIndex = position203, tokenIndex203
			return false
		},
		/* 16 e3 <- <(e4 (exponentiation Action43 e4 Action44)*)> */
		func() bool {
			position221, tokenIndex221 := position, tokenIndex
			{
				position222 := position
				if !_rules[rulee4]() {
					goto l221
				}
			l223:
				{
					position224, tokenIndex224 := position, tokenIndex
					{
						position225 := position
						{
							position226, tokenIndex226 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l227
							}
							position++
							if !_rules[rulesp]() {
								goto l227
							}
							goto l226
						l227:
							position, tokenIndex = position226, tokenIndex226
							if buffer[position] != rune('*') {
								goto l224
							}
							position++
							if buffer[position] != rune('*') {
								goto l224
							}
							position++
							if !_rules[rulesp]() {
								goto l224
							}
						}
					l226:
						add(ruleexponentiation, position225)
					}
					{
						add(ruleAction43, position)
					}
					if !_rules[rulee4]() {
						goto l224
					}
					{
						add(ruleAction44, position)
					}
					goto l223
				l224:
					position, tokenIndex = position224, tokenIndex224
				}
				add(rulee3, position222)
			}
			return true
		l221:
			position, tokenIndex = position221, tokenIndex221
			return false
		},
		/* 17 e4 <- <((minus e5 Action45) / e5)> */
		func() bool {
			position230, tokenIndex230 := position, tokenIndex
			{
				position231 := position
				{
					position232, tokenIndex232 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l233
					}
					if !_rules[rulee5]() {
						goto l233
					}
					{
						add(ruleAction45, position)
					}
					goto l232
				l233:
					position, tokenIndex = position232, tokenIndex232
					if !_rules[rulee5]() {
						goto l230
					}
				}
			l232:
				add(rulee4, position231)
			}
			return true
		l230:
			position, tokenIndex = position230, tokenIndex230
			return false
		},
		/* 18 e5 <- <((add eDice) / eDice)> */
		func() bool {
			position235, tokenIndex235 := position, tokenIndex
			{
				position236 := position
				{
					position237, tokenIndex237 := position, tokenIndex
					if !_rules[ruleadd]() {
						goto l238
					}
					if !_rules[ruleeDice]() {
						goto l238
					}
					goto l237
				l238:
					position, tokenIndex = position237, tokenIndex237
					if !_rules[ruleeDice]() {
						goto l235
					}
				}
			l237:
				add(rulee5, position236)
			}
			return true
		l235:
			position, tokenIndex = position235, tokenIndex235
			return false
		},
		/* 19 dndDiceSuffix <- <(((('优' '势') / ('k' 'h')) Action46 sp) / ((('劣' '势') / ('k' 'l')) Action47 sp))> */
		func() bool {
			position239, tokenIndex239 := position, tokenIndex
			{
				position240 := position
				{
					position241, tokenIndex241 := position, tokenIndex
					{
						position243, tokenIndex243 := position, tokenIndex
						if buffer[position] != rune('优') {
							goto l244
						}
						position++
						if buffer[position] != rune('势') {
							goto l244
						}
						position++
						goto l243
					l244:
						position, tokenIndex = position243, tokenIndex243
						if buffer[position] != rune('k') {
							goto l242
						}
						position++
						if buffer[position] != rune('h') {
							goto l242
						}
						position++
					}
				l243:
					{
						add(ruleAction46, position)
					}
					if !_rules[rulesp]() {
						goto l242
					}
					goto l241
				l242:
					position, tokenIndex = position241, tokenIndex241
					{
						position246, tokenIndex246 := position, tokenIndex
						if buffer[position] != rune('劣') {
							goto l247
						}
						position++
						if buffer[position] != rune('势') {
							goto l247
						}
						position++
						goto l246
					l247:
						position, tokenIndex = position246, tokenIndex246
						if buffer[position] != rune('k') {
							goto l239
						}
						position++
						if buffer[position] != rune('l') {
							goto l239
						}
						position++
					}
				l246:
					{
						add(ruleAction47, position)
					}
					if !_rules[rulesp]() {
						goto l239
					}
				}
			l241:
				add(ruledndDiceSuffix, position240)
			}
			return true
		l239:
			position, tokenIndex = position239, tokenIndex239
			return false
		},
		/* 20 kqDiceOp <- <(('k' eDice2 Action48)? ('q' eDice2 Action49)? ('d' 'l' eDice2 Action50)? ('d' 'h' eDice2 Action51)?)> */
		func() bool {
			{
				position250 := position
				{
					position251, tokenIndex251 := position, tokenIndex
					if buffer[position] != rune('k') {
						goto l251
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l251
					}
					{
						add(ruleAction48, position)
					}
					goto l252
				l251:
					position, tokenIndex = position251, tokenIndex251
				}
			l252:
				{
					position254, tokenIndex254 := position, tokenIndex
					if buffer[position] != rune('q') {
						goto l254
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l254
					}
					{
						add(ruleAction49, position)
					}
					goto l255
				l254:
					position, tokenIndex = position254, tokenIndex254
				}
			l255:
				{
					position257, tokenIndex257 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l257
					}
					position++
					if buffer[position] != rune('l') {
						goto l257
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l257
					}
					{
						add(ruleAction50, position)
					}
					goto l258
				l257:
					position, tokenIndex = position257, tokenIndex257
				}
			l258:
				{
					position260, tokenIndex260 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l260
					}
					position++
					if buffer[position] != rune('h') {
						goto l260
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l260
					}
					{
						add(ruleAction51, position)
					}
					goto l261
				l260:
					position, tokenIndex = position260, tokenIndex260
				}
			l261:
				add(rulekqDiceOp, position250)
			}
			return true
		},
		/* 21 _dnumber <- <&(('d' / 'D') (number / '('))> */
		func() bool {
			position263, tokenIndex263 := position, tokenIndex
			{
				position264 := position
				{
					position265, tokenIndex265 := position, tokenIndex
					{
						position266, tokenIndex266 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l267
						}
						position++
						goto l266
					l267:
						position, tokenIndex = position266, tokenIndex266
						if buffer[position] != rune('D') {
							goto l263
						}
						position++
					}
				l266:
					{
						position268, tokenIndex268 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l269
						}
						goto l268
					l269:
						position, tokenIndex = position268, tokenIndex268
						if buffer[position] != rune('(') {
							goto l263
						}
						position++
					}
				l268:
					position, tokenIndex = position265, tokenIndex265
				}
				add(rule_dnumber, position264)
			}
			return true
		l263:
			position, tokenIndex = position263, tokenIndex263
			return false
		},
		/* 22 simpleDice2 <- <(&(number / '(') eDice2)> */
		func() bool {
			position270, tokenIndex270 := position, tokenIndex
			{
				position271 := position
				{
					position272, tokenIndex272 := position, tokenIndex
					{
						position273, tokenIndex273 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l274
						}
						goto l273
					l274:
						position, tokenIndex = position273, tokenIndex273
						if buffer[position] != rune('(') {
							goto l270
						}
						position++
					}
				l273:
					position, tokenIndex = position272, tokenIndex272
				}
				if !_rules[ruleeDice2]() {
					goto l270
				}
				add(rulesimpleDice2, position271)
			}
			return true
		l270:
			position, tokenIndex = position270, tokenIndex270
			return false
		},
		/* 23 wodDicePool <- <(Action52 (simpleDice2 Action53)?)> */
		nil,
		/* 24 doubleCrossDicePool <- <(Action54 (simpleDice2 Action55))> */
		nil,
		/* 25 eDice <- <((_dnumber ('d' / 'D') Action56 eDice2 dndDiceSuffix Action57) / (_dnumber ('d' / 'D') Action58 eDice2 kqDiceOp Action59) / (('d' / 'D') dndDiceSuffix Action60) / (('d' / 'D') !(!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .) sp Action61) / (&{!p.flags.DisableDicePool} wodDicePool ('a' / 'A') simpleDice2 ((&('Q' | 'q') (('q' / 'Q') simpleDice2 Action64)) | (&('K' | 'k') (('k' / 'K') simpleDice2 Action63)) | (&('M' | 'm') (('m' / 'M') simpleDice2 Action62)))* Action65) / (&{!p.flags.DisableCrossDice} doubleCrossDicePool ('c' / 'C') simpleDice2 (('m' / 'M') simpleDice2 Action66)* Action67) / (eDice2 (('d' / 'D') Action68 (simpleDice2 / (&{!p.flags.DisableNumDice} sp Action69)) kqDiceOp Action70)*))> */
		func() bool {
			position277, tokenIndex277 := position, tokenIndex
			{
				position278 := position
				{
					position279, tokenIndex279 := position, tokenIndex
					if !_rules[rule_dnumber]() {
						goto l280
					}
					{
						position281, tokenIndex281 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l282
						}
						position++
						goto l281
					l282:
						position, tokenIndex = position281, tokenIndex281
						if buffer[position] != rune('D') {
							goto l280
						}
						position++
					}
				l281:
					{
						add(ruleAction56, position)
					}
					if !_rules[ruleeDice2]() {
						goto l280
					}
					if !_rules[ruledndDiceSuffix]() {
						goto l280
					}
					{
						add(ruleAction57, position)
					}
					goto l279
				l280:
					position, tokenIndex = position279, tokenIndex279
					if !_rules[rule_dnumber]() {
						goto l285
					}
					{
						position286, tokenIndex286 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l287
						}
						position++
						goto l286
					l287:
						position, tokenIndex = position286, tokenIndex286
						if buffer[position] != rune('D') {
							goto l285
						}
						position++
					}
				l286:
					{
						add(ruleAction58, position)
					}
					if !_rules[ruleeDice2]() {
						goto l285
					}
					if !_rules[rulekqDiceOp]() {
						goto l285
					}
					{
						add(ruleAction59, position)
					}
					goto l279
				l285:
					position, tokenIndex = position279, tokenIndex279
					{
						position291, tokenIndex291 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l292
						}
						position++
						goto l291
					l292:
						position, tokenIndex = position291, tokenIndex291
						if buffer[position] != rune('D') {
							goto l290
						}
						position++
					}
				l291:
					if !_rules[ruledndDiceSuffix]() {
						goto l290
					}
					{
						add(ruleAction60, position)
					}
					goto l279
				l290:
					position, tokenIndex = position279, tokenIndex279
					{
						position295, tokenIndex295 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l296
						}
						position++
						goto l295
					l296:
						position, tokenIndex = position295, tokenIndex295
						if buffer[position] != rune('D') {
							goto l294
						}
						position++
					}
				l295:
					{
						position297, tokenIndex297 := position, tokenIndex
						{
							position298, tokenIndex298 := position, tokenIndex
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l298
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l298
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l298
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l298
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l298
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l298
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l298
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l298
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l298
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l298
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l298
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l298
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l298
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l298
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l298
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l298
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l298
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l298
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l298
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l298
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l298
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l298
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l298
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l298
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l298
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l298
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l298
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l298
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l298
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l298
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l298
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l298
									}
									position++
								}
							}

							goto l297
						l298:
							position, tokenIndex = position298, tokenIndex298
						}
						if !matchDot() {
							goto l297
						}
						goto l294
					l297:
						position, tokenIndex = position297, tokenIndex297
					}
					if !_rules[rulesp]() {
						goto l294
					}
					{
						add(ruleAction61, position)
					}
					goto l279
				l294:
					position, tokenIndex = position279, tokenIndex279
					if !(!p.flags.DisableDicePool) {
						goto l301
					}
					{
						position302 := position
						{
							add(ruleAction52, position)
						}
						{
							position304, tokenIndex304 := position, tokenIndex
							if !_rules[rulesimpleDice2]() {
								goto l304
							}
							{
								add(ruleAction53, position)
							}
							goto l305
						l304:
							position, tokenIndex = position304, tokenIndex304
						}
					l305:
						add(rulewodDicePool, position302)
					}
					{
						position307, tokenIndex307 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l308
						}
						position++
						goto l307
					l308:
						position, tokenIndex = position307, tokenIndex307
						if buffer[position] != rune('A') {
							goto l301
						}
						position++
					}
				l307:
					if !_rules[rulesimpleDice2]() {
						goto l301
					}
				l309:
					{
						position310, tokenIndex310 := position, tokenIndex
						{
							switch buffer[position] {
							case 'Q', 'q':
								{
									position312, tokenIndex312 := position, tokenIndex
									if buffer[position] != rune('q') {
										goto l313
									}
									position++
									goto l312
								l313:
									position, tokenIndex = position312, tokenIndex312
									if buffer[position] != rune('Q') {
										goto l310
									}
									position++
								}
							l312:
								if !_rules[rulesimpleDice2]() {
									goto l310
								}
								{
									add(ruleAction64, position)
								}
							case 'K', 'k':
								{
									position315, tokenIndex315 := position, tokenIndex
									if buffer[position] != rune('k') {
										goto l316
									}
									position++
									goto l315
								l316:
									position, tokenIndex = position315, tokenIndex315
									if buffer[position] != rune('K') {
										goto l310
									}
									position++
								}
							l315:
								if !_rules[rulesimpleDice2]() {
									goto l310
								}
								{
									add(ruleAction63, position)
								}
							default:
								{
									position318, tokenIndex318 := position, tokenIndex
									if buffer[position] != rune('m') {
										goto l319
									}
									position++
									goto l318
								l319:
									position, tokenIndex = position318, tokenIndex318
									if buffer[position] != rune('M') {
										goto l310
									}
									position++
								}
							l318:
								if !_rules[rulesimpleDice2]() {
									goto l310
								}
								{
									add(ruleAction62, position)
								}
							}
						}

						goto l309
					l310:
						position, tokenIndex = position310, tokenIndex310
					}
					{
						add(ruleAction65, position)
					}
					goto l279
				l301:
					position, tokenIndex = position279, tokenIndex279
					if !(!p.flags.DisableCrossDice) {
						goto l322
					}
					{
						position323 := position
						{
							add(ruleAction54, position)
						}
						if !_rules[rulesimpleDice2]() {
							goto l322
						}
						{
							add(ruleAction55, position)
						}
						add(ruledoubleCrossDicePool, position323)
					}
					{
						position326, tokenIndex326 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l327
						}
						position++
						goto l326
					l327:
						position, tokenIndex = position326, tokenIndex326
						if buffer[position] != rune('C') {
							goto l322
						}
						position++
					}
				l326:
					if !_rules[rulesimpleDice2]() {
						goto l322
					}
				l328:
					{
						position329, tokenIndex329 := position, tokenIndex
						{
							position330, tokenIndex330 := position, tokenIndex
							if buffer[position] != rune('m') {
								goto l331
							}
							position++
							goto l330
						l331:
							position, tokenIndex = position330, tokenIndex330
							if buffer[position] != rune('M') {
								goto l329
							}
							position++
						}
					l330:
						if !_rules[rulesimpleDice2]() {
							goto l329
						}
						{
							add(ruleAction66, position)
						}
						goto l328
					l329:
						position, tokenIndex = position329, tokenIndex329
					}
					{
						add(ruleAction67, position)
					}
					goto l279
				l322:
					position, tokenIndex = position279, tokenIndex279
					if !_rules[ruleeDice2]() {
						goto l277
					}
				l334:
					{
						position335, tokenIndex335 := position, tokenIndex
						{
							position336, tokenIndex336 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l337
							}
							position++
							goto l336
						l337:
							position, tokenIndex = position336, tokenIndex336
							if buffer[position] != rune('D') {
								goto l335
							}
							position++
						}
					l336:
						{
							add(ruleAction68, position)
						}
						{
							position339, tokenIndex339 := position, tokenIndex
							if !_rules[rulesimpleDice2]() {
								goto l340
							}
							goto l339
						l340:
							position, tokenIndex = position339, tokenIndex339
							if !(!p.flags.DisableNumDice) {
								goto l335
							}
							if !_rules[rulesp]() {
								goto l335
							}
							{
								add(ruleAction69, position)
							}
						}
					l339:
						if !_rules[rulekqDiceOp]() {
							goto l335
						}
						{
							add(ruleAction70, position)
						}
						goto l334
					l335:
						position, tokenIndex = position335, tokenIndex335
					}
				}
			l279:
				add(ruleeDice, position278)
			}
			return true
		l277:
			position, tokenIndex = position277, tokenIndex277
			return false
		},
		/* 26 laNumberOrLeftParen <- <&(number / '(')> */
		func() bool {
			position343, tokenIndex343 := position, tokenIndex
			{
				position344 := position
				{
					position345, tokenIndex345 := position, tokenIndex
					{
						position346, tokenIndex346 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l347
						}
						goto l346
					l347:
						position, tokenIndex = position346, tokenIndex346
						if buffer[position] != rune('(') {
							goto l343
						}
						position++
					}
				l346:
					position, tokenIndex = position345, tokenIndex345
				}
				add(rulelaNumberOrLeftParen, position344)
			}
			return true
		l343:
			position, tokenIndex = position343, tokenIndex343
			return false
		},
		/* 27 eDice2 <- <((&{!p.flags.DisableBPDice} eDice2x) / eDice4)> */
		func() bool {
			position348, tokenIndex348 := position, tokenIndex
			{
				position349 := position
				{
					position350, tokenIndex350 := position, tokenIndex
					if !(!p.flags.DisableBPDice) {
						goto l351
					}
					{
						position352 := position
						{
							position353, tokenIndex353 := position, tokenIndex
							{
								position355, tokenIndex355 := position, tokenIndex
								if buffer[position] != rune('p') {
									goto l356
								}
								position++
								goto l355
							l356:
								position, tokenIndex = position355, tokenIndex355
								if buffer[position] != rune('P') {
									goto l354
								}
								position++
							}
						l355:
							if !_rules[rulelaNumberOrLeftParen]() {
								goto l354
							}
							if !_rules[ruleeDice3]() {
								goto l354
							}
							{
								add(ruleAction71, position)
							}
							goto l353
						l354:
							position, tokenIndex = position353, tokenIndex353
							{
								position359, tokenIndex359 := position, tokenIndex
								if buffer[position] != rune('p') {
									goto l360
								}
								position++
								goto l359
							l360:
								position, tokenIndex = position359, tokenIndex359
								if buffer[position] != rune('P') {
									goto l358
								}
								position++
							}
						l359:
							{
								add(ruleAction72, position)
							}
							goto l353
						l358:
							position, tokenIndex = position353, tokenIndex353
							if !_rules[ruleeDice3]() {
								goto l351
							}
						}
					l353:
						add(ruleeDice2x, position352)
					}
					goto l350
				l351:
					position, tokenIndex = position350, tokenIndex350
					if !_rules[ruleeDice4]() {
						goto l348
					}
				}
			l350:
				add(ruleeDice2, position349)
			}
			return true
		l348:
			position, tokenIndex = position348, tokenIndex348
			return false
		},
		/* 28 eDice2x <- <((('p' / 'P') laNumberOrLeftParen eDice3 Action71) / (('p' / 'P') Action72) / eDice3)> */
		nil,
		/* 29 eDice3 <- <((('b' / 'B') laNumberOrLeftParen value Action73) / (('b' / 'B') Action74) / eDice4)> */
		func() bool {
			position363, tokenIndex363 := position, tokenIndex
			{
				position364 := position
				{
					position365, tokenIndex365 := position, tokenIndex
					{
						position367, tokenIndex367 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l368
						}
						position++
						goto l367
					l368:
						position, tokenIndex = position367, tokenIndex367
						if buffer[position] != rune('B') {
							goto l366
						}
						position++
					}
				l367:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l366
					}
					if !_rules[rulevalue]() {
						goto l366
					}
					{
						add(ruleAction73, position)
					}
					goto l365
				l366:
					position, tokenIndex = position365, tokenIndex365
					{
						position371, tokenIndex371 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l372
						}
						position++
						goto l371
					l372:
						position, tokenIndex = position371, tokenIndex371
						if buffer[position] != rune('B') {
							goto l370
						}
						position++
					}
				l371:
					{
						add(ruleAction74, position)
					}
					goto l365
				l370:
					position, tokenIndex = position365, tokenIndex365
					if !_rules[ruleeDice4]() {
						goto l363
					}
				}
			l365:
				add(ruleeDice3, position364)
			}
			return true
		l363:
			position, tokenIndex = position363, tokenIndex363
			return false
		},
		/* 30 eDice4 <- <((('f' / 'F') sp Action75) / value)> */
		func() bool {
			position374, tokenIndex374 := position, tokenIndex
			{
				position375 := position
				{
					position376, tokenIndex376 := position, tokenIndex
					{
						position378, tokenIndex378 := position, tokenIndex
						if buffer[position] != rune('f') {
							goto l379
						}
						position++
						goto l378
					l379:
						position, tokenIndex = position378, tokenIndex378
						if buffer[position] != rune('F') {
							goto l377
						}
						position++
					}
				l378:
					if !_rules[rulesp]() {
						goto l377
					}
					{
						add(ruleAction75, position)
					}
					goto l376
				l377:
					position, tokenIndex = position376, tokenIndex376
					if !_rules[rulevalue]() {
						goto l374
					}
				}
			l376:
				add(ruleeDice4, position375)
			}
			return true
		l374:
			position, tokenIndex = position374, tokenIndex374
			return false
		},
		/* 31 value <- <(number / ('t' 'h' 'i' 's' sp '.' sp identifier sp Action76) / ('i' 'n' 't' '(' sp e0 sp ')' sp Action77) / ('s' 't' 'r' '(' sp e0 sp ')' sp Action78) / assign_expr / (identifier Action79) / sub / fstring)> */
		func() bool {
			position381, tokenIndex381 := position, tokenIndex
			{
				position382 := position
				{
					position383, tokenIndex383 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l384
					}
					goto l383
				l384:
					position, tokenIndex = position383, tokenIndex383
					if buffer[position] != rune('t') {
						goto l385
					}
					position++
					if buffer[position] != rune('h') {
						goto l385
					}
					position++
					if buffer[position] != rune('i') {
						goto l385
					}
					position++
					if buffer[position] != rune('s') {
						goto l385
					}
					position++
					if !_rules[rulesp]() {
						goto l385
					}
					if buffer[position] != rune('.') {
						goto l385
					}
					position++
					if !_rules[rulesp]() {
						goto l385
					}
					if !_rules[ruleidentifier]() {
						goto l385
					}
					if !_rules[rulesp]() {
						goto l385
					}
					{
						add(ruleAction76, position)
					}
					goto l383
				l385:
					position, tokenIndex = position383, tokenIndex383
					if buffer[position] != rune('i') {
						goto l387
					}
					position++
					if buffer[position] != rune('n') {
						goto l387
					}
					position++
					if buffer[position] != rune('t') {
						goto l387
					}
					position++
					if buffer[position] != rune('(') {
						goto l387
					}
					position++
					if !_rules[rulesp]() {
						goto l387
					}
					if !_rules[rulee0]() {
						goto l387
					}
					if !_rules[rulesp]() {
						goto l387
					}
					if buffer[position] != rune(')') {
						goto l387
					}
					position++
					if !_rules[rulesp]() {
						goto l387
					}
					{
						add(ruleAction77, position)
					}
					goto l383
				l387:
					position, tokenIndex = position383, tokenIndex383
					if buffer[position] != rune('s') {
						goto l389
					}
					position++
					if buffer[position] != rune('t') {
						goto l389
					}
					position++
					if buffer[position] != rune('r') {
						goto l389
					}
					position++
					if buffer[position] != rune('(') {
						goto l389
					}
					position++
					if !_rules[rulesp]() {
						goto l389
					}
					if !_rules[rulee0]() {
						goto l389
					}
					if !_rules[rulesp]() {
						goto l389
					}
					if buffer[position] != rune(')') {
						goto l389
					}
					position++
					if !_rules[rulesp]() {
						goto l389
					}
					{
						add(ruleAction78, position)
					}
					goto l383
				l389:
					position, tokenIndex = position383, tokenIndex383
					if !_rules[ruleassign_expr]() {
						goto l391
					}
					goto l383
				l391:
					position, tokenIndex = position383, tokenIndex383
					if !_rules[ruleidentifier]() {
						goto l392
					}
					{
						add(ruleAction79, position)
					}
					goto l383
				l392:
					position, tokenIndex = position383, tokenIndex383
					{
						position395 := position
						{
							position396 := position
							if buffer[position] != rune('(') {
								goto l394
							}
							position++
							if !_rules[rulesp]() {
								goto l394
							}
							add(ruleopen, position396)
						}
						if !_rules[rulee0]() {
							goto l394
						}
						{
							position397 := position
							if buffer[position] != rune(')') {
								goto l394
							}
							position++
							if !_rules[rulesp]() {
								goto l394
							}
							add(ruleclose, position397)
						}
						add(rulesub, position395)
					}
					goto l383
				l394:
					position, tokenIndex = position383, tokenIndex383
					{
						position398 := position
						{
							switch buffer[position] {
							case '\'':
								if buffer[position] != rune('\'') {
									goto l381
								}
								position++
								{
									add(ruleAction95, position)
								}
								{
									position401 := position
								l402:
									{
										position403, tokenIndex403 := position, tokenIndex
										{
											position404 := position
											{
												position405 := position
												{
													position408, tokenIndex408 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l409
													}
													goto l408
												l409:
													position, tokenIndex = position408, tokenIndex408
													{
														position410, tokenIndex410 := position, tokenIndex
														{
															switch buffer[position] {
															case '\r':
																if buffer[position] != rune('\r') {
																	goto l410
																}
																position++
															case '\n':
																if buffer[position] != rune('\n') {
																	goto l410
																}
																position++
															case '\\':
																if buffer[position] != rune('\\') {
																	goto l410
																}
																position++
															default:
																if buffer[position] != rune('\'') {
																	goto l410
																}
																position++
															}
														}

														goto l403
													l410:
														position, tokenIndex = position410, tokenIndex410
													}
													if !matchDot() {
														goto l403
													}
												}
											l408:
											l406:
												{
													position407, tokenIndex407 := position, tokenIndex
													{
														position412, tokenIndex412 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l413
														}
														goto l412
													l413:
														position, tokenIndex = position412, tokenIndex412
														{
															position414, tokenIndex414 := position, tokenIndex
															{
																switch buffer[position] {
																case '\r':
																	if buffer[position] != rune('\r') {
																		goto l414
																	}
																	position++
																case '\n':
																	if buffer[position] != rune('\n') {
																		goto l414
																	}
																	position++
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l414
																	}
																	position++
																default:
																	if buffer[position] != rune('\'') {
																		goto l414
																	}
																	position++
																}
															}

															goto l407
														l414:
															position, tokenIndex = position414, tokenIndex414
														}
														if !matchDot() {
															goto l407
														}
													}
												l412:
													goto l406
												l407:
													position, tokenIndex = position407, tokenIndex407
												}
												add(rulePegText, position405)
											}
											{
												add(ruleAction84, position)
											}
											add(rulestrPart3, position404)
										}
										goto l402
									l403:
										position, tokenIndex = position403, tokenIndex403
									}
									add(rulePegText, position401)
								}
								if buffer[position] != rune('\'') {
									goto l381
								}
								position++
								{
									add(ruleAction96, position)
								}
							case '"':
								if buffer[position] != rune('"') {
									goto l381
								}
								position++
								{
									add(ruleAction93, position)
								}
								{
									position419 := position
								l420:
									{
										position421, tokenIndex421 := position, tokenIndex
										{
											position422 := position
											{
												position423 := position
												{
													position426, tokenIndex426 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l427
													}
													goto l426
												l427:
													position, tokenIndex = position426, tokenIndex426
													{
														position428, tokenIndex428 := position, tokenIndex
														{
															switch buffer[position] {
															case '\r':
																if buffer[position] != rune('\r') {
																	goto l428
																}
																position++
															case '\n':
																if buffer[position] != rune('\n') {
																	goto l428
																}
																position++
															case '\\':
																if buffer[position] != rune('\\') {
																	goto l428
																}
																position++
															default:
																if buffer[position] != rune('"') {
																	goto l428
																}
																position++
															}
														}

														goto l421
													l428:
														position, tokenIndex = position428, tokenIndex428
													}
													if !matchDot() {
														goto l421
													}
												}
											l426:
											l424:
												{
													position425, tokenIndex425 := position, tokenIndex
													{
														position430, tokenIndex430 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l431
														}
														goto l430
													l431:
														position, tokenIndex = position430, tokenIndex430
														{
															position432, tokenIndex432 := position, tokenIndex
															{
																switch buffer[position] {
																case '\r':
																	if buffer[position] != rune('\r') {
																		goto l432
																	}
																	position++
																case '\n':
																	if buffer[position] != rune('\n') {
																		goto l432
																	}
																	position++
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l432
																	}
																	position++
																default:
																	if buffer[position] != rune('"') {
																		goto l432
																	}
																	position++
																}
															}

															goto l425
														l432:
															position, tokenIndex = position432, tokenIndex432
														}
														if !matchDot() {
															goto l425
														}
													}
												l430:
													goto l424
												l425:
													position, tokenIndex = position425, tokenIndex425
												}
												add(rulePegText, position423)
											}
											{
												add(ruleAction83, position)
											}
											add(rulestrPart2, position422)
										}
										goto l420
									l421:
										position, tokenIndex = position421, tokenIndex421
									}
									add(rulePegText, position419)
								}
								if buffer[position] != rune('"') {
									goto l381
								}
								position++
								{
									add(ruleAction94, position)
								}
							case '\x1e':
								if buffer[position] != rune('\x1e') {
									goto l381
								}
								position++
								{
									add(ruleAction89, position)
								}
								{
									position437 := position
								l438:
									{
										position439, tokenIndex439 := position, tokenIndex
										{
											position440, tokenIndex440 := position, tokenIndex
											if buffer[position] != rune('{') {
												goto l441
											}
											position++
											if !_rules[rulesp]() {
												goto l441
											}
											if !_rules[rulee]() {
												goto l441
											}
											{
												add(ruleAction90, position)
											}
											if buffer[position] != rune('}') {
												goto l441
											}
											position++
											goto l440
										l441:
											position, tokenIndex = position440, tokenIndex440
											if buffer[position] != rune('{') {
												goto l443
											}
											position++
											if buffer[position] != rune('%') {
												goto l443
											}
											position++
											if !_rules[rulesp]() {
												goto l443
											}
											if !_rules[rulee]() {
												goto l443
											}
											{
												add(ruleAction91, position)
											}
											if buffer[position] != rune('%') {
												goto l443
											}
											position++
											if buffer[position] != rune('}') {
												goto l443
											}
											position++
											goto l440
										l443:
											position, tokenIndex = position440, tokenIndex440
											{
												position445 := position
												{
													position446 := position
													{
														position449, tokenIndex449 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l450
														}
														goto l449
													l450:
														position, tokenIndex = position449, tokenIndex449
														{
															position451, tokenIndex451 := position, tokenIndex
															{
																switch buffer[position] {
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l451
																	}
																	position++
																case '\x1e':
																	if buffer[position] != rune('\x1e') {
																		goto l451
																	}
																	position++
																default:
																	if buffer[position] != rune('{') {
																		goto l451
																	}
																	position++
																}
															}

															goto l439
														l451:
															position, tokenIndex = position451, tokenIndex451
														}
														if !matchDot() {
															goto l439
														}
													}
												l449:
												l447:
													{
														position448, tokenIndex448 := position, tokenIndex
														{
															position453, tokenIndex453 := position, tokenIndex
															if !_rules[ruleescape]() {
																goto l454
															}
															goto l453
														l454:
															position, tokenIndex = position453, tokenIndex453
															{
																position455, tokenIndex455 := position, tokenIndex
																{
																	switch buffer[position] {
																	case '\\':
																		if buffer[position] != rune('\\') {
																			goto l455
																		}
																		position++
																	case '\x1e':
																		if buffer[position] != rune('\x1e') {
																			goto l455
																		}
																		position++
																	default:
																		if buffer[position] != rune('{') {
																			goto l455
																		}
																		position++
																	}
																}

																goto l448
															l455:
																position, tokenIndex = position455, tokenIndex455
															}
															if !matchDot() {
																goto l448
															}
														}
													l453:
														goto l447
													l448:
														position, tokenIndex = position448, tokenIndex448
													}
													add(rulePegText, position446)
												}
												{
													add(ruleAction82, position)
												}
												add(rulestrPart1, position445)
											}
										}
									l440:
										goto l438
									l439:
										position, tokenIndex = position439, tokenIndex439
									}
									add(rulePegText, position437)
								}
								if buffer[position] != rune('\x1e') {
									goto l381
								}
								position++
								{
									add(ruleAction92, position)
								}
							default:
								if buffer[position] != rune('`') {
									goto l381
								}
								position++
								{
									add(ruleAction85, position)
								}
								{
									position460 := position
								l461:
									{
										position462, tokenIndex462 := position, tokenIndex
										{
											position463, tokenIndex463 := position, tokenIndex
											if buffer[position] != rune('{') {
												goto l464
											}
											position++
											if !_rules[rulesp]() {
												goto l464
											}
											if !_rules[rulee]() {
												goto l464
											}
											{
												add(ruleAction86, position)
											}
											if buffer[position] != rune('}') {
												goto l464
											}
											position++
											goto l463
										l464:
											position, tokenIndex = position463, tokenIndex463
											if buffer[position] != rune('{') {
												goto l466
											}
											position++
											if buffer[position] != rune('{') {
												goto l466
											}
											position++
											if !_rules[rulesp]() {
												goto l466
											}
											if !_rules[rulee]() {
												goto l466
											}
											{
												add(ruleAction87, position)
											}
											if buffer[position] != rune('}') {
												goto l466
											}
											position++
											if buffer[position] != rune('}') {
												goto l466
											}
											position++
											goto l463
										l466:
											position, tokenIndex = position463, tokenIndex463
											{
												position468 := position
												{
													position469 := position
													{
														position472, tokenIndex472 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l473
														}
														goto l472
													l473:
														position, tokenIndex = position472, tokenIndex472
														{
															position474, tokenIndex474 := position, tokenIndex
															{
																switch buffer[position] {
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l474
																	}
																	position++
																case '`':
																	if buffer[position] != rune('`') {
																		goto l474
																	}
																	position++
																default:
																	if buffer[position] != rune('{') {
																		goto l474
																	}
																	position++
																}
															}

															goto l462
														l474:
															position, tokenIndex = position474, tokenIndex474
														}
														if !matchDot() {
															goto l462
														}
													}
												l472:
												l470:
													{
														position471, tokenIndex471 := position, tokenIndex
														{
															position476, tokenIndex476 := position, tokenIndex
															if !_rules[ruleescape]() {
																goto l477
															}
															goto l476
														l477:
															position, tokenIndex = position476, tokenIndex476
															{
																position478, tokenIndex478 := position, tokenIndex
																{
																	switch buffer[position] {
																	case '\\':
																		if buffer[position] != rune('\\') {
																			goto l478
																		}
																		position++
																	case '`':
																		if buffer[position] != rune('`') {
																			goto l478
																		}
																		position++
																	default:
																		if buffer[position] != rune('{') {
																			goto l478
																		}
																		position++
																	}
																}

																goto l471
															l478:
																position, tokenIndex = position478, tokenIndex478
															}
															if !matchDot() {
																goto l471
															}
														}
													l476:
														goto l470
													l471:
														position, tokenIndex = position471, tokenIndex471
													}
													add(rulePegText, position469)
												}
												{
													add(ruleAction81, position)
												}
												add(rulestrPart, position468)
											}
										}
									l463:
										goto l461
									l462:
										position, tokenIndex = position462, tokenIndex462
									}
									add(rulePegText, position460)
								}
								if buffer[position] != rune('`') {
									goto l381
								}
								position++
								{
									add(ruleAction88, position)
								}
							}
						}

						if !_rules[rulesp]() {
							goto l381
						}
						add(rulefstring, position398)
					}
				}
			l383:
				add(rulevalue, position382)
			}
			return true
		l381:
			position, tokenIndex = position381, tokenIndex381
			return false
		},
		/* 32 number <- <(<[0-9]+> sp Action80)> */
		func() bool {
			position482, tokenIndex482 := position, tokenIndex
			{
				position483 := position
				{
					position484 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l482
					}
					position++
				l485:
					{
						position486, tokenIndex486 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l486
						}
						position++
						goto l485
					l486:
						position, tokenIndex = position486, tokenIndex486
					}
					add(rulePegText, position484)
				}
				if !_rules[rulesp]() {
					goto l482
				}
				{
					add(ruleAction80, position)
				}
				add(rulenumber, position483)
			}
			return true
		l482:
			position, tokenIndex = position482, tokenIndex482
			return false
		},
		/* 33 identifier <- <(<(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) . (!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .)*)> sp)> */
		func() bool {
			position488, tokenIndex488 := position, tokenIndex
			{
				position489 := position
				{
					position490 := position
					{
						position491, tokenIndex491 := position, tokenIndex
						{
							switch buffer[position] {
							case '\x1e':
								if buffer[position] != rune('\x1e') {
									goto l491
								}
								position++
							case '\r':
								if buffer[position] != rune('\r') {
									goto l491
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l491
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l491
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l491
								}
								position++
							case '~':
								if buffer[position] != rune('~') {
									goto l491
								}
								position++
							case '}':
								if buffer[position] != rune('}') {
									goto l491
								}
								position++
							case '|':
								if buffer[position] != rune('|') {
									goto l491
								}
								position++
							case '{':
								if buffer[position] != rune('{') {
									goto l491
								}
								position++
							case '`':
								if buffer[position] != rune('`') {
									goto l491
								}
								position++
							case '^':
								if buffer[position] != rune('^') {
									goto l491
								}
								position++
							case ']':
								if buffer[position] != rune(']') {
									goto l491
								}
								position++
							case '\\':
								if buffer[position] != rune('\\') {
									goto l491
								}
								position++
							case '[':
								if buffer[position] != rune('[') {
									goto l491
								}
								position++
							case '@':
								if buffer[position] != rune('@') {
									goto l491
								}
								position++
							case '?':
								if buffer[position] != rune('?') {
									goto l491
								}
								position++
							case '>':
								if buffer[position] != rune('>') {
									goto l491
								}
								position++
							case '=':
								if buffer[position] != rune('=') {
									goto l491
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l491
								}
								position++
							case ';':
								if buffer[position] != rune(';') {
									goto l491
								}
								position++
							case ':':
								if buffer[position] != rune(':') {
									goto l491
								}
								position++
							case '/':
								if buffer[position] != rune('/') {
									goto l491
								}
								position++
							case '+':
								if buffer[position] != rune('+') {
									goto l491
								}
								position++
							case '*':
								if buffer[position] != rune('*') {
									goto l491
								}
								position++
							case ')':
								if buffer[position] != rune(')') {
									goto l491
								}
								position++
							case '(':
								if buffer[position] != rune('(') {
									goto l491
								}
								position++
							case '\'':
								if buffer[position] != rune('\'') {
									goto l491
								}
								position++
							case '&':
								if buffer[position] != rune('&') {
									goto l491
								}
								position++
							case '%':
								if buffer[position] != rune('%') {
									goto l491
								}
								position++
							case '#':
								if buffer[position] != rune('#') {
									goto l491
								}
								position++
							case '"':
								if buffer[position] != rune('"') {
									goto l491
								}
								position++
							case '!':
								if buffer[position] != rune('!') {
									goto l491
								}
								position++
							case ',', '-', '.':
								if c := buffer[position]; c < rune(',') || c > rune('.') {
									goto l491
								}
								position++
							default:
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l491
								}
								position++
							}
						}

						goto l488
					l491:
						position, tokenIndex = position491, tokenIndex491
					}
					if !matchDot() {
						goto l488
					}
				l493:
					{
						position494, tokenIndex494 := position, tokenIndex
						{
							position495, tokenIndex495 := position, tokenIndex
							{
								switch buffer[position] {
								case '\x1e':
									if buffer[position] != rune('\x1e') {
										goto l495
									}
									position++
								case '\r':
									if buffer[position] != rune('\r') {
										goto l495
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l495
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l495
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l495
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l495
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l495
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l495
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l495
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l495
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l495
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l495
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l495
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l495
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l495
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l495
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l495
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l495
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l495
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l495
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l495
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l495
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l495
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l495
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l495
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l495
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l495
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l495
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l495
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l495
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l495
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l495
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l495
									}
									position++
								}
							}

							goto l494
						l495:
							position, tokenIndex = position495, tokenIndex495
						}
						if !matchDot() {
							goto l494
						}
						goto l493
					l494:
						position, tokenIndex = position494, tokenIndex494
					}
					add(rulePegText, position490)
				}
				if !_rules[rulesp]() {
					goto l488
				}
				add(ruleidentifier, position489)
			}
			return true
		l488:
			position, tokenIndex = position488, tokenIndex488
			return false
		},
		/* 34 sub <- <(open e0 close)> */
		nil,
		/* 35 add <- <(('+' / '＋') sp)> */
		func() bool {
			position498, tokenIndex498 := position, tokenIndex
			{
				position499 := position
				{
					position500, tokenIndex500 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l501
					}
					position++
					goto l500
				l501:
					position, tokenIndex = position500, tokenIndex500
					if buffer[position] != rune('＋') {
						goto l498
					}
					position++
				}
			l500:
				if !_rules[rulesp]() {
					goto l498
				}
				add(ruleadd, position499)
			}
			return true
		l498:
			position, tokenIndex = position498, tokenIndex498
			return false
		},
		/* 36 minus <- <(('-' / '－') sp)> */
		func() bool {
			position502, tokenIndex502 := position, tokenIndex
			{
				position503 := position
				{
					position504, tokenIndex504 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l505
					}
					position++
					goto l504
				l505:
					position, tokenIndex = position504, tokenIndex504
					if buffer[position] != rune('－') {
						goto l502
					}
					position++
				}
			l504:
				if !_rules[rulesp]() {
					goto l502
				}
				add(ruleminus, position503)
			}
			return true
		l502:
			position, tokenIndex = position502, tokenIndex502
			return false
		},
		/* 37 multiply <- <(('*' / '＊') sp)> */
		nil,
		/* 38 divide <- <(('/' / '／') sp)> */
		nil,
		/* 39 modulus <- <('%' sp)> */
		nil,
		/* 40 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 41 open <- <('(' sp)> */
		nil,
		/* 42 close <- <(')' sp)> */
		nil,
		/* 43 bitwiseOr <- <('|' sp)> */
		nil,
		/* 44 logicOr <- <('|' '|' sp)> */
		nil,
		/* 45 bitwiseAnd <- <(('&' / ('&' 'a' 'm' 'p' ';')) sp)> */
		nil,
		/* 46 logicAnd <- <((('&' '&') / ('&' 'a' 'm' 'p' ';' '&' 'a' 'm' 'p' ';')) sp)> */
		nil,
		/* 47 sp <- <((&('/') ('/' '/' (!'\n' .)*)) | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position517 := position
			l518:
				{
					position519, tokenIndex519 := position, tokenIndex
					{
						switch buffer[position] {
						case '/':
							if buffer[position] != rune('/') {
								goto l519
							}
							position++
							if buffer[position] != rune('/') {
								goto l519
							}
							position++
						l521:
							{
								position522, tokenIndex522 := position, tokenIndex
								{
									position523, tokenIndex523 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l523
									}
									position++
									goto l522
								l523:
									position, tokenIndex = position523, tokenIndex523
								}
								if !matchDot() {
									goto l522
								}
								goto l521
							l522:
								position, tokenIndex = position522, tokenIndex522
							}
						case '\r':
							if buffer[position] != rune('\r') {
								goto l519
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l519
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l519
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l519
							}
							position++
						}
					}

					goto l518
				l519:
					position, tokenIndex = position519, tokenIndex519
				}
				add(rulesp, position517)
			}
			return true
		},
		/* 48 lt <- <(('<' / '＜') sp)> */
		nil,
		/* 49 gt <- <(('>' / '＞') sp)> */
		nil,
		/* 50 le <- <((('<' '=') / ('＜' '＝')) sp)> */
		nil,
		/* 51 ge <- <((('>' '=') / ('＞' '＝')) sp)> */
		nil,
		/* 52 eq <- <((('=' '=') / ('＝' '＝')) sp)> */
		nil,
		/* 53 ne <- <((('!' '=') / ('！' '＝')) sp)> */
		nil,
		/* 54 strPart <- <(<(escape / (!((&('\\') '\\') | (&('`') '`') | (&('{') '{')) .))+> Action81)> */
		nil,
		/* 55 strPart1 <- <(<(escape / (!((&('\\') '\\') | (&('\x1e') '\x1e') | (&('{') '{')) .))+> Action82)> */
		nil,
		/* 56 strPart2 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('"') '"')) .))+> Action83)> */
		nil,
		/* 57 strPart3 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('\'') '\'')) .))+> Action84)> */
		nil,
		/* 58 fstring <- <(((&('\'') ('\'' Action95 <strPart3*> '\'' Action96)) | (&('"') ('"' Action93 <strPart2*> '"' Action94)) | (&('\x1e') ('\x1e' Action89 <(('{' sp e Action90 '}') / ('{' '%' sp e Action91 ('%' '}')) / strPart1)*> '\x1e' Action92)) | (&('`') ('`' Action85 <(('{' sp e Action86 '}') / ('{' '{' sp e Action87 ('}' '}')) / strPart)*> '`' Action88))) sp)> */
		nil,
		/* 59 escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		func() bool {
			position535, tokenIndex535 := position, tokenIndex
			{
				position536 := position
				if buffer[position] != rune('\\') {
					goto l535
				}
				position++
				{
					switch buffer[position] {
					case '\\':
						if buffer[position] != rune('\\') {
							goto l535
						}
						position++
					case '\'':
						if buffer[position] != rune('\'') {
							goto l535
						}
						position++
					case '"':
						if buffer[position] != rune('"') {
							goto l535
						}
						position++
					case 'r':
						if buffer[position] != rune('r') {
							goto l535
						}
						position++
					case 'f':
						if buffer[position] != rune('f') {
							goto l535
						}
						position++
					case 'n':
						if buffer[position] != rune('n') {
							goto l535
						}
						position++
					case 't':
						if buffer[position] != rune('t') {
							goto l535
						}
						position++
					default:
						if buffer[position] != rune('b') {
							goto l535
						}
						position++
					}
				}

				add(ruleescape, position536)
			}
			return true
		l535:
			position, tokenIndex = position535, tokenIndex535
			return false
		},
		/* 60 st_expr <- <(st_modify_multi_1 / st_assign_multi / st_modify_multi_2)> */
		nil,
		/* 61 est <- <((&'(' e0) / (!{p.flags.DisableBitwiseOp = true} !{p.flags.DisableNumDice = true} !{p.flags.DisableCrossDice = true} !{p.flags.DisableDicePool = true} e0 !{p.flags.DisableBitwiseOp = false} !{p.flags.DisableNumDice = false} !{p.flags.DisableCrossDice = false} !{p.flags.DisableDicePool = false}))> */
		func() bool {
			position539, tokenIndex539 := position, tokenIndex
			{
				position540 := position
				{
					position541, tokenIndex541 := position, tokenIndex
					{
						position543, tokenIndex543 := position, tokenIndex
						if buffer[position] != rune('(') {
							goto l542
						}
						position++
						position, tokenIndex = position543, tokenIndex543
					}
					if !_rules[rulee0]() {
						goto l542
					}
					goto l541
				l542:
					position, tokenIndex = position541, tokenIndex541
					p.flags.DisableBitwiseOp = true
					p.flags.DisableNumDice = true
					p.flags.DisableCrossDice = true
					p.flags.DisableDicePool = true
					if !_rules[rulee0]() {
						goto l539
					}
					p.flags.DisableBitwiseOp = false
					p.flags.DisableNumDice = false
					p.flags.DisableCrossDice = false
					p.flags.DisableDicePool = false
				}
			l541:
				add(ruleest, position540)
			}
			return true
		l539:
			position, tokenIndex = position539, tokenIndex539
			return false
		},
		/* 62 st_assign_multi <- <(st_assign sp ','? sp)+> */
		nil,
		/* 63 st_assign <- <((st_name2 sp (':' / '=') sp est Action97) / (st_name1 est Action98) / (st_name2r sp (':' / '=') sp est Action99) / (st_name1r est Action100) / ('&' st_name2 sp (':' / '=') sp Action101 <est> Action102) / ('&' st_name2r sp (':' / '=') sp Action103 <est> Action104))> */
		nil,
		/* 64 st_modify_multi_1 <- <(((st_name2 st_modify_rest1) / (st_name2r st_modify_rest1) / (st_name1 st_modify_rest) / (st_name1r st_modify_rest)) sp ','? sp st_modify_multi_rest)> */
		nil,
		/* 65 st_modify_rest1 <- <(sp (('+' '=' sp <e0> Action105) / ('-' '=' sp <e0> Action106)))> */
		func() bool {
			position547, tokenIndex547 := position, tokenIndex
			{
				position548 := position
				if !_rules[rulesp]() {
					goto l547
				}
				{
					position549, tokenIndex549 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l550
					}
					position++
					if buffer[position] != rune('=') {
						goto l550
					}
					position++
					if !_rules[rulesp]() {
						goto l550
					}
					{
						position551 := position
						if !_rules[rulee0]() {
							goto l550
						}
						add(rulePegText, position551)
					}
					{
						add(ruleAction105, position)
					}
					goto l549
				l550:
					position, tokenIndex = position549, tokenIndex549
					if buffer[position] != rune('-') {
						goto l547
					}
					position++
					if buffer[position] != rune('=') {
						goto l547
					}
					position++
					if !_rules[rulesp]() {
						goto l547
					}
					{
						position553 := position
						if !_rules[rulee0]() {
							goto l547
						}
						add(rulePegText, position553)
					}
					{
						add(ruleAction106, position)
					}
				}
			l549:
				add(rulest_modify_rest1, position548)
			}
			return true
		l547:
			position, tokenIndex = position547, tokenIndex547
			return false
		},
		/* 66 st_modify_multi_2 <- <(st_modify2 sp ','? sp st_modify_multi_rest)> */
		nil,
		/* 67 st_modify_multi_rest <- <(st_modify2 sp ','? sp)*> */
		func() bool {
			{
				position557 := position
			l558:
				{
					position559, tokenIndex559 := position, tokenIndex
					if !_rules[rulest_modify2]() {
						goto l559
					}
					if !_rules[rulesp]() {
						goto l559
					}
					{
						position560, tokenIndex560 := position, tokenIndex
						if buffer[position] != rune(',') {
							goto l560
						}
						position++
						goto l561
					l560:
						position, tokenIndex = position560, tokenIndex560
					}
				l561:
					if !_rules[rulesp]() {
						goto l559
					}
					goto l558
				l559:
					position, tokenIndex = position559, tokenIndex559
				}
				add(rulest_modify_multi_rest, position557)
			}
			return true
		},
		/* 68 st_modify2 <- <((st_name2 st_modify_rest) / (st_name2r st_modify_rest))> */
		func() bool {
			position562, tokenIndex562 := position, tokenIndex
			{
				position563 := position
				{
					position564, tokenIndex564 := position, tokenIndex
					if !_rules[rulest_name2]() {
						goto l565
					}
					if !_rules[rulest_modify_rest]() {
						goto l565
					}
					goto l564
				l565:
					position, tokenIndex = position564, tokenIndex564
					if !_rules[rulest_name2r]() {
						goto l562
					}
					if !_rules[rulest_modify_rest]() {
						goto l562
					}
				}
			l564:
				add(rulest_modify2, position563)
			}
			return true
		l562:
			position, tokenIndex = position562, tokenIndex562
			return false
		},
		/* 69 st_modify_rest <- <(sp (('+' '='? sp <e0> Action107) / (&'-' sp <e0> Action108) / ('-' '='? sp <e0> Action109)))> */
		func() bool {
			position566, tokenIndex566 := position, tokenIndex
			{
				position567 := position
				if !_rules[rulesp]() {
					goto l566
				}
				{
					position568, tokenIndex568 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l569
					}
					position++
					{
						position570, tokenIndex570 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l570
						}
						position++
						goto l571
					l570:
						position, tokenIndex = position570, tokenIndex570
					}
				l571:
					if !_rules[rulesp]() {
						goto l569
					}
					{
						position572 := position
						if !_rules[rulee0]() {
							goto l569
						}
						add(rulePegText, position572)
					}
					{
						add(ruleAction107, position)
					}
					goto l568
				l569:
					position, tokenIndex = position568, tokenIndex568
					{
						position575, tokenIndex575 := position, tokenIndex
						if buffer[position] != rune('-') {
							goto l574
						}
						position++
						position, tokenIndex = position575, tokenIndex575
					}
					if !_rules[rulesp]() {
						goto l574
					}
					{
						position576 := position
						if !_rules[rulee0]() {
							goto l574
						}
						add(rulePegText, position576)
					}
					{
						add(ruleAction108, position)
					}
					goto l568
				l574:
					position, tokenIndex = position568, tokenIndex568
					if buffer[position] != rune('-') {
						goto l566
					}
					position++
					{
						position578, tokenIndex578 := position, tokenIndex
						if buffer[position] != rune('=') {
							goto l578
						}
						position++
						goto l579
					l578:
						position, tokenIndex = position578, tokenIndex578
					}
				l579:
					if !_rules[rulesp]() {
						goto l566
					}
					{
						position580 := position
						if !_rules[rulee0]() {
							goto l566
						}
						add(rulePegText, position580)
					}
					{
						add(ruleAction109, position)
					}
				}
			l568:
				add(rulest_modify_rest, position567)
			}
			return true
		l566:
			position, tokenIndex = position566, tokenIndex566
			return false
		},
		/* 70 st_name1 <- <(<(id_ch0+ ':' id_ch0+)> Action110)> */
		func() bool {
			position582, tokenIndex582 := position, tokenIndex
			{
				position583 := position
				{
					position584 := position
					if !_rules[ruleid_ch0]() {
						goto l582
					}
				l585:
					{
						position586, tokenIndex586 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l586
						}
						goto l585
					l586:
						position, tokenIndex = position586, tokenIndex586
					}
					if buffer[position] != rune(':') {
						goto l582
					}
					position++
					if !_rules[ruleid_ch0]() {
						goto l582
					}
				l587:
					{
						position588, tokenIndex588 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l588
						}
						goto l587
					l588:
						position, tokenIndex = position588, tokenIndex588
					}
					add(rulePegText, position584)
				}
				{
					add(ruleAction110, position)
				}
				add(rulest_name1, position583)
			}
			return true
		l582:
			position, tokenIndex = position582, tokenIndex582
			return false
		},
		/* 71 st_name1r <- <(<id_ch0+> Action111)> */
		func() bool {
			position590, tokenIndex590 := position, tokenIndex
			{
				position591 := position
				{
					position592 := position
					if !_rules[ruleid_ch0]() {
						goto l590
					}
				l593:
					{
						position594, tokenIndex594 := position, tokenIndex
						if !_rules[ruleid_ch0]() {
							goto l594
						}
						goto l593
					l594:
						position, tokenIndex = position594, tokenIndex594
					}
					add(rulePegText, position592)
				}
				{
					add(ruleAction111, position)
				}
				add(rulest_name1r, position591)
			}
			return true
		l590:
			position, tokenIndex = position590, tokenIndex590
			return false
		},
		/* 72 st_name2 <- <(<(id_ch0 id_ch* (':' id_ch+))> Action112)> */
		func() bool {
			position596, tokenIndex596 := position, tokenIndex
			{
				position597 := position
				{
					position598 := position
					if !_rules[ruleid_ch0]() {
						goto l596
					}
				l599:
					{
						position600, tokenIndex600 := position, tokenIndex
						if !_rules[ruleid_ch]() {
							goto l600
						}
						goto l599
					l600:
						position, tokenIndex = position600, tokenIndex600
					}
					if buffer[position] != rune(':') {
						goto l596
					}
					position++
					if !_rules[ruleid_ch]() {
						goto l596
					}
				l601:
					{
						position602, tokenIndex602 := position, tokenIndex
						if !_rules[ruleid_ch]() {
							goto l602
						}
						goto l601
					l602:
						position, tokenIndex = position602, tokenIndex602
					}
					add(rulePegText, position598)
				}
				{
					add(ruleAction112, position)
				}
				add(rulest_name2, position597)
			}
			return true
		l596:
			position, tokenIndex = position596, tokenIndex596
			return false
		},
		/* 73 st_name2r <- <((<(id_ch0 id_ch*)> Action113) / ('\'' <(id_ch0 / ((&(':') ':') | (&(' ') ' ') | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])))+> '\'' Action114))> */
		func() bool {
			position604, tokenIndex604 := position, tokenIndex
			{
				position605 := position
				{
					position606, tokenIndex606 := position, tokenIndex
					{
						position608 := position
						if !_rules[ruleid_ch0]() {
							goto l607
						}
					l609:
						{
							position610, tokenIndex610 := position, tokenIndex
							if !_rules[ruleid_ch]() {
								goto l610
							}
							goto l609
						l610:
							position, tokenIndex = position610, tokenIndex610
						}
						add(rulePegText, position608)
					}
					{
						add(ruleAction113, position)
					}
					goto l606
				l607:
					position, tokenIndex = position606, tokenIndex606
					if buffer[position] != rune('\'') {
						goto l604
					}
					position++
					{
						position612 := position
						{
							position615, tokenIndex615 := position, tokenIndex
							if !_rules[ruleid_ch0]() {
								goto l616
							}
							goto l615
						l616:
							position, tokenIndex = position615, tokenIndex615
							{
								switch buffer[position] {
								case ':':
									if buffer[position] != rune(':') {
										goto l604
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l604
									}
									position++
								default:
									if c := buffer[position]; c < rune('0') || c > rune('9') {
										goto l604
									}
									position++
								}
							}

						}
					l615:
					l613:
						{
							position614, tokenIndex614 := position, tokenIndex
							{
								position618, tokenIndex618 := position, tokenIndex
								if !_rules[ruleid_ch0]() {
									goto l619
								}
								goto l618
							l619:
								position, tokenIndex = position618, tokenIndex618
								{
									switch buffer[position] {
									case ':':
										if buffer[position] != rune(':') {
											goto l614
										}
										position++
									case ' ':
										if buffer[position] != rune(' ') {
											goto l614
										}
										position++
									default:
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l614
										}
										position++
									}
								}

							}
						l618:
							goto l613
						l614:
							position, tokenIndex = position614, tokenIndex614
						}
						add(rulePegText, position612)
					}
					if buffer[position] != rune('\'') {
						goto l604
					}
					position++
					{
						add(ruleAction114, position)
					}
				}
			l606:
				add(rulest_name2r, position605)
			}
			return true
		l604:
			position, tokenIndex = position604, tokenIndex604
			return false
		},
		/* 74 id_ch0 <- <(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) .)> */
		func() bool {
			position622, tokenIndex622 := position, tokenIndex
			{
				position623 := position
				{
					position624, tokenIndex624 := position, tokenIndex
					{
						switch buffer[position] {
						case '\x1e':
							if buffer[position] != rune('\x1e') {
								goto l624
							}
							position++
						case '\r':
							if buffer[position] != rune('\r') {
								goto l624
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l624
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l624
							}
							position++
						case ' ':
							if buffer[position] != rune(' ') {
								goto l624
							}
							position++
						case '~':
							if buffer[position] != rune('~') {
								goto l624
							}
							position++
						case '}':
							if buffer[position] != rune('}') {
								goto l624
							}
							position++
						case '|':
							if buffer[position] != rune('|') {
								goto l624
							}
							position++
						case '{':
							if buffer[position] != rune('{') {
								goto l624
							}
							position++
						case '`':
							if buffer[position] != rune('`') {
								goto l624
							}
							position++
						case '^':
							if buffer[position] != rune('^') {
								goto l624
							}
							position++
						case ']':
							if buffer[position] != rune(']') {
								goto l624
							}
							position++
						case '\\':
							if buffer[position] != rune('\\') {
								goto l624
							}
							position++
						case '[':
							if buffer[position] != rune('[') {
								goto l624
							}
							position++
						case '@':
							if buffer[position] != rune('@') {
								goto l624
							}
							position++
						case '?':
							if buffer[position] != rune('?') {
								goto l624
							}
							position++
						case '>':
							if buffer[position] != rune('>') {
								goto l624
							}
							position++
						case '=':
							if buffer[position] != rune('=') {
								goto l624
							}
							position++
						case '<':
							if buffer[position] != rune('<') {
								goto l624
							}
							position++
						case ';':
							if buffer[position] != rune(';') {
								goto l624
							}
							position++
						case ':':
							if buffer[position] != rune(':') {
								goto l624
							}
							position++
						case '+':
							if buffer[position] != rune('+') {
								goto l624
							}
							position++
						case '*':
							if buffer[position] != rune('*') {
								goto l624
							}
							position++
						case ')':
							if buffer[position] != rune(')') {
								goto l624
							}
							position++
						case '(':
							if buffer[position] != rune('(') {
								goto l624
							}
							position++
						case '\'':
							if buffer[position] != rune('\'') {
								goto l624
							}
							position++
						case '&':
							if buffer[position] != rune('&') {
								goto l624
							}
							position++
						case '%':
							if buffer[position] != rune('%') {
								goto l624
							}
							position++
						case '$':
							if buffer[position] != rune('$') {
								goto l624
							}
							position++
						case '#':
							if buffer[position] != rune('#') {
								goto l624
							}
							position++
						case '"':
							if buffer[position] != rune('"') {
								goto l624
							}
							position++
						case '!':
							if buffer[position] != rune('!') {
								goto l624
							}
							position++
						case ',', '-', '.':
							if c := buffer[position]; c < rune(',') || c > rune('.') {
								goto l624
							}
							position++
						default:
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l624
							}
							position++
						}
					}

					goto l622
				l624:
					position, tokenIndex = position624, tokenIndex624
				}
				if !matchDot() {
					goto l622
				}
				add(ruleid_ch0, position623)
			}
			return true
		l622:
			position, tokenIndex = position622, tokenIndex622
			return false
		},
		/* 75 id_ch <- <id_ch0> */
		func() bool {
			position626, tokenIndex626 := position, tokenIndex
			{
				position627 := position
				if !_rules[ruleid_ch0]() {
					goto l626
				}
				add(ruleid_ch, position627)
			}
			return true
		l626:
			position, tokenIndex = position626, tokenIndex626
			return false
		},
		/* 77 Action0 <- <{ p.AddOperator(TypeHalt) }> */
		nil,
		/* 78 Action1 <- <{ p.AddOperator(TypeClearDetail) }> */
		nil,
		/* 79 Action2 <- <{ p.AddValueStr(string(text)) }> */
		nil,
		/* 80 Action3 <- <{ p.AddStore() }> */
		nil,
		/* 81 Action4 <- <{p.AddOperator(TypePop)}> */
		nil,
		/* 82 Action5 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 83 Action6 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset(); }> */
		nil,
		/* 84 Action7 <- <{ p.PopAndSetOffset() }> */
		nil,
		/* 85 Action8 <- <{ p.AddValueStr(""); }> */
		nil,
		/* 86 Action9 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 87 Action10 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset(); }> */
		nil,
		/* 88 Action11 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 89 Action12 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset() }> */
		nil,
		/* 90 Action13 <- <{ p.PopAndSetOffset() }> */
		nil,
		/* 91 Action14 <- <{ p.CounterPush() }> */
		nil,
		/* 92 Action15 <- <{p.CounterAdd(1)}> */
		nil,
		/* 93 Action16 <- <{ p.AddValueStr(""); limit:=p.CounterPop()+1; for i:=int64(0); i<limit; i++ { p.PopAndSetOffset() } }> */
		nil,
		/* 94 Action17 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 95 Action18 <- <{ p.AddOperator(TypeBitwiseOr) }> */
		nil,
		/* 96 Action19 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 97 Action20 <- <{ p.AddOperator(TypeBitwiseAnd) }> */
		nil,
		/* 98 Action21 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 99 Action22 <- <{ p.AddOperator(TypeCompLT) }> */
		nil,
		/* 100 Action23 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 101 Action24 <- <{ p.AddOperator(TypeCompLE) }> */
		nil,
		/* 102 Action25 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 103 Action26 <- <{ p.AddOperator(TypeCompEQ) }> */
		nil,
		/* 104 Action27 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 105 Action28 <- <{ p.AddOperator(TypeCompNE) }> */
		nil,
		/* 106 Action29 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 107 Action30 <- <{ p.AddOperator(TypeCompGE) }> */
		nil,
		/* 108 Action31 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 109 Action32 <- <{ p.AddOperator(TypeCompGT) }> */
		nil,
		/* 110 Action33 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 111 Action34 <- <{ p.AddOperator(TypeAdd) }> */
		nil,
		/* 112 Action35 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 113 Action36 <- <{ p.AddOperator(TypeSubtract) }> */
		nil,
		/* 114 Action37 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 115 Action38 <- <{ p.AddOperator(TypeMultiply) }> */
		nil,
		/* 116 Action39 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 117 Action40 <- <{ p.AddOperator(TypeDivide) }> */
		nil,
		/* 118 Action41 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 119 Action42 <- <{ p.AddOperator(TypeModulus) }> */
		nil,
		/* 120 Action43 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 121 Action44 <- <{ p.AddOperator(TypeExponentiation) }> */
		nil,
		/* 122 Action45 <- <{ p.AddOperator(TypeNegation) }> */
		nil,
		/* 123 Action46 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetK)}> */
		nil,
		/* 124 Action47 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetQ)}> */
		nil,
		/* 125 Action48 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 126 Action49 <- <{ p.AddOperator(TypeDiceSetQ) }> */
		nil,
		/* 127 Action50 <- <{ p.AddOperatorWithInt64(TypeDiceSetK, 1) }> */
		nil,
		/* 128 Action51 <- <{ p.AddOperatorWithInt64(TypeDiceSetQ, 1) }> */
		nil,
		/* 129 Action52 <- <{ p.AddOperator(TypeWodSetInit) }> */
		nil,
		/* 130 Action53 <- <{ p.AddOperator(TypeWodSetPool) }> */
		nil,
		/* 131 Action54 <- <{ p.AddOperator(TypeDCSetInit) }> */
		nil,
		/* 132 Action55 <- <{ p.AddOperator(TypeDCSetPool) }> */
		nil,
		/* 133 Action56 <- <{ p.AddValue("2"); p.AddLeftValueMark() }> */
		nil,
		/* 134 Action57 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 135 Action58 <- <{ p.AddValue("1"); p.AddLeftValueMark() }> */
		nil,
		/* 136 Action59 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 137 Action60 <- <{ p.AddValue("2"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 138 Action61 <- <{ p.AddValue("1"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 139 Action62 <- <{ p.AddOperator(TypeWodSetPoints) }> */
		nil,
		/* 140 Action63 <- <{ p.AddOperator(TypeWodSetThreshold) }> */
		nil,
		/* 141 Action64 <- <{ p.AddOperator(TypeWodSetThresholdQ) }> */
		nil,
		/* 142 Action65 <- <{ p.AddOperator(TypeDiceWod) }> */
		nil,
		/* 143 Action66 <- <{ p.AddOperator(TypeDCSetPoints) }> */
		nil,
		/* 144 Action67 <- <{ p.AddOperator(TypeDiceDC) }> */
		nil,
		/* 145 Action68 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 146 Action69 <- <{p.AddValue("0");}> */
		nil,
		/* 147 Action70 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 148 Action71 <- <{ p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 149 Action72 <- <{ p.AddValue("1"); p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 150 Action73 <- <{ p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 151 Action74 <- <{ p.AddValue("1"); p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 152 Action75 <- <{ p.AddValue("0"); p.AddValue("0"); p.AddOperator(TypeDiceFate) }> */
		nil,
		/* 153 Action76 <- <{ p.AddLoadVarnameForThis(text) }> */
		nil,
		/* 154 Action77 <- <{ p.WriteCode(TypeConvertInt, 0, "") }> */
		nil,
		/* 155 Action78 <- <{ p.WriteCode(TypeConvertStr, 0, "") }> */
		nil,
		/* 156 Action79 <- <{ p.AddLoadVarname(string(text)) }> */
		nil,
		nil,
		/* 158 Action80 <- <{ p.AddValue(string(text)) }> */
		nil,
		/* 159 Action81 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 160 Action82 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 161 Action83 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 162 Action84 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 163 Action85 <- <{ p.CounterPush() }> */
		nil,
		/* 164 Action86 <- <{p.CounterAdd(1)}> */
		nil,
		/* 165 Action87 <- <{p.CounterAdd(1)}> */
		nil,
		/* 166 Action88 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 167 Action89 <- <{ p.CounterPush() }> */
		nil,
		/* 168 Action90 <- <{p.CounterAdd(1)}> */
		nil,
		/* 169 Action91 <- <{p.CounterAdd(1)}> */
		nil,
		/* 170 Action92 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 171 Action93 <- <{ p.CounterPush() }> */
		nil,
		/* 172 Action94 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 173 Action95 <- <{ p.CounterPush() }> */
		nil,
		/* 174 Action96 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 175 Action97 <- <{ p.AddStName() }> */
		nil,
		/* 176 Action98 <- <{ p.AddStName() }> */
		nil,
		/* 177 Action99 <- <{ p.AddStName() }> */
		nil,
		/* 178 Action100 <- <{ p.AddStName() }> */
		nil,
		/* 179 Action101 <- <{ p.CodePush() }> */
		nil,
		/* 180 Action102 <- <{ p.CodePop(); p.AddStoreComputed(text); p.AddStName() }> */
		nil,
		/* 181 Action103 <- <{ p.CodePush() }> */
		nil,
		/* 182 Action104 <- <{ p.CodePop(); p.AddStoreComputed(text); p.AddStName() }> */
		nil,
		/* 183 Action105 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 184 Action106 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 185 Action107 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 186 Action108 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 187 Action109 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 188 Action110 <- <{ p.AddValueStr(text) }> */
		nil,
		/* 189 Action111 <- <{ p.AddValueStr(text) }> */
		nil,
		/* 190 Action112 <- <{ p.AddValueStr(text) }> */
		nil,
		/* 191 Action113 <- <{ p.AddValueStr(text) }> */
		nil,
		/* 192 Action114 <- <{ p.AddValueStr(text) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
