package dice

// Code generated by peg -switch -inline dice/roll.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleeBase
	rulee
	ruleeOne
	ruleassign_expr
	rules0
	ruleblock
	rulestmtElse
	rulestmtIf
	rulee0
	ruleeSimpleSwitch
	ruleeTernary
	ruleeBitwise
	ruleeComp
	rulee1
	rulee2
	rulee3
	rulee4
	rulee5
	ruledndDiceSuffix
	rulekqDiceOp
	rule_dnumber
	rulesimpleDice2
	rulewodDicePool
	ruledoubleCrossDicePool
	ruleeDice
	rulelaNumberOrLeftParen
	ruleeDice2
	ruleeDice3
	ruleeDice4
	rulevalue
	rulenumber
	ruleidentifier
	rulesub
	ruleadd
	ruleminus
	rulemultiply
	ruledivide
	rulemodulus
	ruleexponentiation
	ruleopen
	ruleclose
	rulebitwiseOr
	rulelogicOr
	rulebitwiseAnd
	rulelogicAnd
	rulesp
	rulelt
	rulegt
	rulele
	rulege
	ruleeq
	rulene
	rulestrPart
	rulestrPart1
	rulestrPart2
	rulestrPart3
	rulefstring
	ruleescape
	rulest_expr
	ruleest
	rulest_assign_multi
	rulest_assign
	rulest_modify_multi
	rulest_modify
	rulest_name1
	rulest_name2
	ruleid_ch0
	ruleid_ch
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
	ruleAction10
	ruleAction11
	ruleAction12
	ruleAction13
	ruleAction14
	ruleAction15
	ruleAction16
	ruleAction17
	ruleAction18
	ruleAction19
	ruleAction20
	ruleAction21
	ruleAction22
	ruleAction23
	ruleAction24
	ruleAction25
	ruleAction26
	ruleAction27
	ruleAction28
	ruleAction29
	ruleAction30
	ruleAction31
	ruleAction32
	ruleAction33
	ruleAction34
	ruleAction35
	ruleAction36
	ruleAction37
	ruleAction38
	ruleAction39
	ruleAction40
	ruleAction41
	ruleAction42
	ruleAction43
	ruleAction44
	ruleAction45
	ruleAction46
	ruleAction47
	ruleAction48
	ruleAction49
	ruleAction50
	ruleAction51
	ruleAction52
	ruleAction53
	ruleAction54
	ruleAction55
	ruleAction56
	ruleAction57
	ruleAction58
	ruleAction59
	ruleAction60
	ruleAction61
	ruleAction62
	ruleAction63
	ruleAction64
	ruleAction65
	ruleAction66
	ruleAction67
	ruleAction68
	ruleAction69
	ruleAction70
	ruleAction71
	ruleAction72
	ruleAction73
	ruleAction74
	ruleAction75
	ruleAction76
	ruleAction77
	ruleAction78
	rulePegText
	ruleAction79
	ruleAction80
	ruleAction81
	ruleAction82
	ruleAction83
	ruleAction84
	ruleAction85
	ruleAction86
	ruleAction87
	ruleAction88
	ruleAction89
	ruleAction90
	ruleAction91
	ruleAction92
	ruleAction93
	ruleAction94
	ruleAction95
	ruleAction96
	ruleAction97
	ruleAction98
	ruleAction99
	ruleAction100
	ruleAction101
	ruleAction102
	ruleAction103
)

var rul3s = [...]string{
	"Unknown",
	"eBase",
	"e",
	"eOne",
	"assign_expr",
	"s0",
	"block",
	"stmtElse",
	"stmtIf",
	"e0",
	"eSimpleSwitch",
	"eTernary",
	"eBitwise",
	"eComp",
	"e1",
	"e2",
	"e3",
	"e4",
	"e5",
	"dndDiceSuffix",
	"kqDiceOp",
	"_dnumber",
	"simpleDice2",
	"wodDicePool",
	"doubleCrossDicePool",
	"eDice",
	"laNumberOrLeftParen",
	"eDice2",
	"eDice3",
	"eDice4",
	"value",
	"number",
	"identifier",
	"sub",
	"add",
	"minus",
	"multiply",
	"divide",
	"modulus",
	"exponentiation",
	"open",
	"close",
	"bitwiseOr",
	"logicOr",
	"bitwiseAnd",
	"logicAnd",
	"sp",
	"lt",
	"gt",
	"le",
	"ge",
	"eq",
	"ne",
	"strPart",
	"strPart1",
	"strPart2",
	"strPart3",
	"fstring",
	"escape",
	"st_expr",
	"est",
	"st_assign_multi",
	"st_assign",
	"st_modify_multi",
	"st_modify",
	"st_name1",
	"st_name2",
	"id_ch0",
	"id_ch",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
	"Action10",
	"Action11",
	"Action12",
	"Action13",
	"Action14",
	"Action15",
	"Action16",
	"Action17",
	"Action18",
	"Action19",
	"Action20",
	"Action21",
	"Action22",
	"Action23",
	"Action24",
	"Action25",
	"Action26",
	"Action27",
	"Action28",
	"Action29",
	"Action30",
	"Action31",
	"Action32",
	"Action33",
	"Action34",
	"Action35",
	"Action36",
	"Action37",
	"Action38",
	"Action39",
	"Action40",
	"Action41",
	"Action42",
	"Action43",
	"Action44",
	"Action45",
	"Action46",
	"Action47",
	"Action48",
	"Action49",
	"Action50",
	"Action51",
	"Action52",
	"Action53",
	"Action54",
	"Action55",
	"Action56",
	"Action57",
	"Action58",
	"Action59",
	"Action60",
	"Action61",
	"Action62",
	"Action63",
	"Action64",
	"Action65",
	"Action66",
	"Action67",
	"Action68",
	"Action69",
	"Action70",
	"Action71",
	"Action72",
	"Action73",
	"Action74",
	"Action75",
	"Action76",
	"Action77",
	"Action78",
	"PegText",
	"Action79",
	"Action80",
	"Action81",
	"Action82",
	"Action83",
	"Action84",
	"Action85",
	"Action86",
	"Action87",
	"Action88",
	"Action89",
	"Action90",
	"Action91",
	"Action92",
	"Action93",
	"Action94",
	"Action95",
	"Action96",
	"Action97",
	"Action98",
	"Action99",
	"Action100",
	"Action101",
	"Action102",
	"Action103",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type DiceRollParser struct {
	RollExpression

	Buffer string
	buffer []rune
	rules  [174]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *DiceRollParser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *DiceRollParser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *DiceRollParser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *DiceRollParser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *DiceRollParser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *DiceRollParser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *DiceRollParser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:
			p.AddOperator(TypeHalt)
		case ruleAction1:
			p.AddOperator(TypeClearDetail)
		case ruleAction2:
			p.AddValueStr(string(text))
		case ruleAction3:
			p.AddStore()
		case ruleAction4:
			p.AddOperator(TypePop)
		case ruleAction5:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction6:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction7:
			p.PopAndSetOffset()
		case ruleAction8:
			p.AddValueStr("")
		case ruleAction9:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction10:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction11:
			p.AddOperator(TypeJne)
			p.PushForOffset()
		case ruleAction12:
			p.AddOperator(TypeJmp)
			p.PopAndSetOffset()
			p.PushForOffset()
		case ruleAction13:
			p.PopAndSetOffset()
		case ruleAction14:
			p.CounterPush()
		case ruleAction15:
			p.CounterAdd(1)
		case ruleAction16:
			p.AddValueStr("")
			limit := p.CounterPop() + 1
			for i := int64(0); i < limit; i++ {
				p.PopAndSetOffset()
			}
		case ruleAction17:
			p.AddLeftValueMark()
		case ruleAction18:
			p.AddOperator(TypeBitwiseOr)
		case ruleAction19:
			p.AddLeftValueMark()
		case ruleAction20:
			p.AddOperator(TypeBitwiseAnd)
		case ruleAction21:
			p.AddLeftValueMark()
		case ruleAction22:
			p.AddOperator(TypeCompLT)
		case ruleAction23:
			p.AddLeftValueMark()
		case ruleAction24:
			p.AddOperator(TypeCompLE)
		case ruleAction25:
			p.AddLeftValueMark()
		case ruleAction26:
			p.AddOperator(TypeCompEQ)
		case ruleAction27:
			p.AddLeftValueMark()
		case ruleAction28:
			p.AddOperator(TypeCompNE)
		case ruleAction29:
			p.AddLeftValueMark()
		case ruleAction30:
			p.AddOperator(TypeCompGE)
		case ruleAction31:
			p.AddLeftValueMark()
		case ruleAction32:
			p.AddOperator(TypeCompGT)
		case ruleAction33:
			p.AddLeftValueMark()
		case ruleAction34:
			p.AddOperator(TypeAdd)
		case ruleAction35:
			p.AddLeftValueMark()
		case ruleAction36:
			p.AddOperator(TypeSubtract)
		case ruleAction37:
			p.AddLeftValueMark()
		case ruleAction38:
			p.AddOperator(TypeMultiply)
		case ruleAction39:
			p.AddLeftValueMark()
		case ruleAction40:
			p.AddOperator(TypeDivide)
		case ruleAction41:
			p.AddLeftValueMark()
		case ruleAction42:
			p.AddOperator(TypeModulus)
		case ruleAction43:
			p.AddLeftValueMark()
		case ruleAction44:
			p.AddOperator(TypeExponentiation)
		case ruleAction45:
			p.AddOperator(TypeNegation)
		case ruleAction46:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetK)
		case ruleAction47:
			p.AddValue("1")
			p.AddOperator(TypeDiceSetQ)
		case ruleAction48:
			p.AddOperator(TypeDiceSetK)
		case ruleAction49:
			p.AddOperator(TypeDiceSetQ)
		case ruleAction50:
			p.AddOperatorWithInt64(TypeDiceSetK, 1)
		case ruleAction51:
			p.AddOperatorWithInt64(TypeDiceSetQ, 1)
		case ruleAction52:
			p.AddOperator(TypeWodSetInit)
		case ruleAction53:
			p.AddOperator(TypeWodSetPool)
		case ruleAction54:
			p.AddOperator(TypeDCSetInit)
		case ruleAction55:
			p.AddOperator(TypeDCSetPool)
		case ruleAction56:
			p.AddValue("2")
			p.AddLeftValueMark()
		case ruleAction57:
			p.AddOperator(TypeDice)
		case ruleAction58:
			p.AddValue("1")
			p.AddLeftValueMark()
		case ruleAction59:
			p.AddOperator(TypeDice)
		case ruleAction60:
			p.AddValue("2")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction61:
			p.AddValue("1")
			p.AddLeftValueMark()
			p.AddValue("0")
			p.AddOperator(TypeDice)
		case ruleAction62:
			p.AddOperator(TypeWodSetPoints)
		case ruleAction63:
			p.AddOperator(TypeWodSetThreshold)
		case ruleAction64:
			p.AddOperator(TypeWodSetThresholdQ)
		case ruleAction65:
			p.AddOperator(TypeDiceWod)
		case ruleAction66:
			p.AddOperator(TypeDCSetPoints)
		case ruleAction67:
			p.AddOperator(TypeDiceDC)
		case ruleAction68:
			p.AddLeftValueMark()
		case ruleAction69:
			p.AddOperator(TypeDice)
		case ruleAction70:
			p.AddOperator(TypeDicePenalty)
		case ruleAction71:
			p.AddValue("1")
			p.AddOperator(TypeDicePenalty)
		case ruleAction72:
			p.AddOperator(TypeDiceBonus)
		case ruleAction73:
			p.AddValue("1")
			p.AddOperator(TypeDiceBonus)
		case ruleAction74:
			p.AddValue("0")
			p.AddValue("0")
			p.AddOperator(TypeDiceFate)
		case ruleAction75:
			p.AddLoadVarnameForThis(text)
		case ruleAction76:
			p.WriteCode(TypeConvertInt, 0, "")
		case ruleAction77:
			p.WriteCode(TypeConvertStr, 0, "")
		case ruleAction78:
			p.AddLoadVarname(string(text))
		case ruleAction79:
			p.AddValue(string(text))
		case ruleAction80:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction81:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction82:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction83:
			p.AddValueStr(string(text))
			p.CounterAdd(1)
		case ruleAction84:
			p.CounterPush()
		case ruleAction85:
			p.CounterAdd(1)
		case ruleAction86:
			p.CounterAdd(1)
		case ruleAction87:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction88:
			p.CounterPush()
		case ruleAction89:
			p.CounterAdd(1)
		case ruleAction90:
			p.CounterAdd(1)
		case ruleAction91:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction92:
			p.CounterPush()
		case ruleAction93:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction94:
			p.CounterPush()
		case ruleAction95:
			p.AddFormatString(string(text), p.CounterPop())
		case ruleAction96:
			p.AddStName()
		case ruleAction97:
			p.AddStName()
		case ruleAction98:
			p.CodePush()
		case ruleAction99:
			p.CodePop()
			p.AddStoreComputed(text)
			p.AddStName()
		case ruleAction100:
			p.AddStModify("+", text)
		case ruleAction101:
			p.AddStModify("-", text)
		case ruleAction102:
			p.AddValueStr(text)
		case ruleAction103:
			p.AddValueStr(text)

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*DiceRollParser) error {
	return func(p *DiceRollParser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *DiceRollParser) Init(options ...func(*DiceRollParser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 eBase <- <(e Action0)> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				if !_rules[rulee]() {
					goto l0
				}
				{
					add(ruleAction0, position)
				}
				add(ruleeBase, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 e <- <(('^' 's' 't' st_expr) / (eOne (';' sp Action1 eOne?)*))> */
		func() bool {
			position3, tokenIndex3 := position, tokenIndex
			{
				position4 := position
				{
					position5, tokenIndex5 := position, tokenIndex
					if buffer[position] != rune('^') {
						goto l6
					}
					position++
					if buffer[position] != rune('s') {
						goto l6
					}
					position++
					if buffer[position] != rune('t') {
						goto l6
					}
					position++
					{
						position7 := position
						{
							position8, tokenIndex8 := position, tokenIndex
							{
								position10 := position
								{
									position13 := position
									if !_rules[rulest_name2]() {
										goto l9
									}
									if !_rules[rulesp]() {
										goto l9
									}
									{
										position14, tokenIndex14 := position, tokenIndex
										if buffer[position] != rune('+') {
											goto l15
										}
										position++
										if !_rules[rulesp]() {
											goto l15
										}
										{
											position16 := position
											if !_rules[rulee0]() {
												goto l15
											}
											add(rulePegText, position16)
										}
										{
											add(ruleAction100, position)
										}
										goto l14
									l15:
										position, tokenIndex = position14, tokenIndex14
										if buffer[position] != rune('-') {
											goto l9
										}
										position++
										if !_rules[rulesp]() {
											goto l9
										}
										{
											position18 := position
											if !_rules[rulee0]() {
												goto l9
											}
											add(rulePegText, position18)
										}
										{
											add(ruleAction101, position)
										}
									}
								l14:
									add(rulest_modify, position13)
								}
								if !_rules[rulesp]() {
									goto l9
								}
								{
									position20, tokenIndex20 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l20
									}
									position++
									goto l21
								l20:
									position, tokenIndex = position20, tokenIndex20
								}
							l21:
								if !_rules[rulesp]() {
									goto l9
								}
							l11:
								{
									position12, tokenIndex12 := position, tokenIndex
									{
										position22 := position
										if !_rules[rulest_name2]() {
											goto l12
										}
										if !_rules[rulesp]() {
											goto l12
										}
										{
											position23, tokenIndex23 := position, tokenIndex
											if buffer[position] != rune('+') {
												goto l24
											}
											position++
											if !_rules[rulesp]() {
												goto l24
											}
											{
												position25 := position
												if !_rules[rulee0]() {
													goto l24
												}
												add(rulePegText, position25)
											}
											{
												add(ruleAction100, position)
											}
											goto l23
										l24:
											position, tokenIndex = position23, tokenIndex23
											if buffer[position] != rune('-') {
												goto l12
											}
											position++
											if !_rules[rulesp]() {
												goto l12
											}
											{
												position27 := position
												if !_rules[rulee0]() {
													goto l12
												}
												add(rulePegText, position27)
											}
											{
												add(ruleAction101, position)
											}
										}
									l23:
										add(rulest_modify, position22)
									}
									if !_rules[rulesp]() {
										goto l12
									}
									{
										position29, tokenIndex29 := position, tokenIndex
										if buffer[position] != rune(',') {
											goto l29
										}
										position++
										goto l30
									l29:
										position, tokenIndex = position29, tokenIndex29
									}
								l30:
									if !_rules[rulesp]() {
										goto l12
									}
									goto l11
								l12:
									position, tokenIndex = position12, tokenIndex12
								}
								add(rulest_modify_multi, position10)
							}
							goto l8
						l9:
							position, tokenIndex = position8, tokenIndex8
							{
								position31 := position
								{
									position34 := position
									{
										position35, tokenIndex35 := position, tokenIndex
										if !_rules[rulest_name2]() {
											goto l36
										}
										if !_rules[rulesp]() {
											goto l36
										}
										{
											position37, tokenIndex37 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l38
											}
											position++
											goto l37
										l38:
											position, tokenIndex = position37, tokenIndex37
											if buffer[position] != rune('=') {
												goto l36
											}
											position++
										}
									l37:
										if !_rules[rulesp]() {
											goto l36
										}
										if !_rules[ruleest]() {
											goto l36
										}
										{
											add(ruleAction96, position)
										}
										goto l35
									l36:
										position, tokenIndex = position35, tokenIndex35
										{
											position41 := position
											{
												position42 := position
												if !_rules[ruleid_ch0]() {
													goto l40
												}
											l43:
												{
													position44, tokenIndex44 := position, tokenIndex
													if !_rules[ruleid_ch0]() {
														goto l44
													}
													goto l43
												l44:
													position, tokenIndex = position44, tokenIndex44
												}
												add(rulePegText, position42)
											}
											{
												add(ruleAction102, position)
											}
											add(rulest_name1, position41)
										}
										if !_rules[rulesp]() {
											goto l40
										}
										if !_rules[ruleest]() {
											goto l40
										}
										{
											add(ruleAction97, position)
										}
										goto l35
									l40:
										position, tokenIndex = position35, tokenIndex35
										if buffer[position] != rune('&') {
											goto l6
										}
										position++
										if !_rules[rulest_name2]() {
											goto l6
										}
										if !_rules[rulesp]() {
											goto l6
										}
										{
											position47, tokenIndex47 := position, tokenIndex
											if buffer[position] != rune(':') {
												goto l48
											}
											position++
											goto l47
										l48:
											position, tokenIndex = position47, tokenIndex47
											if buffer[position] != rune('=') {
												goto l6
											}
											position++
										}
									l47:
										if !_rules[rulesp]() {
											goto l6
										}
										{
											add(ruleAction98, position)
										}
										{
											position50 := position
											if !_rules[ruleest]() {
												goto l6
											}
											add(rulePegText, position50)
										}
										{
											add(ruleAction99, position)
										}
									}
								l35:
									add(rulest_assign, position34)
								}
								if !_rules[rulesp]() {
									goto l6
								}
								{
									position52, tokenIndex52 := position, tokenIndex
									if buffer[position] != rune(',') {
										goto l52
									}
									position++
									goto l53
								l52:
									position, tokenIndex = position52, tokenIndex52
								}
							l53:
								if !_rules[rulesp]() {
									goto l6
								}
							l32:
								{
									position33, tokenIndex33 := position, tokenIndex
									{
										position54 := position
										{
											position55, tokenIndex55 := position, tokenIndex
											if !_rules[rulest_name2]() {
												goto l56
											}
											if !_rules[rulesp]() {
												goto l56
											}
											{
												position57, tokenIndex57 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l58
												}
												position++
												goto l57
											l58:
												position, tokenIndex = position57, tokenIndex57
												if buffer[position] != rune('=') {
													goto l56
												}
												position++
											}
										l57:
											if !_rules[rulesp]() {
												goto l56
											}
											if !_rules[ruleest]() {
												goto l56
											}
											{
												add(ruleAction96, position)
											}
											goto l55
										l56:
											position, tokenIndex = position55, tokenIndex55
											{
												position61 := position
												{
													position62 := position
													if !_rules[ruleid_ch0]() {
														goto l60
													}
												l63:
													{
														position64, tokenIndex64 := position, tokenIndex
														if !_rules[ruleid_ch0]() {
															goto l64
														}
														goto l63
													l64:
														position, tokenIndex = position64, tokenIndex64
													}
													add(rulePegText, position62)
												}
												{
													add(ruleAction102, position)
												}
												add(rulest_name1, position61)
											}
											if !_rules[rulesp]() {
												goto l60
											}
											if !_rules[ruleest]() {
												goto l60
											}
											{
												add(ruleAction97, position)
											}
											goto l55
										l60:
											position, tokenIndex = position55, tokenIndex55
											if buffer[position] != rune('&') {
												goto l33
											}
											position++
											if !_rules[rulest_name2]() {
												goto l33
											}
											if !_rules[rulesp]() {
												goto l33
											}
											{
												position67, tokenIndex67 := position, tokenIndex
												if buffer[position] != rune(':') {
													goto l68
												}
												position++
												goto l67
											l68:
												position, tokenIndex = position67, tokenIndex67
												if buffer[position] != rune('=') {
													goto l33
												}
												position++
											}
										l67:
											if !_rules[rulesp]() {
												goto l33
											}
											{
												add(ruleAction98, position)
											}
											{
												position70 := position
												if !_rules[ruleest]() {
													goto l33
												}
												add(rulePegText, position70)
											}
											{
												add(ruleAction99, position)
											}
										}
									l55:
										add(rulest_assign, position54)
									}
									if !_rules[rulesp]() {
										goto l33
									}
									{
										position72, tokenIndex72 := position, tokenIndex
										if buffer[position] != rune(',') {
											goto l72
										}
										position++
										goto l73
									l72:
										position, tokenIndex = position72, tokenIndex72
									}
								l73:
									if !_rules[rulesp]() {
										goto l33
									}
									goto l32
								l33:
									position, tokenIndex = position33, tokenIndex33
								}
								add(rulest_assign_multi, position31)
							}
						}
					l8:
						add(rulest_expr, position7)
					}
					goto l5
				l6:
					position, tokenIndex = position5, tokenIndex5
					if !_rules[ruleeOne]() {
						goto l3
					}
				l74:
					{
						position75, tokenIndex75 := position, tokenIndex
						if buffer[position] != rune(';') {
							goto l75
						}
						position++
						if !_rules[rulesp]() {
							goto l75
						}
						{
							add(ruleAction1, position)
						}
						{
							position77, tokenIndex77 := position, tokenIndex
							if !_rules[ruleeOne]() {
								goto l77
							}
							goto l78
						l77:
							position, tokenIndex = position77, tokenIndex77
						}
					l78:
						goto l74
					l75:
						position, tokenIndex = position75, tokenIndex75
					}
				}
			l5:
				add(rulee, position4)
			}
			return true
		l3:
			position, tokenIndex = position3, tokenIndex3
			return false
		},
		/* 2 eOne <- <(sp (s0 / e0 / assign_expr))> */
		func() bool {
			position79, tokenIndex79 := position, tokenIndex
			{
				position80 := position
				if !_rules[rulesp]() {
					goto l79
				}
				{
					position81, tokenIndex81 := position, tokenIndex
					{
						position83 := position
						{
							position84 := position
							if buffer[position] != rune('i') {
								goto l82
							}
							position++
							if buffer[position] != rune('f') {
								goto l82
							}
							position++
							if !_rules[rulesp]() {
								goto l82
							}
							if !_rules[rulee0]() {
								goto l82
							}
							{
								add(ruleAction5, position)
							}
							if !_rules[ruleblock]() {
								goto l82
							}
							{
								add(ruleAction6, position)
							}
							{
								position87, tokenIndex87 := position, tokenIndex
								{
									position89 := position
									if buffer[position] != rune('e') {
										goto l87
									}
									position++
									if buffer[position] != rune('l') {
										goto l87
									}
									position++
									if buffer[position] != rune('s') {
										goto l87
									}
									position++
									if buffer[position] != rune('e') {
										goto l87
									}
									position++
									if !_rules[rulesp]() {
										goto l87
									}
									if !_rules[ruleblock]() {
										goto l87
									}
									add(rulestmtElse, position89)
								}
								goto l88
							l87:
								position, tokenIndex = position87, tokenIndex87
							}
						l88:
							{
								add(ruleAction7, position)
							}
							{
								add(ruleAction8, position)
							}
							add(rulestmtIf, position84)
						}
						add(rules0, position83)
					}
					goto l81
				l82:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[rulee0]() {
						goto l92
					}
					goto l81
				l92:
					position, tokenIndex = position81, tokenIndex81
					if !_rules[ruleassign_expr]() {
						goto l79
					}
				}
			l81:
				add(ruleeOne, position80)
			}
			return true
		l79:
			position, tokenIndex = position79, tokenIndex79
			return false
		},
		/* 3 assign_expr <- <(identifier Action2 '=' sp e0 Action3)> */
		func() bool {
			position93, tokenIndex93 := position, tokenIndex
			{
				position94 := position
				if !_rules[ruleidentifier]() {
					goto l93
				}
				{
					add(ruleAction2, position)
				}
				if buffer[position] != rune('=') {
					goto l93
				}
				position++
				if !_rules[rulesp]() {
					goto l93
				}
				if !_rules[rulee0]() {
					goto l93
				}
				{
					add(ruleAction3, position)
				}
				add(ruleassign_expr, position94)
			}
			return true
		l93:
			position, tokenIndex = position93, tokenIndex93
			return false
		},
		/* 4 s0 <- <stmtIf> */
		nil,
		/* 5 block <- <((('{' sp '}') / ('{' sp e Action4 '}')) sp)> */
		func() bool {
			position98, tokenIndex98 := position, tokenIndex
			{
				position99 := position
				{
					position100, tokenIndex100 := position, tokenIndex
					if buffer[position] != rune('{') {
						goto l101
					}
					position++
					if !_rules[rulesp]() {
						goto l101
					}
					if buffer[position] != rune('}') {
						goto l101
					}
					position++
					goto l100
				l101:
					position, tokenIndex = position100, tokenIndex100
					if buffer[position] != rune('{') {
						goto l98
					}
					position++
					if !_rules[rulesp]() {
						goto l98
					}
					if !_rules[rulee]() {
						goto l98
					}
					{
						add(ruleAction4, position)
					}
					if buffer[position] != rune('}') {
						goto l98
					}
					position++
				}
			l100:
				if !_rules[rulesp]() {
					goto l98
				}
				add(ruleblock, position99)
			}
			return true
		l98:
			position, tokenIndex = position98, tokenIndex98
			return false
		},
		/* 6 stmtElse <- <('e' 'l' 's' 'e' sp block)> */
		nil,
		/* 7 stmtIf <- <('i' 'f' sp e0 Action5 block Action6 stmtElse? Action7 Action8)> */
		nil,
		/* 8 e0 <- <eTernary> */
		func() bool {
			position105, tokenIndex105 := position, tokenIndex
			{
				position106 := position
				{
					position107 := position
					{
						position108, tokenIndex108 := position, tokenIndex
						if !_rules[ruleeBitwise]() {
							goto l109
						}
						if buffer[position] != rune('?') {
							goto l109
						}
						position++
						if !_rules[rulesp]() {
							goto l109
						}
						{
							add(ruleAction11, position)
						}
						if !_rules[ruleeBitwise]() {
							goto l109
						}
						if buffer[position] != rune(':') {
							goto l109
						}
						position++
						if !_rules[rulesp]() {
							goto l109
						}
						{
							add(ruleAction12, position)
						}
						if !_rules[ruleeBitwise]() {
							goto l109
						}
						{
							add(ruleAction13, position)
						}
						goto l108
					l109:
						position, tokenIndex = position108, tokenIndex108
						if !_rules[ruleeSimpleSwitch]() {
							goto l113
						}
						{
							add(ruleAction14, position)
						}
					l115:
						{
							position116, tokenIndex116 := position, tokenIndex
							if buffer[position] != rune(',') {
								goto l116
							}
							position++
							if !_rules[rulesp]() {
								goto l116
							}
							if !_rules[ruleeSimpleSwitch]() {
								goto l116
							}
							{
								add(ruleAction15, position)
							}
							goto l115
						l116:
							position, tokenIndex = position116, tokenIndex116
						}
						{
							add(ruleAction16, position)
						}
						goto l108
					l113:
						position, tokenIndex = position108, tokenIndex108
						if !_rules[ruleeBitwise]() {
							goto l105
						}
					}
				l108:
					add(ruleeTernary, position107)
				}
				add(rulee0, position106)
			}
			return true
		l105:
			position, tokenIndex = position105, tokenIndex105
			return false
		},
		/* 9 eSimpleSwitch <- <(eBitwise '?' sp Action9 eBitwise Action10)> */
		func() bool {
			position119, tokenIndex119 := position, tokenIndex
			{
				position120 := position
				if !_rules[ruleeBitwise]() {
					goto l119
				}
				if buffer[position] != rune('?') {
					goto l119
				}
				position++
				if !_rules[rulesp]() {
					goto l119
				}
				{
					add(ruleAction9, position)
				}
				if !_rules[ruleeBitwise]() {
					goto l119
				}
				{
					add(ruleAction10, position)
				}
				add(ruleeSimpleSwitch, position120)
			}
			return true
		l119:
			position, tokenIndex = position119, tokenIndex119
			return false
		},
		/* 10 eTernary <- <((eBitwise '?' sp Action11 eBitwise ':' sp Action12 eBitwise Action13) / (eSimpleSwitch Action14 (',' sp eSimpleSwitch Action15)* Action16) / eBitwise)> */
		nil,
		/* 11 eBitwise <- <(eComp (((logicOr / bitwiseOr) Action17 eComp Action18) / ((logicAnd / bitwiseAnd) Action19 eComp Action20))*)> */
		func() bool {
			position124, tokenIndex124 := position, tokenIndex
			{
				position125 := position
				if !_rules[ruleeComp]() {
					goto l124
				}
			l126:
				{
					position127, tokenIndex127 := position, tokenIndex
					{
						position128, tokenIndex128 := position, tokenIndex
						{
							position130, tokenIndex130 := position, tokenIndex
							{
								position132 := position
								if buffer[position] != rune('|') {
									goto l131
								}
								position++
								if buffer[position] != rune('|') {
									goto l131
								}
								position++
								if !_rules[rulesp]() {
									goto l131
								}
								add(rulelogicOr, position132)
							}
							goto l130
						l131:
							position, tokenIndex = position130, tokenIndex130
							{
								position133 := position
								if buffer[position] != rune('|') {
									goto l129
								}
								position++
								if !_rules[rulesp]() {
									goto l129
								}
								add(rulebitwiseOr, position133)
							}
						}
					l130:
						{
							add(ruleAction17, position)
						}
						if !_rules[ruleeComp]() {
							goto l129
						}
						{
							add(ruleAction18, position)
						}
						goto l128
					l129:
						position, tokenIndex = position128, tokenIndex128
						{
							position136, tokenIndex136 := position, tokenIndex
							{
								position138 := position
								{
									position139, tokenIndex139 := position, tokenIndex
									if buffer[position] != rune('&') {
										goto l140
									}
									position++
									if buffer[position] != rune('&') {
										goto l140
									}
									position++
									goto l139
								l140:
									position, tokenIndex = position139, tokenIndex139
									if buffer[position] != rune('&') {
										goto l137
									}
									position++
									if buffer[position] != rune('a') {
										goto l137
									}
									position++
									if buffer[position] != rune('m') {
										goto l137
									}
									position++
									if buffer[position] != rune('p') {
										goto l137
									}
									position++
									if buffer[position] != rune(';') {
										goto l137
									}
									position++
									if buffer[position] != rune('&') {
										goto l137
									}
									position++
									if buffer[position] != rune('a') {
										goto l137
									}
									position++
									if buffer[position] != rune('m') {
										goto l137
									}
									position++
									if buffer[position] != rune('p') {
										goto l137
									}
									position++
									if buffer[position] != rune(';') {
										goto l137
									}
									position++
								}
							l139:
								if !_rules[rulesp]() {
									goto l137
								}
								add(rulelogicAnd, position138)
							}
							goto l136
						l137:
							position, tokenIndex = position136, tokenIndex136
							{
								position141 := position
								{
									position142, tokenIndex142 := position, tokenIndex
									if buffer[position] != rune('&') {
										goto l143
									}
									position++
									goto l142
								l143:
									position, tokenIndex = position142, tokenIndex142
									if buffer[position] != rune('&') {
										goto l127
									}
									position++
									if buffer[position] != rune('a') {
										goto l127
									}
									position++
									if buffer[position] != rune('m') {
										goto l127
									}
									position++
									if buffer[position] != rune('p') {
										goto l127
									}
									position++
									if buffer[position] != rune(';') {
										goto l127
									}
									position++
								}
							l142:
								if !_rules[rulesp]() {
									goto l127
								}
								add(rulebitwiseAnd, position141)
							}
						}
					l136:
						{
							add(ruleAction19, position)
						}
						if !_rules[ruleeComp]() {
							goto l127
						}
						{
							add(ruleAction20, position)
						}
					}
				l128:
					goto l126
				l127:
					position, tokenIndex = position127, tokenIndex127
				}
				add(ruleeBitwise, position125)
			}
			return true
		l124:
			position, tokenIndex = position124, tokenIndex124
			return false
		},
		/* 12 eComp <- <(e1 ((lt Action21 e1 Action22) / (ge Action29 e1 Action30) / ((&('>') (gt Action31 e1 Action32)) | (&('!') (ne Action27 e1 Action28)) | (&('=') (eq Action25 e1 Action26)) | (&('<') (le Action23 e1 Action24))))*)> */
		func() bool {
			position146, tokenIndex146 := position, tokenIndex
			{
				position147 := position
				if !_rules[rulee1]() {
					goto l146
				}
			l148:
				{
					position149, tokenIndex149 := position, tokenIndex
					{
						position150, tokenIndex150 := position, tokenIndex
						{
							position152 := position
							{
								position153, tokenIndex153 := position, tokenIndex
								if buffer[position] != rune('<') {
									goto l154
								}
								position++
								goto l153
							l154:
								position, tokenIndex = position153, tokenIndex153
								if buffer[position] != rune('＜') {
									goto l151
								}
								position++
							}
						l153:
							if !_rules[rulesp]() {
								goto l151
							}
							add(rulelt, position152)
						}
						{
							add(ruleAction21, position)
						}
						if !_rules[rulee1]() {
							goto l151
						}
						{
							add(ruleAction22, position)
						}
						goto l150
					l151:
						position, tokenIndex = position150, tokenIndex150
						{
							position158 := position
							{
								position159, tokenIndex159 := position, tokenIndex
								if buffer[position] != rune('>') {
									goto l160
								}
								position++
								if buffer[position] != rune('=') {
									goto l160
								}
								position++
								goto l159
							l160:
								position, tokenIndex = position159, tokenIndex159
								if buffer[position] != rune('＞') {
									goto l157
								}
								position++
								if buffer[position] != rune('＝') {
									goto l157
								}
								position++
							}
						l159:
							if !_rules[rulesp]() {
								goto l157
							}
							add(rulege, position158)
						}
						{
							add(ruleAction29, position)
						}
						if !_rules[rulee1]() {
							goto l157
						}
						{
							add(ruleAction30, position)
						}
						goto l150
					l157:
						position, tokenIndex = position150, tokenIndex150
						{
							switch buffer[position] {
							case '>':
								{
									position164 := position
									{
										position165, tokenIndex165 := position, tokenIndex
										if buffer[position] != rune('>') {
											goto l166
										}
										position++
										goto l165
									l166:
										position, tokenIndex = position165, tokenIndex165
										if buffer[position] != rune('＞') {
											goto l149
										}
										position++
									}
								l165:
									if !_rules[rulesp]() {
										goto l149
									}
									add(rulegt, position164)
								}
								{
									add(ruleAction31, position)
								}
								if !_rules[rulee1]() {
									goto l149
								}
								{
									add(ruleAction32, position)
								}
							case '!':
								{
									position169 := position
									{
										position170, tokenIndex170 := position, tokenIndex
										if buffer[position] != rune('!') {
											goto l171
										}
										position++
										if buffer[position] != rune('=') {
											goto l171
										}
										position++
										goto l170
									l171:
										position, tokenIndex = position170, tokenIndex170
										if buffer[position] != rune('！') {
											goto l149
										}
										position++
										if buffer[position] != rune('＝') {
											goto l149
										}
										position++
									}
								l170:
									if !_rules[rulesp]() {
										goto l149
									}
									add(rulene, position169)
								}
								{
									add(ruleAction27, position)
								}
								if !_rules[rulee1]() {
									goto l149
								}
								{
									add(ruleAction28, position)
								}
							case '=':
								{
									position174 := position
									{
										position175, tokenIndex175 := position, tokenIndex
										if buffer[position] != rune('=') {
											goto l176
										}
										position++
										if buffer[position] != rune('=') {
											goto l176
										}
										position++
										goto l175
									l176:
										position, tokenIndex = position175, tokenIndex175
										if buffer[position] != rune('＝') {
											goto l149
										}
										position++
										if buffer[position] != rune('＝') {
											goto l149
										}
										position++
									}
								l175:
									if !_rules[rulesp]() {
										goto l149
									}
									add(ruleeq, position174)
								}
								{
									add(ruleAction25, position)
								}
								if !_rules[rulee1]() {
									goto l149
								}
								{
									add(ruleAction26, position)
								}
							default:
								{
									position179 := position
									{
										position180, tokenIndex180 := position, tokenIndex
										if buffer[position] != rune('<') {
											goto l181
										}
										position++
										if buffer[position] != rune('=') {
											goto l181
										}
										position++
										goto l180
									l181:
										position, tokenIndex = position180, tokenIndex180
										if buffer[position] != rune('＜') {
											goto l149
										}
										position++
										if buffer[position] != rune('＝') {
											goto l149
										}
										position++
									}
								l180:
									if !_rules[rulesp]() {
										goto l149
									}
									add(rulele, position179)
								}
								{
									add(ruleAction23, position)
								}
								if !_rules[rulee1]() {
									goto l149
								}
								{
									add(ruleAction24, position)
								}
							}
						}

					}
				l150:
					goto l148
				l149:
					position, tokenIndex = position149, tokenIndex149
				}
				add(ruleeComp, position147)
			}
			return true
		l146:
			position, tokenIndex = position146, tokenIndex146
			return false
		},
		/* 13 e1 <- <(e2 ((add Action33 e2 Action34) / (minus Action35 e2 Action36))*)> */
		func() bool {
			position184, tokenIndex184 := position, tokenIndex
			{
				position185 := position
				if !_rules[rulee2]() {
					goto l184
				}
			l186:
				{
					position187, tokenIndex187 := position, tokenIndex
					{
						position188, tokenIndex188 := position, tokenIndex
						if !_rules[ruleadd]() {
							goto l189
						}
						{
							add(ruleAction33, position)
						}
						if !_rules[rulee2]() {
							goto l189
						}
						{
							add(ruleAction34, position)
						}
						goto l188
					l189:
						position, tokenIndex = position188, tokenIndex188
						if !_rules[ruleminus]() {
							goto l187
						}
						{
							add(ruleAction35, position)
						}
						if !_rules[rulee2]() {
							goto l187
						}
						{
							add(ruleAction36, position)
						}
					}
				l188:
					goto l186
				l187:
					position, tokenIndex = position187, tokenIndex187
				}
				add(rulee1, position185)
			}
			return true
		l184:
			position, tokenIndex = position184, tokenIndex184
			return false
		},
		/* 14 e2 <- <(e3 ((&('%') (modulus Action41 e3 Action42)) | (&('/') (divide Action39 e3 Action40)) | (&('*') (multiply Action37 e3 Action38)))*)> */
		func() bool {
			position194, tokenIndex194 := position, tokenIndex
			{
				position195 := position
				if !_rules[rulee3]() {
					goto l194
				}
			l196:
				{
					position197, tokenIndex197 := position, tokenIndex
					{
						switch buffer[position] {
						case '%':
							{
								position199 := position
								if buffer[position] != rune('%') {
									goto l197
								}
								position++
								if !_rules[rulesp]() {
									goto l197
								}
								add(rulemodulus, position199)
							}
							{
								add(ruleAction41, position)
							}
							if !_rules[rulee3]() {
								goto l197
							}
							{
								add(ruleAction42, position)
							}
						case '/':
							{
								position202 := position
								{
									position203, tokenIndex203 := position, tokenIndex
									if buffer[position] != rune('/') {
										goto l204
									}
									position++
									goto l203
								l204:
									position, tokenIndex = position203, tokenIndex203
									if buffer[position] != rune('／') {
										goto l197
									}
									position++
								}
							l203:
								if !_rules[rulesp]() {
									goto l197
								}
								add(ruledivide, position202)
							}
							{
								add(ruleAction39, position)
							}
							if !_rules[rulee3]() {
								goto l197
							}
							{
								add(ruleAction40, position)
							}
						default:
							{
								position207 := position
								{
									position208, tokenIndex208 := position, tokenIndex
									if buffer[position] != rune('*') {
										goto l209
									}
									position++
									goto l208
								l209:
									position, tokenIndex = position208, tokenIndex208
									if buffer[position] != rune('＊') {
										goto l197
									}
									position++
								}
							l208:
								if !_rules[rulesp]() {
									goto l197
								}
								add(rulemultiply, position207)
							}
							{
								add(ruleAction37, position)
							}
							if !_rules[rulee3]() {
								goto l197
							}
							{
								add(ruleAction38, position)
							}
						}
					}

					goto l196
				l197:
					position, tokenIndex = position197, tokenIndex197
				}
				add(rulee2, position195)
			}
			return true
		l194:
			position, tokenIndex = position194, tokenIndex194
			return false
		},
		/* 15 e3 <- <(e4 (exponentiation Action43 e4 Action44)*)> */
		func() bool {
			position212, tokenIndex212 := position, tokenIndex
			{
				position213 := position
				if !_rules[rulee4]() {
					goto l212
				}
			l214:
				{
					position215, tokenIndex215 := position, tokenIndex
					{
						position216 := position
						{
							position217, tokenIndex217 := position, tokenIndex
							if buffer[position] != rune('^') {
								goto l218
							}
							position++
							if !_rules[rulesp]() {
								goto l218
							}
							goto l217
						l218:
							position, tokenIndex = position217, tokenIndex217
							if buffer[position] != rune('*') {
								goto l215
							}
							position++
							if buffer[position] != rune('*') {
								goto l215
							}
							position++
							if !_rules[rulesp]() {
								goto l215
							}
						}
					l217:
						add(ruleexponentiation, position216)
					}
					{
						add(ruleAction43, position)
					}
					if !_rules[rulee4]() {
						goto l215
					}
					{
						add(ruleAction44, position)
					}
					goto l214
				l215:
					position, tokenIndex = position215, tokenIndex215
				}
				add(rulee3, position213)
			}
			return true
		l212:
			position, tokenIndex = position212, tokenIndex212
			return false
		},
		/* 16 e4 <- <((minus e5 Action45) / e5)> */
		func() bool {
			position221, tokenIndex221 := position, tokenIndex
			{
				position222 := position
				{
					position223, tokenIndex223 := position, tokenIndex
					if !_rules[ruleminus]() {
						goto l224
					}
					if !_rules[rulee5]() {
						goto l224
					}
					{
						add(ruleAction45, position)
					}
					goto l223
				l224:
					position, tokenIndex = position223, tokenIndex223
					if !_rules[rulee5]() {
						goto l221
					}
				}
			l223:
				add(rulee4, position222)
			}
			return true
		l221:
			position, tokenIndex = position221, tokenIndex221
			return false
		},
		/* 17 e5 <- <((add eDice) / eDice)> */
		func() bool {
			position226, tokenIndex226 := position, tokenIndex
			{
				position227 := position
				{
					position228, tokenIndex228 := position, tokenIndex
					if !_rules[ruleadd]() {
						goto l229
					}
					if !_rules[ruleeDice]() {
						goto l229
					}
					goto l228
				l229:
					position, tokenIndex = position228, tokenIndex228
					if !_rules[ruleeDice]() {
						goto l226
					}
				}
			l228:
				add(rulee5, position227)
			}
			return true
		l226:
			position, tokenIndex = position226, tokenIndex226
			return false
		},
		/* 18 dndDiceSuffix <- <(((('优' '势') / ('k' 'h')) Action46 sp) / ((('劣' '势') / ('k' 'l')) Action47 sp))> */
		func() bool {
			position230, tokenIndex230 := position, tokenIndex
			{
				position231 := position
				{
					position232, tokenIndex232 := position, tokenIndex
					{
						position234, tokenIndex234 := position, tokenIndex
						if buffer[position] != rune('优') {
							goto l235
						}
						position++
						if buffer[position] != rune('势') {
							goto l235
						}
						position++
						goto l234
					l235:
						position, tokenIndex = position234, tokenIndex234
						if buffer[position] != rune('k') {
							goto l233
						}
						position++
						if buffer[position] != rune('h') {
							goto l233
						}
						position++
					}
				l234:
					{
						add(ruleAction46, position)
					}
					if !_rules[rulesp]() {
						goto l233
					}
					goto l232
				l233:
					position, tokenIndex = position232, tokenIndex232
					{
						position237, tokenIndex237 := position, tokenIndex
						if buffer[position] != rune('劣') {
							goto l238
						}
						position++
						if buffer[position] != rune('势') {
							goto l238
						}
						position++
						goto l237
					l238:
						position, tokenIndex = position237, tokenIndex237
						if buffer[position] != rune('k') {
							goto l230
						}
						position++
						if buffer[position] != rune('l') {
							goto l230
						}
						position++
					}
				l237:
					{
						add(ruleAction47, position)
					}
					if !_rules[rulesp]() {
						goto l230
					}
				}
			l232:
				add(ruledndDiceSuffix, position231)
			}
			return true
		l230:
			position, tokenIndex = position230, tokenIndex230
			return false
		},
		/* 19 kqDiceOp <- <(('k' eDice2 Action48)? ('q' eDice2 Action49)? ('d' 'l' eDice2 Action50)? ('d' 'h' eDice2 Action51)?)> */
		func() bool {
			{
				position241 := position
				{
					position242, tokenIndex242 := position, tokenIndex
					if buffer[position] != rune('k') {
						goto l242
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l242
					}
					{
						add(ruleAction48, position)
					}
					goto l243
				l242:
					position, tokenIndex = position242, tokenIndex242
				}
			l243:
				{
					position245, tokenIndex245 := position, tokenIndex
					if buffer[position] != rune('q') {
						goto l245
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l245
					}
					{
						add(ruleAction49, position)
					}
					goto l246
				l245:
					position, tokenIndex = position245, tokenIndex245
				}
			l246:
				{
					position248, tokenIndex248 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l248
					}
					position++
					if buffer[position] != rune('l') {
						goto l248
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l248
					}
					{
						add(ruleAction50, position)
					}
					goto l249
				l248:
					position, tokenIndex = position248, tokenIndex248
				}
			l249:
				{
					position251, tokenIndex251 := position, tokenIndex
					if buffer[position] != rune('d') {
						goto l251
					}
					position++
					if buffer[position] != rune('h') {
						goto l251
					}
					position++
					if !_rules[ruleeDice2]() {
						goto l251
					}
					{
						add(ruleAction51, position)
					}
					goto l252
				l251:
					position, tokenIndex = position251, tokenIndex251
				}
			l252:
				add(rulekqDiceOp, position241)
			}
			return true
		},
		/* 20 _dnumber <- <&(('d' / 'D') (number / '('))> */
		func() bool {
			position254, tokenIndex254 := position, tokenIndex
			{
				position255 := position
				{
					position256, tokenIndex256 := position, tokenIndex
					{
						position257, tokenIndex257 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l258
						}
						position++
						goto l257
					l258:
						position, tokenIndex = position257, tokenIndex257
						if buffer[position] != rune('D') {
							goto l254
						}
						position++
					}
				l257:
					{
						position259, tokenIndex259 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l260
						}
						goto l259
					l260:
						position, tokenIndex = position259, tokenIndex259
						if buffer[position] != rune('(') {
							goto l254
						}
						position++
					}
				l259:
					position, tokenIndex = position256, tokenIndex256
				}
				add(rule_dnumber, position255)
			}
			return true
		l254:
			position, tokenIndex = position254, tokenIndex254
			return false
		},
		/* 21 simpleDice2 <- <(&(number / '(') eDice2)> */
		func() bool {
			position261, tokenIndex261 := position, tokenIndex
			{
				position262 := position
				{
					position263, tokenIndex263 := position, tokenIndex
					{
						position264, tokenIndex264 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l265
						}
						goto l264
					l265:
						position, tokenIndex = position264, tokenIndex264
						if buffer[position] != rune('(') {
							goto l261
						}
						position++
					}
				l264:
					position, tokenIndex = position263, tokenIndex263
				}
				if !_rules[ruleeDice2]() {
					goto l261
				}
				add(rulesimpleDice2, position262)
			}
			return true
		l261:
			position, tokenIndex = position261, tokenIndex261
			return false
		},
		/* 22 wodDicePool <- <(Action52 (simpleDice2 Action53)?)> */
		nil,
		/* 23 doubleCrossDicePool <- <(Action54 (simpleDice2 Action55))> */
		nil,
		/* 24 eDice <- <((_dnumber ('d' / 'D') Action56 eDice2 dndDiceSuffix Action57) / (_dnumber ('d' / 'D') Action58 eDice2 kqDiceOp Action59) / (('d' / 'D') dndDiceSuffix Action60) / (('d' / 'D') !(!((&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .) sp Action61) / (wodDicePool ('a' / 'A') simpleDice2 ((&('Q' | 'q') (('q' / 'Q') simpleDice2 Action64)) | (&('K' | 'k') (('k' / 'K') simpleDice2 Action63)) | (&('M' | 'm') (('m' / 'M') simpleDice2 Action62)))* Action65) / (doubleCrossDicePool ('c' / 'C') simpleDice2 (('m' / 'M') simpleDice2 Action66)* Action67) / (eDice2 (('d' / 'D') Action68 simpleDice2 kqDiceOp Action69)*))> */
		func() bool {
			position268, tokenIndex268 := position, tokenIndex
			{
				position269 := position
				{
					position270, tokenIndex270 := position, tokenIndex
					if !_rules[rule_dnumber]() {
						goto l271
					}
					{
						position272, tokenIndex272 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l273
						}
						position++
						goto l272
					l273:
						position, tokenIndex = position272, tokenIndex272
						if buffer[position] != rune('D') {
							goto l271
						}
						position++
					}
				l272:
					{
						add(ruleAction56, position)
					}
					if !_rules[ruleeDice2]() {
						goto l271
					}
					if !_rules[ruledndDiceSuffix]() {
						goto l271
					}
					{
						add(ruleAction57, position)
					}
					goto l270
				l271:
					position, tokenIndex = position270, tokenIndex270
					if !_rules[rule_dnumber]() {
						goto l276
					}
					{
						position277, tokenIndex277 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l278
						}
						position++
						goto l277
					l278:
						position, tokenIndex = position277, tokenIndex277
						if buffer[position] != rune('D') {
							goto l276
						}
						position++
					}
				l277:
					{
						add(ruleAction58, position)
					}
					if !_rules[ruleeDice2]() {
						goto l276
					}
					if !_rules[rulekqDiceOp]() {
						goto l276
					}
					{
						add(ruleAction59, position)
					}
					goto l270
				l276:
					position, tokenIndex = position270, tokenIndex270
					{
						position282, tokenIndex282 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l283
						}
						position++
						goto l282
					l283:
						position, tokenIndex = position282, tokenIndex282
						if buffer[position] != rune('D') {
							goto l281
						}
						position++
					}
				l282:
					if !_rules[ruledndDiceSuffix]() {
						goto l281
					}
					{
						add(ruleAction60, position)
					}
					goto l270
				l281:
					position, tokenIndex = position270, tokenIndex270
					{
						position286, tokenIndex286 := position, tokenIndex
						if buffer[position] != rune('d') {
							goto l287
						}
						position++
						goto l286
					l287:
						position, tokenIndex = position286, tokenIndex286
						if buffer[position] != rune('D') {
							goto l285
						}
						position++
					}
				l286:
					{
						position288, tokenIndex288 := position, tokenIndex
						{
							position289, tokenIndex289 := position, tokenIndex
							{
								switch buffer[position] {
								case '\r':
									if buffer[position] != rune('\r') {
										goto l289
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l289
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l289
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l289
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l289
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l289
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l289
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l289
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l289
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l289
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l289
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l289
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l289
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l289
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l289
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l289
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l289
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l289
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l289
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l289
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l289
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l289
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l289
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l289
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l289
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l289
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l289
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l289
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l289
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l289
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l289
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l289
									}
									position++
								}
							}

							goto l288
						l289:
							position, tokenIndex = position289, tokenIndex289
						}
						if !matchDot() {
							goto l288
						}
						goto l285
					l288:
						position, tokenIndex = position288, tokenIndex288
					}
					if !_rules[rulesp]() {
						goto l285
					}
					{
						add(ruleAction61, position)
					}
					goto l270
				l285:
					position, tokenIndex = position270, tokenIndex270
					{
						position293 := position
						{
							add(ruleAction52, position)
						}
						{
							position295, tokenIndex295 := position, tokenIndex
							if !_rules[rulesimpleDice2]() {
								goto l295
							}
							{
								add(ruleAction53, position)
							}
							goto l296
						l295:
							position, tokenIndex = position295, tokenIndex295
						}
					l296:
						add(rulewodDicePool, position293)
					}
					{
						position298, tokenIndex298 := position, tokenIndex
						if buffer[position] != rune('a') {
							goto l299
						}
						position++
						goto l298
					l299:
						position, tokenIndex = position298, tokenIndex298
						if buffer[position] != rune('A') {
							goto l292
						}
						position++
					}
				l298:
					if !_rules[rulesimpleDice2]() {
						goto l292
					}
				l300:
					{
						position301, tokenIndex301 := position, tokenIndex
						{
							switch buffer[position] {
							case 'Q', 'q':
								{
									position303, tokenIndex303 := position, tokenIndex
									if buffer[position] != rune('q') {
										goto l304
									}
									position++
									goto l303
								l304:
									position, tokenIndex = position303, tokenIndex303
									if buffer[position] != rune('Q') {
										goto l301
									}
									position++
								}
							l303:
								if !_rules[rulesimpleDice2]() {
									goto l301
								}
								{
									add(ruleAction64, position)
								}
							case 'K', 'k':
								{
									position306, tokenIndex306 := position, tokenIndex
									if buffer[position] != rune('k') {
										goto l307
									}
									position++
									goto l306
								l307:
									position, tokenIndex = position306, tokenIndex306
									if buffer[position] != rune('K') {
										goto l301
									}
									position++
								}
							l306:
								if !_rules[rulesimpleDice2]() {
									goto l301
								}
								{
									add(ruleAction63, position)
								}
							default:
								{
									position309, tokenIndex309 := position, tokenIndex
									if buffer[position] != rune('m') {
										goto l310
									}
									position++
									goto l309
								l310:
									position, tokenIndex = position309, tokenIndex309
									if buffer[position] != rune('M') {
										goto l301
									}
									position++
								}
							l309:
								if !_rules[rulesimpleDice2]() {
									goto l301
								}
								{
									add(ruleAction62, position)
								}
							}
						}

						goto l300
					l301:
						position, tokenIndex = position301, tokenIndex301
					}
					{
						add(ruleAction65, position)
					}
					goto l270
				l292:
					position, tokenIndex = position270, tokenIndex270
					{
						position314 := position
						{
							add(ruleAction54, position)
						}
						if !_rules[rulesimpleDice2]() {
							goto l313
						}
						{
							add(ruleAction55, position)
						}
						add(ruledoubleCrossDicePool, position314)
					}
					{
						position317, tokenIndex317 := position, tokenIndex
						if buffer[position] != rune('c') {
							goto l318
						}
						position++
						goto l317
					l318:
						position, tokenIndex = position317, tokenIndex317
						if buffer[position] != rune('C') {
							goto l313
						}
						position++
					}
				l317:
					if !_rules[rulesimpleDice2]() {
						goto l313
					}
				l319:
					{
						position320, tokenIndex320 := position, tokenIndex
						{
							position321, tokenIndex321 := position, tokenIndex
							if buffer[position] != rune('m') {
								goto l322
							}
							position++
							goto l321
						l322:
							position, tokenIndex = position321, tokenIndex321
							if buffer[position] != rune('M') {
								goto l320
							}
							position++
						}
					l321:
						if !_rules[rulesimpleDice2]() {
							goto l320
						}
						{
							add(ruleAction66, position)
						}
						goto l319
					l320:
						position, tokenIndex = position320, tokenIndex320
					}
					{
						add(ruleAction67, position)
					}
					goto l270
				l313:
					position, tokenIndex = position270, tokenIndex270
					if !_rules[ruleeDice2]() {
						goto l268
					}
				l325:
					{
						position326, tokenIndex326 := position, tokenIndex
						{
							position327, tokenIndex327 := position, tokenIndex
							if buffer[position] != rune('d') {
								goto l328
							}
							position++
							goto l327
						l328:
							position, tokenIndex = position327, tokenIndex327
							if buffer[position] != rune('D') {
								goto l326
							}
							position++
						}
					l327:
						{
							add(ruleAction68, position)
						}
						if !_rules[rulesimpleDice2]() {
							goto l326
						}
						if !_rules[rulekqDiceOp]() {
							goto l326
						}
						{
							add(ruleAction69, position)
						}
						goto l325
					l326:
						position, tokenIndex = position326, tokenIndex326
					}
				}
			l270:
				add(ruleeDice, position269)
			}
			return true
		l268:
			position, tokenIndex = position268, tokenIndex268
			return false
		},
		/* 25 laNumberOrLeftParen <- <&(number / '(')> */
		func() bool {
			position331, tokenIndex331 := position, tokenIndex
			{
				position332 := position
				{
					position333, tokenIndex333 := position, tokenIndex
					{
						position334, tokenIndex334 := position, tokenIndex
						if !_rules[rulenumber]() {
							goto l335
						}
						goto l334
					l335:
						position, tokenIndex = position334, tokenIndex334
						if buffer[position] != rune('(') {
							goto l331
						}
						position++
					}
				l334:
					position, tokenIndex = position333, tokenIndex333
				}
				add(rulelaNumberOrLeftParen, position332)
			}
			return true
		l331:
			position, tokenIndex = position331, tokenIndex331
			return false
		},
		/* 26 eDice2 <- <((('p' / 'P') laNumberOrLeftParen eDice3 Action70) / (('p' / 'P') Action71) / eDice3)> */
		func() bool {
			position336, tokenIndex336 := position, tokenIndex
			{
				position337 := position
				{
					position338, tokenIndex338 := position, tokenIndex
					{
						position340, tokenIndex340 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l341
						}
						position++
						goto l340
					l341:
						position, tokenIndex = position340, tokenIndex340
						if buffer[position] != rune('P') {
							goto l339
						}
						position++
					}
				l340:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l339
					}
					if !_rules[ruleeDice3]() {
						goto l339
					}
					{
						add(ruleAction70, position)
					}
					goto l338
				l339:
					position, tokenIndex = position338, tokenIndex338
					{
						position344, tokenIndex344 := position, tokenIndex
						if buffer[position] != rune('p') {
							goto l345
						}
						position++
						goto l344
					l345:
						position, tokenIndex = position344, tokenIndex344
						if buffer[position] != rune('P') {
							goto l343
						}
						position++
					}
				l344:
					{
						add(ruleAction71, position)
					}
					goto l338
				l343:
					position, tokenIndex = position338, tokenIndex338
					if !_rules[ruleeDice3]() {
						goto l336
					}
				}
			l338:
				add(ruleeDice2, position337)
			}
			return true
		l336:
			position, tokenIndex = position336, tokenIndex336
			return false
		},
		/* 27 eDice3 <- <((('b' / 'B') laNumberOrLeftParen value Action72) / (('b' / 'B') Action73) / eDice4)> */
		func() bool {
			position347, tokenIndex347 := position, tokenIndex
			{
				position348 := position
				{
					position349, tokenIndex349 := position, tokenIndex
					{
						position351, tokenIndex351 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l352
						}
						position++
						goto l351
					l352:
						position, tokenIndex = position351, tokenIndex351
						if buffer[position] != rune('B') {
							goto l350
						}
						position++
					}
				l351:
					if !_rules[rulelaNumberOrLeftParen]() {
						goto l350
					}
					if !_rules[rulevalue]() {
						goto l350
					}
					{
						add(ruleAction72, position)
					}
					goto l349
				l350:
					position, tokenIndex = position349, tokenIndex349
					{
						position355, tokenIndex355 := position, tokenIndex
						if buffer[position] != rune('b') {
							goto l356
						}
						position++
						goto l355
					l356:
						position, tokenIndex = position355, tokenIndex355
						if buffer[position] != rune('B') {
							goto l354
						}
						position++
					}
				l355:
					{
						add(ruleAction73, position)
					}
					goto l349
				l354:
					position, tokenIndex = position349, tokenIndex349
					{
						position358 := position
						{
							position359, tokenIndex359 := position, tokenIndex
							{
								position361, tokenIndex361 := position, tokenIndex
								if buffer[position] != rune('f') {
									goto l362
								}
								position++
								goto l361
							l362:
								position, tokenIndex = position361, tokenIndex361
								if buffer[position] != rune('F') {
									goto l360
								}
								position++
							}
						l361:
							if !_rules[rulesp]() {
								goto l360
							}
							{
								add(ruleAction74, position)
							}
							goto l359
						l360:
							position, tokenIndex = position359, tokenIndex359
							if !_rules[rulevalue]() {
								goto l347
							}
						}
					l359:
						add(ruleeDice4, position358)
					}
				}
			l349:
				add(ruleeDice3, position348)
			}
			return true
		l347:
			position, tokenIndex = position347, tokenIndex347
			return false
		},
		/* 28 eDice4 <- <((('f' / 'F') sp Action74) / value)> */
		nil,
		/* 29 value <- <(number / ('t' 'h' 'i' 's' sp '.' sp identifier sp Action75) / ('i' 'n' 't' '(' sp e0 sp ')' sp Action76) / ('s' 't' 'r' '(' sp e0 sp ')' sp Action77) / assign_expr / (identifier Action78) / sub / fstring)> */
		func() bool {
			position365, tokenIndex365 := position, tokenIndex
			{
				position366 := position
				{
					position367, tokenIndex367 := position, tokenIndex
					if !_rules[rulenumber]() {
						goto l368
					}
					goto l367
				l368:
					position, tokenIndex = position367, tokenIndex367
					if buffer[position] != rune('t') {
						goto l369
					}
					position++
					if buffer[position] != rune('h') {
						goto l369
					}
					position++
					if buffer[position] != rune('i') {
						goto l369
					}
					position++
					if buffer[position] != rune('s') {
						goto l369
					}
					position++
					if !_rules[rulesp]() {
						goto l369
					}
					if buffer[position] != rune('.') {
						goto l369
					}
					position++
					if !_rules[rulesp]() {
						goto l369
					}
					if !_rules[ruleidentifier]() {
						goto l369
					}
					if !_rules[rulesp]() {
						goto l369
					}
					{
						add(ruleAction75, position)
					}
					goto l367
				l369:
					position, tokenIndex = position367, tokenIndex367
					if buffer[position] != rune('i') {
						goto l371
					}
					position++
					if buffer[position] != rune('n') {
						goto l371
					}
					position++
					if buffer[position] != rune('t') {
						goto l371
					}
					position++
					if buffer[position] != rune('(') {
						goto l371
					}
					position++
					if !_rules[rulesp]() {
						goto l371
					}
					if !_rules[rulee0]() {
						goto l371
					}
					if !_rules[rulesp]() {
						goto l371
					}
					if buffer[position] != rune(')') {
						goto l371
					}
					position++
					if !_rules[rulesp]() {
						goto l371
					}
					{
						add(ruleAction76, position)
					}
					goto l367
				l371:
					position, tokenIndex = position367, tokenIndex367
					if buffer[position] != rune('s') {
						goto l373
					}
					position++
					if buffer[position] != rune('t') {
						goto l373
					}
					position++
					if buffer[position] != rune('r') {
						goto l373
					}
					position++
					if buffer[position] != rune('(') {
						goto l373
					}
					position++
					if !_rules[rulesp]() {
						goto l373
					}
					if !_rules[rulee0]() {
						goto l373
					}
					if !_rules[rulesp]() {
						goto l373
					}
					if buffer[position] != rune(')') {
						goto l373
					}
					position++
					if !_rules[rulesp]() {
						goto l373
					}
					{
						add(ruleAction77, position)
					}
					goto l367
				l373:
					position, tokenIndex = position367, tokenIndex367
					if !_rules[ruleassign_expr]() {
						goto l375
					}
					goto l367
				l375:
					position, tokenIndex = position367, tokenIndex367
					if !_rules[ruleidentifier]() {
						goto l376
					}
					{
						add(ruleAction78, position)
					}
					goto l367
				l376:
					position, tokenIndex = position367, tokenIndex367
					{
						position379 := position
						{
							position380 := position
							if buffer[position] != rune('(') {
								goto l378
							}
							position++
							if !_rules[rulesp]() {
								goto l378
							}
							add(ruleopen, position380)
						}
						if !_rules[rulee0]() {
							goto l378
						}
						{
							position381 := position
							if buffer[position] != rune(')') {
								goto l378
							}
							position++
							if !_rules[rulesp]() {
								goto l378
							}
							add(ruleclose, position381)
						}
						add(rulesub, position379)
					}
					goto l367
				l378:
					position, tokenIndex = position367, tokenIndex367
					{
						position382 := position
						{
							switch buffer[position] {
							case '\'':
								if buffer[position] != rune('\'') {
									goto l365
								}
								position++
								{
									add(ruleAction94, position)
								}
								{
									position385 := position
								l386:
									{
										position387, tokenIndex387 := position, tokenIndex
										{
											position388 := position
											{
												position389 := position
												{
													position392, tokenIndex392 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l393
													}
													goto l392
												l393:
													position, tokenIndex = position392, tokenIndex392
													{
														position394, tokenIndex394 := position, tokenIndex
														{
															switch buffer[position] {
															case '\r':
																if buffer[position] != rune('\r') {
																	goto l394
																}
																position++
															case '\n':
																if buffer[position] != rune('\n') {
																	goto l394
																}
																position++
															case '\\':
																if buffer[position] != rune('\\') {
																	goto l394
																}
																position++
															default:
																if buffer[position] != rune('\'') {
																	goto l394
																}
																position++
															}
														}

														goto l387
													l394:
														position, tokenIndex = position394, tokenIndex394
													}
													if !matchDot() {
														goto l387
													}
												}
											l392:
											l390:
												{
													position391, tokenIndex391 := position, tokenIndex
													{
														position396, tokenIndex396 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l397
														}
														goto l396
													l397:
														position, tokenIndex = position396, tokenIndex396
														{
															position398, tokenIndex398 := position, tokenIndex
															{
																switch buffer[position] {
																case '\r':
																	if buffer[position] != rune('\r') {
																		goto l398
																	}
																	position++
																case '\n':
																	if buffer[position] != rune('\n') {
																		goto l398
																	}
																	position++
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l398
																	}
																	position++
																default:
																	if buffer[position] != rune('\'') {
																		goto l398
																	}
																	position++
																}
															}

															goto l391
														l398:
															position, tokenIndex = position398, tokenIndex398
														}
														if !matchDot() {
															goto l391
														}
													}
												l396:
													goto l390
												l391:
													position, tokenIndex = position391, tokenIndex391
												}
												add(rulePegText, position389)
											}
											{
												add(ruleAction83, position)
											}
											add(rulestrPart3, position388)
										}
										goto l386
									l387:
										position, tokenIndex = position387, tokenIndex387
									}
									add(rulePegText, position385)
								}
								if buffer[position] != rune('\'') {
									goto l365
								}
								position++
								{
									add(ruleAction95, position)
								}
							case '"':
								if buffer[position] != rune('"') {
									goto l365
								}
								position++
								{
									add(ruleAction92, position)
								}
								{
									position403 := position
								l404:
									{
										position405, tokenIndex405 := position, tokenIndex
										{
											position406 := position
											{
												position407 := position
												{
													position410, tokenIndex410 := position, tokenIndex
													if !_rules[ruleescape]() {
														goto l411
													}
													goto l410
												l411:
													position, tokenIndex = position410, tokenIndex410
													{
														position412, tokenIndex412 := position, tokenIndex
														{
															switch buffer[position] {
															case '\r':
																if buffer[position] != rune('\r') {
																	goto l412
																}
																position++
															case '\n':
																if buffer[position] != rune('\n') {
																	goto l412
																}
																position++
															case '\\':
																if buffer[position] != rune('\\') {
																	goto l412
																}
																position++
															default:
																if buffer[position] != rune('"') {
																	goto l412
																}
																position++
															}
														}

														goto l405
													l412:
														position, tokenIndex = position412, tokenIndex412
													}
													if !matchDot() {
														goto l405
													}
												}
											l410:
											l408:
												{
													position409, tokenIndex409 := position, tokenIndex
													{
														position414, tokenIndex414 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l415
														}
														goto l414
													l415:
														position, tokenIndex = position414, tokenIndex414
														{
															position416, tokenIndex416 := position, tokenIndex
															{
																switch buffer[position] {
																case '\r':
																	if buffer[position] != rune('\r') {
																		goto l416
																	}
																	position++
																case '\n':
																	if buffer[position] != rune('\n') {
																		goto l416
																	}
																	position++
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l416
																	}
																	position++
																default:
																	if buffer[position] != rune('"') {
																		goto l416
																	}
																	position++
																}
															}

															goto l409
														l416:
															position, tokenIndex = position416, tokenIndex416
														}
														if !matchDot() {
															goto l409
														}
													}
												l414:
													goto l408
												l409:
													position, tokenIndex = position409, tokenIndex409
												}
												add(rulePegText, position407)
											}
											{
												add(ruleAction82, position)
											}
											add(rulestrPart2, position406)
										}
										goto l404
									l405:
										position, tokenIndex = position405, tokenIndex405
									}
									add(rulePegText, position403)
								}
								if buffer[position] != rune('"') {
									goto l365
								}
								position++
								{
									add(ruleAction93, position)
								}
							case '\x1e':
								if buffer[position] != rune('\x1e') {
									goto l365
								}
								position++
								{
									add(ruleAction88, position)
								}
								{
									position421 := position
								l422:
									{
										position423, tokenIndex423 := position, tokenIndex
										{
											position424, tokenIndex424 := position, tokenIndex
											if buffer[position] != rune('{') {
												goto l425
											}
											position++
											if !_rules[rulesp]() {
												goto l425
											}
											if !_rules[rulee]() {
												goto l425
											}
											{
												add(ruleAction89, position)
											}
											if buffer[position] != rune('}') {
												goto l425
											}
											position++
											goto l424
										l425:
											position, tokenIndex = position424, tokenIndex424
											if buffer[position] != rune('{') {
												goto l427
											}
											position++
											if buffer[position] != rune('%') {
												goto l427
											}
											position++
											if !_rules[rulesp]() {
												goto l427
											}
											if !_rules[rulee]() {
												goto l427
											}
											{
												add(ruleAction90, position)
											}
											if buffer[position] != rune('%') {
												goto l427
											}
											position++
											if buffer[position] != rune('}') {
												goto l427
											}
											position++
											goto l424
										l427:
											position, tokenIndex = position424, tokenIndex424
											{
												position429 := position
												{
													position430 := position
													{
														position433, tokenIndex433 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l434
														}
														goto l433
													l434:
														position, tokenIndex = position433, tokenIndex433
														{
															position435, tokenIndex435 := position, tokenIndex
															{
																switch buffer[position] {
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l435
																	}
																	position++
																case '\x1e':
																	if buffer[position] != rune('\x1e') {
																		goto l435
																	}
																	position++
																default:
																	if buffer[position] != rune('{') {
																		goto l435
																	}
																	position++
																}
															}

															goto l423
														l435:
															position, tokenIndex = position435, tokenIndex435
														}
														if !matchDot() {
															goto l423
														}
													}
												l433:
												l431:
													{
														position432, tokenIndex432 := position, tokenIndex
														{
															position437, tokenIndex437 := position, tokenIndex
															if !_rules[ruleescape]() {
																goto l438
															}
															goto l437
														l438:
															position, tokenIndex = position437, tokenIndex437
															{
																position439, tokenIndex439 := position, tokenIndex
																{
																	switch buffer[position] {
																	case '\\':
																		if buffer[position] != rune('\\') {
																			goto l439
																		}
																		position++
																	case '\x1e':
																		if buffer[position] != rune('\x1e') {
																			goto l439
																		}
																		position++
																	default:
																		if buffer[position] != rune('{') {
																			goto l439
																		}
																		position++
																	}
																}

																goto l432
															l439:
																position, tokenIndex = position439, tokenIndex439
															}
															if !matchDot() {
																goto l432
															}
														}
													l437:
														goto l431
													l432:
														position, tokenIndex = position432, tokenIndex432
													}
													add(rulePegText, position430)
												}
												{
													add(ruleAction81, position)
												}
												add(rulestrPart1, position429)
											}
										}
									l424:
										goto l422
									l423:
										position, tokenIndex = position423, tokenIndex423
									}
									add(rulePegText, position421)
								}
								if buffer[position] != rune('\x1e') {
									goto l365
								}
								position++
								{
									add(ruleAction91, position)
								}
							default:
								if buffer[position] != rune('`') {
									goto l365
								}
								position++
								{
									add(ruleAction84, position)
								}
								{
									position444 := position
								l445:
									{
										position446, tokenIndex446 := position, tokenIndex
										{
											position447, tokenIndex447 := position, tokenIndex
											if buffer[position] != rune('{') {
												goto l448
											}
											position++
											if !_rules[rulesp]() {
												goto l448
											}
											if !_rules[rulee]() {
												goto l448
											}
											{
												add(ruleAction85, position)
											}
											if buffer[position] != rune('}') {
												goto l448
											}
											position++
											goto l447
										l448:
											position, tokenIndex = position447, tokenIndex447
											if buffer[position] != rune('{') {
												goto l450
											}
											position++
											if buffer[position] != rune('{') {
												goto l450
											}
											position++
											if !_rules[rulesp]() {
												goto l450
											}
											if !_rules[rulee]() {
												goto l450
											}
											{
												add(ruleAction86, position)
											}
											if buffer[position] != rune('}') {
												goto l450
											}
											position++
											if buffer[position] != rune('}') {
												goto l450
											}
											position++
											goto l447
										l450:
											position, tokenIndex = position447, tokenIndex447
											{
												position452 := position
												{
													position453 := position
													{
														position456, tokenIndex456 := position, tokenIndex
														if !_rules[ruleescape]() {
															goto l457
														}
														goto l456
													l457:
														position, tokenIndex = position456, tokenIndex456
														{
															position458, tokenIndex458 := position, tokenIndex
															{
																switch buffer[position] {
																case '\\':
																	if buffer[position] != rune('\\') {
																		goto l458
																	}
																	position++
																case '`':
																	if buffer[position] != rune('`') {
																		goto l458
																	}
																	position++
																default:
																	if buffer[position] != rune('{') {
																		goto l458
																	}
																	position++
																}
															}

															goto l446
														l458:
															position, tokenIndex = position458, tokenIndex458
														}
														if !matchDot() {
															goto l446
														}
													}
												l456:
												l454:
													{
														position455, tokenIndex455 := position, tokenIndex
														{
															position460, tokenIndex460 := position, tokenIndex
															if !_rules[ruleescape]() {
																goto l461
															}
															goto l460
														l461:
															position, tokenIndex = position460, tokenIndex460
															{
																position462, tokenIndex462 := position, tokenIndex
																{
																	switch buffer[position] {
																	case '\\':
																		if buffer[position] != rune('\\') {
																			goto l462
																		}
																		position++
																	case '`':
																		if buffer[position] != rune('`') {
																			goto l462
																		}
																		position++
																	default:
																		if buffer[position] != rune('{') {
																			goto l462
																		}
																		position++
																	}
																}

																goto l455
															l462:
																position, tokenIndex = position462, tokenIndex462
															}
															if !matchDot() {
																goto l455
															}
														}
													l460:
														goto l454
													l455:
														position, tokenIndex = position455, tokenIndex455
													}
													add(rulePegText, position453)
												}
												{
													add(ruleAction80, position)
												}
												add(rulestrPart, position452)
											}
										}
									l447:
										goto l445
									l446:
										position, tokenIndex = position446, tokenIndex446
									}
									add(rulePegText, position444)
								}
								if buffer[position] != rune('`') {
									goto l365
								}
								position++
								{
									add(ruleAction87, position)
								}
							}
						}

						if !_rules[rulesp]() {
							goto l365
						}
						add(rulefstring, position382)
					}
				}
			l367:
				add(rulevalue, position366)
			}
			return true
		l365:
			position, tokenIndex = position365, tokenIndex365
			return false
		},
		/* 30 number <- <(<[0-9]+> sp Action79)> */
		func() bool {
			position466, tokenIndex466 := position, tokenIndex
			{
				position467 := position
				{
					position468 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l466
					}
					position++
				l469:
					{
						position470, tokenIndex470 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l470
						}
						position++
						goto l469
					l470:
						position, tokenIndex = position470, tokenIndex470
					}
					add(rulePegText, position468)
				}
				if !_rules[rulesp]() {
					goto l466
				}
				{
					add(ruleAction79, position)
				}
				add(rulenumber, position467)
			}
			return true
		l466:
			position, tokenIndex = position466, tokenIndex466
			return false
		},
		/* 31 identifier <- <(<(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) . (!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.])) .)*)> sp)> */
		func() bool {
			position472, tokenIndex472 := position, tokenIndex
			{
				position473 := position
				{
					position474 := position
					{
						position475, tokenIndex475 := position, tokenIndex
						{
							switch buffer[position] {
							case '\x1e':
								if buffer[position] != rune('\x1e') {
									goto l475
								}
								position++
							case '\r':
								if buffer[position] != rune('\r') {
									goto l475
								}
								position++
							case '\n':
								if buffer[position] != rune('\n') {
									goto l475
								}
								position++
							case '\t':
								if buffer[position] != rune('\t') {
									goto l475
								}
								position++
							case ' ':
								if buffer[position] != rune(' ') {
									goto l475
								}
								position++
							case '~':
								if buffer[position] != rune('~') {
									goto l475
								}
								position++
							case '}':
								if buffer[position] != rune('}') {
									goto l475
								}
								position++
							case '|':
								if buffer[position] != rune('|') {
									goto l475
								}
								position++
							case '{':
								if buffer[position] != rune('{') {
									goto l475
								}
								position++
							case '`':
								if buffer[position] != rune('`') {
									goto l475
								}
								position++
							case '^':
								if buffer[position] != rune('^') {
									goto l475
								}
								position++
							case ']':
								if buffer[position] != rune(']') {
									goto l475
								}
								position++
							case '\\':
								if buffer[position] != rune('\\') {
									goto l475
								}
								position++
							case '[':
								if buffer[position] != rune('[') {
									goto l475
								}
								position++
							case '@':
								if buffer[position] != rune('@') {
									goto l475
								}
								position++
							case '?':
								if buffer[position] != rune('?') {
									goto l475
								}
								position++
							case '>':
								if buffer[position] != rune('>') {
									goto l475
								}
								position++
							case '=':
								if buffer[position] != rune('=') {
									goto l475
								}
								position++
							case '<':
								if buffer[position] != rune('<') {
									goto l475
								}
								position++
							case ';':
								if buffer[position] != rune(';') {
									goto l475
								}
								position++
							case ':':
								if buffer[position] != rune(':') {
									goto l475
								}
								position++
							case '/':
								if buffer[position] != rune('/') {
									goto l475
								}
								position++
							case '+':
								if buffer[position] != rune('+') {
									goto l475
								}
								position++
							case '*':
								if buffer[position] != rune('*') {
									goto l475
								}
								position++
							case ')':
								if buffer[position] != rune(')') {
									goto l475
								}
								position++
							case '(':
								if buffer[position] != rune('(') {
									goto l475
								}
								position++
							case '\'':
								if buffer[position] != rune('\'') {
									goto l475
								}
								position++
							case '&':
								if buffer[position] != rune('&') {
									goto l475
								}
								position++
							case '%':
								if buffer[position] != rune('%') {
									goto l475
								}
								position++
							case '#':
								if buffer[position] != rune('#') {
									goto l475
								}
								position++
							case '"':
								if buffer[position] != rune('"') {
									goto l475
								}
								position++
							case '!':
								if buffer[position] != rune('!') {
									goto l475
								}
								position++
							case ',', '-', '.':
								if c := buffer[position]; c < rune(',') || c > rune('.') {
									goto l475
								}
								position++
							default:
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l475
								}
								position++
							}
						}

						goto l472
					l475:
						position, tokenIndex = position475, tokenIndex475
					}
					if !matchDot() {
						goto l472
					}
				l477:
					{
						position478, tokenIndex478 := position, tokenIndex
						{
							position479, tokenIndex479 := position, tokenIndex
							{
								switch buffer[position] {
								case '\x1e':
									if buffer[position] != rune('\x1e') {
										goto l479
									}
									position++
								case '\r':
									if buffer[position] != rune('\r') {
										goto l479
									}
									position++
								case '\n':
									if buffer[position] != rune('\n') {
										goto l479
									}
									position++
								case '\t':
									if buffer[position] != rune('\t') {
										goto l479
									}
									position++
								case ' ':
									if buffer[position] != rune(' ') {
										goto l479
									}
									position++
								case '~':
									if buffer[position] != rune('~') {
										goto l479
									}
									position++
								case '}':
									if buffer[position] != rune('}') {
										goto l479
									}
									position++
								case '|':
									if buffer[position] != rune('|') {
										goto l479
									}
									position++
								case '{':
									if buffer[position] != rune('{') {
										goto l479
									}
									position++
								case '`':
									if buffer[position] != rune('`') {
										goto l479
									}
									position++
								case '^':
									if buffer[position] != rune('^') {
										goto l479
									}
									position++
								case ']':
									if buffer[position] != rune(']') {
										goto l479
									}
									position++
								case '\\':
									if buffer[position] != rune('\\') {
										goto l479
									}
									position++
								case '[':
									if buffer[position] != rune('[') {
										goto l479
									}
									position++
								case '@':
									if buffer[position] != rune('@') {
										goto l479
									}
									position++
								case '?':
									if buffer[position] != rune('?') {
										goto l479
									}
									position++
								case '>':
									if buffer[position] != rune('>') {
										goto l479
									}
									position++
								case '=':
									if buffer[position] != rune('=') {
										goto l479
									}
									position++
								case '<':
									if buffer[position] != rune('<') {
										goto l479
									}
									position++
								case ';':
									if buffer[position] != rune(';') {
										goto l479
									}
									position++
								case '/':
									if buffer[position] != rune('/') {
										goto l479
									}
									position++
								case '+':
									if buffer[position] != rune('+') {
										goto l479
									}
									position++
								case '*':
									if buffer[position] != rune('*') {
										goto l479
									}
									position++
								case ')':
									if buffer[position] != rune(')') {
										goto l479
									}
									position++
								case '(':
									if buffer[position] != rune('(') {
										goto l479
									}
									position++
								case '\'':
									if buffer[position] != rune('\'') {
										goto l479
									}
									position++
								case '&':
									if buffer[position] != rune('&') {
										goto l479
									}
									position++
								case '%':
									if buffer[position] != rune('%') {
										goto l479
									}
									position++
								case '$':
									if buffer[position] != rune('$') {
										goto l479
									}
									position++
								case '#':
									if buffer[position] != rune('#') {
										goto l479
									}
									position++
								case '"':
									if buffer[position] != rune('"') {
										goto l479
									}
									position++
								case '!':
									if buffer[position] != rune('!') {
										goto l479
									}
									position++
								default:
									if c := buffer[position]; c < rune(',') || c > rune('.') {
										goto l479
									}
									position++
								}
							}

							goto l478
						l479:
							position, tokenIndex = position479, tokenIndex479
						}
						if !matchDot() {
							goto l478
						}
						goto l477
					l478:
						position, tokenIndex = position478, tokenIndex478
					}
					add(rulePegText, position474)
				}
				if !_rules[rulesp]() {
					goto l472
				}
				add(ruleidentifier, position473)
			}
			return true
		l472:
			position, tokenIndex = position472, tokenIndex472
			return false
		},
		/* 32 sub <- <(open e0 close)> */
		nil,
		/* 33 add <- <(('+' / '＋') sp)> */
		func() bool {
			position482, tokenIndex482 := position, tokenIndex
			{
				position483 := position
				{
					position484, tokenIndex484 := position, tokenIndex
					if buffer[position] != rune('+') {
						goto l485
					}
					position++
					goto l484
				l485:
					position, tokenIndex = position484, tokenIndex484
					if buffer[position] != rune('＋') {
						goto l482
					}
					position++
				}
			l484:
				if !_rules[rulesp]() {
					goto l482
				}
				add(ruleadd, position483)
			}
			return true
		l482:
			position, tokenIndex = position482, tokenIndex482
			return false
		},
		/* 34 minus <- <(('-' / '－') sp)> */
		func() bool {
			position486, tokenIndex486 := position, tokenIndex
			{
				position487 := position
				{
					position488, tokenIndex488 := position, tokenIndex
					if buffer[position] != rune('-') {
						goto l489
					}
					position++
					goto l488
				l489:
					position, tokenIndex = position488, tokenIndex488
					if buffer[position] != rune('－') {
						goto l486
					}
					position++
				}
			l488:
				if !_rules[rulesp]() {
					goto l486
				}
				add(ruleminus, position487)
			}
			return true
		l486:
			position, tokenIndex = position486, tokenIndex486
			return false
		},
		/* 35 multiply <- <(('*' / '＊') sp)> */
		nil,
		/* 36 divide <- <(('/' / '／') sp)> */
		nil,
		/* 37 modulus <- <('%' sp)> */
		nil,
		/* 38 exponentiation <- <(('^' sp) / ('*' '*' sp))> */
		nil,
		/* 39 open <- <('(' sp)> */
		nil,
		/* 40 close <- <(')' sp)> */
		nil,
		/* 41 bitwiseOr <- <('|' sp)> */
		nil,
		/* 42 logicOr <- <('|' '|' sp)> */
		nil,
		/* 43 bitwiseAnd <- <(('&' / ('&' 'a' 'm' 'p' ';')) sp)> */
		nil,
		/* 44 logicAnd <- <((('&' '&') / ('&' 'a' 'm' 'p' ';' '&' 'a' 'm' 'p' ';')) sp)> */
		nil,
		/* 45 sp <- <((&('/') ('/' '/' (!'\n' .)*)) | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' '))*> */
		func() bool {
			{
				position501 := position
			l502:
				{
					position503, tokenIndex503 := position, tokenIndex
					{
						switch buffer[position] {
						case '/':
							if buffer[position] != rune('/') {
								goto l503
							}
							position++
							if buffer[position] != rune('/') {
								goto l503
							}
							position++
						l505:
							{
								position506, tokenIndex506 := position, tokenIndex
								{
									position507, tokenIndex507 := position, tokenIndex
									if buffer[position] != rune('\n') {
										goto l507
									}
									position++
									goto l506
								l507:
									position, tokenIndex = position507, tokenIndex507
								}
								if !matchDot() {
									goto l506
								}
								goto l505
							l506:
								position, tokenIndex = position506, tokenIndex506
							}
						case '\r':
							if buffer[position] != rune('\r') {
								goto l503
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l503
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l503
							}
							position++
						default:
							if buffer[position] != rune(' ') {
								goto l503
							}
							position++
						}
					}

					goto l502
				l503:
					position, tokenIndex = position503, tokenIndex503
				}
				add(rulesp, position501)
			}
			return true
		},
		/* 46 lt <- <(('<' / '＜') sp)> */
		nil,
		/* 47 gt <- <(('>' / '＞') sp)> */
		nil,
		/* 48 le <- <((('<' '=') / ('＜' '＝')) sp)> */
		nil,
		/* 49 ge <- <((('>' '=') / ('＞' '＝')) sp)> */
		nil,
		/* 50 eq <- <((('=' '=') / ('＝' '＝')) sp)> */
		nil,
		/* 51 ne <- <((('!' '=') / ('！' '＝')) sp)> */
		nil,
		/* 52 strPart <- <(<(escape / (!((&('\\') '\\') | (&('`') '`') | (&('{') '{')) .))+> Action80)> */
		nil,
		/* 53 strPart1 <- <(<(escape / (!((&('\\') '\\') | (&('\x1e') '\x1e') | (&('{') '{')) .))+> Action81)> */
		nil,
		/* 54 strPart2 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('"') '"')) .))+> Action82)> */
		nil,
		/* 55 strPart3 <- <(<(escape / (!((&('\r') '\r') | (&('\n') '\n') | (&('\\') '\\') | (&('\'') '\'')) .))+> Action83)> */
		nil,
		/* 56 fstring <- <(((&('\'') ('\'' Action94 <strPart3*> '\'' Action95)) | (&('"') ('"' Action92 <strPart2*> '"' Action93)) | (&('\x1e') ('\x1e' Action88 <(('{' sp e Action89 '}') / ('{' '%' sp e Action90 ('%' '}')) / strPart1)*> '\x1e' Action91)) | (&('`') ('`' Action84 <(('{' sp e Action85 '}') / ('{' '{' sp e Action86 ('}' '}')) / strPart)*> '`' Action87))) sp)> */
		nil,
		/* 57 escape <- <('\\' ((&('\\') '\\') | (&('\'') '\'') | (&('"') '"') | (&('r') 'r') | (&('f') 'f') | (&('n') 'n') | (&('t') 't') | (&('b') 'b')))> */
		func() bool {
			position519, tokenIndex519 := position, tokenIndex
			{
				position520 := position
				if buffer[position] != rune('\\') {
					goto l519
				}
				position++
				{
					switch buffer[position] {
					case '\\':
						if buffer[position] != rune('\\') {
							goto l519
						}
						position++
					case '\'':
						if buffer[position] != rune('\'') {
							goto l519
						}
						position++
					case '"':
						if buffer[position] != rune('"') {
							goto l519
						}
						position++
					case 'r':
						if buffer[position] != rune('r') {
							goto l519
						}
						position++
					case 'f':
						if buffer[position] != rune('f') {
							goto l519
						}
						position++
					case 'n':
						if buffer[position] != rune('n') {
							goto l519
						}
						position++
					case 't':
						if buffer[position] != rune('t') {
							goto l519
						}
						position++
					default:
						if buffer[position] != rune('b') {
							goto l519
						}
						position++
					}
				}

				add(ruleescape, position520)
			}
			return true
		l519:
			position, tokenIndex = position519, tokenIndex519
			return false
		},
		/* 58 st_expr <- <(st_modify_multi / st_assign_multi)> */
		nil,
		/* 59 est <- <(eDice / (&'('? e0))> */
		func() bool {
			position523, tokenIndex523 := position, tokenIndex
			{
				position524 := position
				{
					position525, tokenIndex525 := position, tokenIndex
					if !_rules[ruleeDice]() {
						goto l526
					}
					goto l525
				l526:
					position, tokenIndex = position525, tokenIndex525
					{
						position527, tokenIndex527 := position, tokenIndex
						{
							position528, tokenIndex528 := position, tokenIndex
							if buffer[position] != rune('(') {
								goto l528
							}
							position++
							goto l529
						l528:
							position, tokenIndex = position528, tokenIndex528
						}
					l529:
						position, tokenIndex = position527, tokenIndex527
					}
					if !_rules[rulee0]() {
						goto l523
					}
				}
			l525:
				add(ruleest, position524)
			}
			return true
		l523:
			position, tokenIndex = position523, tokenIndex523
			return false
		},
		/* 60 st_assign_multi <- <(st_assign sp ','? sp)+> */
		nil,
		/* 61 st_assign <- <((st_name2 sp (':' / '=') sp est Action96) / (st_name1 sp est Action97) / ('&' st_name2 sp (':' / '=') sp Action98 <est> Action99))> */
		nil,
		/* 62 st_modify_multi <- <(st_modify sp ','? sp)+> */
		nil,
		/* 63 st_modify <- <(st_name2 sp (('+' sp <e0> Action100) / ('-' sp <e0> Action101)))> */
		nil,
		/* 64 st_name1 <- <(<id_ch0+> Action102)> */
		nil,
		/* 65 st_name2 <- <(<(id_ch0 id_ch*)> Action103)> */
		func() bool {
			position535, tokenIndex535 := position, tokenIndex
			{
				position536 := position
				{
					position537 := position
					if !_rules[ruleid_ch0]() {
						goto l535
					}
				l538:
					{
						position539, tokenIndex539 := position, tokenIndex
						{
							position540 := position
							{
								position541, tokenIndex541 := position, tokenIndex
								if !_rules[ruleid_ch0]() {
									goto l542
								}
								goto l541
							l542:
								position, tokenIndex = position541, tokenIndex541
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l539
								}
								position++
							}
						l541:
							add(ruleid_ch, position540)
						}
						goto l538
					l539:
						position, tokenIndex = position539, tokenIndex539
					}
					add(rulePegText, position537)
				}
				{
					add(ruleAction103, position)
				}
				add(rulest_name2, position536)
			}
			return true
		l535:
			position, tokenIndex = position535, tokenIndex535
			return false
		},
		/* 66 id_ch0 <- <(!((&('\x1e') '\x1e') | (&('\r') '\r') | (&('\n') '\n') | (&('\t') '\t') | (&(' ') ' ') | (&('~') '~') | (&('}') '}') | (&('|') '|') | (&('{') '{') | (&('`') '`') | (&('^') '^') | (&(']') ']') | (&('\\') '\\') | (&('[') '[') | (&('@') '@') | (&('?') '?') | (&('>') '>') | (&('=') '=') | (&('<') '<') | (&(';') ';') | (&(':') ':') | (&('/') '/') | (&('+') '+') | (&('*') '*') | (&(')') ')') | (&('(') '(') | (&('\'') '\'') | (&('&') '&') | (&('%') '%') | (&('$') '$') | (&('#') '#') | (&('"') '"') | (&('!') '!') | (&(',' | '-' | '.') [,-.]) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9])) .)> */
		func() bool {
			position544, tokenIndex544 := position, tokenIndex
			{
				position545 := position
				{
					position546, tokenIndex546 := position, tokenIndex
					{
						switch buffer[position] {
						case '\x1e':
							if buffer[position] != rune('\x1e') {
								goto l546
							}
							position++
						case '\r':
							if buffer[position] != rune('\r') {
								goto l546
							}
							position++
						case '\n':
							if buffer[position] != rune('\n') {
								goto l546
							}
							position++
						case '\t':
							if buffer[position] != rune('\t') {
								goto l546
							}
							position++
						case ' ':
							if buffer[position] != rune(' ') {
								goto l546
							}
							position++
						case '~':
							if buffer[position] != rune('~') {
								goto l546
							}
							position++
						case '}':
							if buffer[position] != rune('}') {
								goto l546
							}
							position++
						case '|':
							if buffer[position] != rune('|') {
								goto l546
							}
							position++
						case '{':
							if buffer[position] != rune('{') {
								goto l546
							}
							position++
						case '`':
							if buffer[position] != rune('`') {
								goto l546
							}
							position++
						case '^':
							if buffer[position] != rune('^') {
								goto l546
							}
							position++
						case ']':
							if buffer[position] != rune(']') {
								goto l546
							}
							position++
						case '\\':
							if buffer[position] != rune('\\') {
								goto l546
							}
							position++
						case '[':
							if buffer[position] != rune('[') {
								goto l546
							}
							position++
						case '@':
							if buffer[position] != rune('@') {
								goto l546
							}
							position++
						case '?':
							if buffer[position] != rune('?') {
								goto l546
							}
							position++
						case '>':
							if buffer[position] != rune('>') {
								goto l546
							}
							position++
						case '=':
							if buffer[position] != rune('=') {
								goto l546
							}
							position++
						case '<':
							if buffer[position] != rune('<') {
								goto l546
							}
							position++
						case ';':
							if buffer[position] != rune(';') {
								goto l546
							}
							position++
						case ':':
							if buffer[position] != rune(':') {
								goto l546
							}
							position++
						case '/':
							if buffer[position] != rune('/') {
								goto l546
							}
							position++
						case '+':
							if buffer[position] != rune('+') {
								goto l546
							}
							position++
						case '*':
							if buffer[position] != rune('*') {
								goto l546
							}
							position++
						case ')':
							if buffer[position] != rune(')') {
								goto l546
							}
							position++
						case '(':
							if buffer[position] != rune('(') {
								goto l546
							}
							position++
						case '\'':
							if buffer[position] != rune('\'') {
								goto l546
							}
							position++
						case '&':
							if buffer[position] != rune('&') {
								goto l546
							}
							position++
						case '%':
							if buffer[position] != rune('%') {
								goto l546
							}
							position++
						case '$':
							if buffer[position] != rune('$') {
								goto l546
							}
							position++
						case '#':
							if buffer[position] != rune('#') {
								goto l546
							}
							position++
						case '"':
							if buffer[position] != rune('"') {
								goto l546
							}
							position++
						case '!':
							if buffer[position] != rune('!') {
								goto l546
							}
							position++
						case ',', '-', '.':
							if c := buffer[position]; c < rune(',') || c > rune('.') {
								goto l546
							}
							position++
						default:
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l546
							}
							position++
						}
					}

					goto l544
				l546:
					position, tokenIndex = position546, tokenIndex546
				}
				if !matchDot() {
					goto l544
				}
				add(ruleid_ch0, position545)
			}
			return true
		l544:
			position, tokenIndex = position544, tokenIndex544
			return false
		},
		/* 67 id_ch <- <(id_ch0 / [0-9])> */
		nil,
		/* 69 Action0 <- <{ p.AddOperator(TypeHalt) }> */
		nil,
		/* 70 Action1 <- <{ p.AddOperator(TypeClearDetail) }> */
		nil,
		/* 71 Action2 <- <{ p.AddValueStr(string(text)) }> */
		nil,
		/* 72 Action3 <- <{ p.AddStore() }> */
		nil,
		/* 73 Action4 <- <{p.AddOperator(TypePop)}> */
		nil,
		/* 74 Action5 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 75 Action6 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset(); }> */
		nil,
		/* 76 Action7 <- <{ p.PopAndSetOffset() }> */
		nil,
		/* 77 Action8 <- <{ p.AddValueStr(""); }> */
		nil,
		/* 78 Action9 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 79 Action10 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset(); }> */
		nil,
		/* 80 Action11 <- <{ p.AddOperator(TypeJne); p.PushForOffset() }> */
		nil,
		/* 81 Action12 <- <{ p.AddOperator(TypeJmp); p.PopAndSetOffset(); p.PushForOffset() }> */
		nil,
		/* 82 Action13 <- <{ p.PopAndSetOffset() }> */
		nil,
		/* 83 Action14 <- <{ p.CounterPush() }> */
		nil,
		/* 84 Action15 <- <{p.CounterAdd(1)}> */
		nil,
		/* 85 Action16 <- <{ p.AddValueStr(""); limit:=p.CounterPop()+1; for i:=int64(0); i<limit; i++ { p.PopAndSetOffset() } }> */
		nil,
		/* 86 Action17 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 87 Action18 <- <{ p.AddOperator(TypeBitwiseOr) }> */
		nil,
		/* 88 Action19 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 89 Action20 <- <{ p.AddOperator(TypeBitwiseAnd) }> */
		nil,
		/* 90 Action21 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 91 Action22 <- <{ p.AddOperator(TypeCompLT) }> */
		nil,
		/* 92 Action23 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 93 Action24 <- <{ p.AddOperator(TypeCompLE) }> */
		nil,
		/* 94 Action25 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 95 Action26 <- <{ p.AddOperator(TypeCompEQ) }> */
		nil,
		/* 96 Action27 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 97 Action28 <- <{ p.AddOperator(TypeCompNE) }> */
		nil,
		/* 98 Action29 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 99 Action30 <- <{ p.AddOperator(TypeCompGE) }> */
		nil,
		/* 100 Action31 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 101 Action32 <- <{ p.AddOperator(TypeCompGT) }> */
		nil,
		/* 102 Action33 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 103 Action34 <- <{ p.AddOperator(TypeAdd) }> */
		nil,
		/* 104 Action35 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 105 Action36 <- <{ p.AddOperator(TypeSubtract) }> */
		nil,
		/* 106 Action37 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 107 Action38 <- <{ p.AddOperator(TypeMultiply) }> */
		nil,
		/* 108 Action39 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 109 Action40 <- <{ p.AddOperator(TypeDivide) }> */
		nil,
		/* 110 Action41 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 111 Action42 <- <{ p.AddOperator(TypeModulus) }> */
		nil,
		/* 112 Action43 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 113 Action44 <- <{ p.AddOperator(TypeExponentiation) }> */
		nil,
		/* 114 Action45 <- <{ p.AddOperator(TypeNegation) }> */
		nil,
		/* 115 Action46 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetK)}> */
		nil,
		/* 116 Action47 <- <{p.AddValue("1"); p.AddOperator(TypeDiceSetQ)}> */
		nil,
		/* 117 Action48 <- <{ p.AddOperator(TypeDiceSetK) }> */
		nil,
		/* 118 Action49 <- <{ p.AddOperator(TypeDiceSetQ) }> */
		nil,
		/* 119 Action50 <- <{ p.AddOperatorWithInt64(TypeDiceSetK, 1) }> */
		nil,
		/* 120 Action51 <- <{ p.AddOperatorWithInt64(TypeDiceSetQ, 1) }> */
		nil,
		/* 121 Action52 <- <{ p.AddOperator(TypeWodSetInit) }> */
		nil,
		/* 122 Action53 <- <{ p.AddOperator(TypeWodSetPool) }> */
		nil,
		/* 123 Action54 <- <{ p.AddOperator(TypeDCSetInit) }> */
		nil,
		/* 124 Action55 <- <{ p.AddOperator(TypeDCSetPool) }> */
		nil,
		/* 125 Action56 <- <{ p.AddValue("2"); p.AddLeftValueMark() }> */
		nil,
		/* 126 Action57 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 127 Action58 <- <{ p.AddValue("1"); p.AddLeftValueMark() }> */
		nil,
		/* 128 Action59 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 129 Action60 <- <{ p.AddValue("2"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 130 Action61 <- <{ p.AddValue("1"); p.AddLeftValueMark(); p.AddValue("0"); p.AddOperator(TypeDice) }> */
		nil,
		/* 131 Action62 <- <{ p.AddOperator(TypeWodSetPoints) }> */
		nil,
		/* 132 Action63 <- <{ p.AddOperator(TypeWodSetThreshold) }> */
		nil,
		/* 133 Action64 <- <{ p.AddOperator(TypeWodSetThresholdQ) }> */
		nil,
		/* 134 Action65 <- <{ p.AddOperator(TypeDiceWod) }> */
		nil,
		/* 135 Action66 <- <{ p.AddOperator(TypeDCSetPoints) }> */
		nil,
		/* 136 Action67 <- <{ p.AddOperator(TypeDiceDC) }> */
		nil,
		/* 137 Action68 <- <{ p.AddLeftValueMark() }> */
		nil,
		/* 138 Action69 <- <{ p.AddOperator(TypeDice) }> */
		nil,
		/* 139 Action70 <- <{ p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 140 Action71 <- <{ p.AddValue("1"); p.AddOperator(TypeDicePenalty) }> */
		nil,
		/* 141 Action72 <- <{ p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 142 Action73 <- <{ p.AddValue("1"); p.AddOperator(TypeDiceBonus) }> */
		nil,
		/* 143 Action74 <- <{ p.AddValue("0"); p.AddValue("0"); p.AddOperator(TypeDiceFate) }> */
		nil,
		/* 144 Action75 <- <{ p.AddLoadVarnameForThis(text) }> */
		nil,
		/* 145 Action76 <- <{ p.WriteCode(TypeConvertInt, 0, "") }> */
		nil,
		/* 146 Action77 <- <{ p.WriteCode(TypeConvertStr, 0, "") }> */
		nil,
		/* 147 Action78 <- <{ p.AddLoadVarname(string(text)) }> */
		nil,
		nil,
		/* 149 Action79 <- <{ p.AddValue(string(text)) }> */
		nil,
		/* 150 Action80 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 151 Action81 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 152 Action82 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 153 Action83 <- <{ p.AddValueStr(string(text)); p.CounterAdd(1) }> */
		nil,
		/* 154 Action84 <- <{ p.CounterPush() }> */
		nil,
		/* 155 Action85 <- <{p.CounterAdd(1)}> */
		nil,
		/* 156 Action86 <- <{p.CounterAdd(1)}> */
		nil,
		/* 157 Action87 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 158 Action88 <- <{ p.CounterPush() }> */
		nil,
		/* 159 Action89 <- <{p.CounterAdd(1)}> */
		nil,
		/* 160 Action90 <- <{p.CounterAdd(1)}> */
		nil,
		/* 161 Action91 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 162 Action92 <- <{ p.CounterPush() }> */
		nil,
		/* 163 Action93 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 164 Action94 <- <{ p.CounterPush() }> */
		nil,
		/* 165 Action95 <- <{ p.AddFormatString(string(text), p.CounterPop()) }> */
		nil,
		/* 166 Action96 <- <{ p.AddStName() }> */
		nil,
		/* 167 Action97 <- <{ p.AddStName() }> */
		nil,
		/* 168 Action98 <- <{ p.CodePush() }> */
		nil,
		/* 169 Action99 <- <{ p.CodePop(); p.AddStoreComputed(text); p.AddStName() }> */
		nil,
		/* 170 Action100 <- <{p.AddStModify("+", text)}> */
		nil,
		/* 171 Action101 <- <{p.AddStModify("-", text)}> */
		nil,
		/* 172 Action102 <- <{ p.AddValueStr(text) }> */
		nil,
		/* 173 Action103 <- <{ p.AddValueStr(text) }> */
		nil,
	}
	p.rules = _rules
	return nil
}
