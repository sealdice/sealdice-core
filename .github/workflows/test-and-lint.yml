name: Test & Lint

on:
  push:
    paths-ignore:
      - .github/**
      - '!.github/workflows/build.yml'
      - '!.github/patch_go/**'
      - .idea
      - .vscode
      - README.md
      - taskfile.yml
  pull_request:
    paths-ignore:
      - .github/**
      - '!.github/workflows/build.yml'
      - '!.github/patch_go/**'
      - .idea
      - .vscode
      - README.md
      - taskfile.yml

jobs:
  test-and-lint-go:
    name: Test & Lint (core)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: core
    steps:
      - name: Code
        uses: actions/checkout@v4
      
      # Build UI
      - name: Restore UI Dist
        id: restore-ui-dist
        uses: actions/cache/restore@v4
        with:
          path: ui/dist
          key: sealdice-ui-${{ hashFiles('ui/**') }}
      - uses: pnpm/action-setup@v4
        if: steps.restore-ui-dist.outputs.cache-hit != 'true'
        with:
          version: 10
          run_install: false
      - uses: actions/setup-node@v5
        if: steps.restore-ui-dist.outputs.cache-hit != 'true'
        with:
          node-version: 22
          cache: 'pnpm'
      - name: Install pnpm dependencies
        if: steps.restore-ui-dist.outputs.cache-hit != 'true'
        run: pnpm install
      - name: Build UI
        if: steps.restore-ui-dist.outputs.cache-hit != 'true'
        run: pnpm run build:ui
      - name: Move UI Dist to Core
        run: mv ui/dist core/static/frontend

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"
          cache-dependency-path: core/go.mod
      - run: go get
      - run: go generate ./...

      - run: go test -v -race ./...
      - run: go vet ./...

      - name: GolangCI-Lint
        uses: golangci/golangci-lint-action@v8
        if: github.event_name != 'pull_request'
        with:
          version: latest
          args: "--timeout 9999s"
          working-directory: core

  test-and-lint:
    name: Test & Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
          - ui
          - story-painter
          - verify
    steps:
      - name: Code
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - name: Install Dependencies
        run: pnpm install

      - name: Check (${{ matrix.package }})
        run: pnpm run check
        working-directory: ${{ matrix.package }}

  markdown-lint:
    name: Markdown Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
          - manual
    steps:
      - uses: actions/checkout@v4
      - uses: DavidAnson/markdownlint-cli2-action@v16
        with:
          globs: "${{ matrix.package }}/**/*.md"

  autocorrect:
    name: AutoCorrect
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
          - manual
    steps:
      - uses: actions/checkout@v4
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
      - name: Install Dependencies
        run: pnpm install

      - name: AutoCorrect (${{ matrix.package }})
        run: pnpm run lint:autocorrect
        working-directory: ${{ matrix.package }}
