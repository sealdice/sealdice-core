name: Build

on:
  push:
    paths-ignore:
      - '**.yml'
      - '!.github/workflows/build.yml'
      - '**.yaml'
      - '**.md'
      - '.gitignore'
  workflow_dispatch:

env:
  COMMIT_ID: "${{ github.sha }}"
  ANDROID_NDK_VERSION: r25c

jobs:
  ui-build:
    name: Build UI
    runs-on: ubuntu-latest
    steps:
      - name: Code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ./sealdice-ui/package-lock.json
      - name: Install Dependencies
        working-directory: ./sealdice-ui
        run: npm install
      - name: Build WebUI
        working-directory: ./sealdice-ui
        run: npm run build3
      - name: Upload UI
        uses: actions/upload-artifact@v4
        with:
          name: sealdice-ui
          path: ./sealdice-ui/dist

  core-build:
    name: Build binary
    runs-on: 'ubuntu-latest'
    needs: ui-build
    strategy:
      matrix:
        # target: linux/amd64, linux/arm64, windows/386, windows/amd64
        goos: [ linux, windows ]
        goarch: [ '386', amd64, arm64 ]
        exclude:
          - goos: linux
            goarch: '386'
          - goos: windows
            goarch: arm64
      fail-fast: true
    steps:
      - name: Apt-get Update
        run: sudo apt-get update
      - name: Code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install Cross-compiler for Windows
        if: matrix.goos == 'windows'
        run: sudo apt-get -y install mingw-w64
      - name: Install Cross-compiler for Linux Arm64
        if: matrix.goos == 'linux' && matrix.goarch == 'arm64'
        run: sudo apt-get -y install gcc-aarch64-linux-gnu
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'
      - name: Install Dependencies
        run: go get .
      - name: Get UI Resources
        uses: actions/download-artifact@v4
        with:
          name: sealdice-ui
          path: ./static/frontend
      - name: Sign Builtin Mod
        env:
          SEAL_MOD_PRIVATE_KEY: ${{ secrets.SEAL_MOD_PRIVATE_KEY }}
        run: go generate sealdice-core/signature
      - name: Set Env
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          echo "PROJECT_VERSION=develop-${COMMIT_ID::7}" >> $GITHUB_ENV;
          if [ $GOOS = 'windows' ]; then
            echo "BINARY_NAME=sealdice-core.exe" >> $GITHUB_ENV;
          else
            echo "BINARY_NAME=sealdice-core" >> $GITHUB_ENV;
          fi
          if [ $GOOS = 'windows' ] && [ $GOARCH = '386' ]; then
            echo "CC=i686-w64-mingw32-gcc" >> $GITHUB_ENV;
          elif [ $GOOS = 'windows' ] && [ $GOARCH = 'amd64' ]; then
            echo "CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV;
          elif [ $GOOS = 'linux' ] && [ $GOARCH = 'amd64' ]; then
            echo "CC=gcc" >> $GITHUB_ENV;
          elif [ $GOOS = 'linux' ] && [ $GOARCH = 'arm64' ]; then
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV;
          fi
      - name: Build Binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GO111MODULE: on
          CGO_ENABLED: ${{ matrix.goarch != 'arm64' && 1 || 0 }}
          CGO_FLAGS: -Werror=unused-variable -Werror=implicit-function-declaration -O2 -H=windowsgui
        run: go build -o "output/$BINARY_NAME" -trimpath -ldflags "-s -w -X sealdice-core/dice.VERSION=$PROJECT_VERSION" .
      - name: Upload Core
        uses: actions/upload-artifact@v4
        with:
          name: sealdice-core_${{ env.PROJECT_VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}
          path: output

  core-darwin-build:
    name: Build Core
    runs-on: macos-latest
    needs: ui-build
    strategy:
      matrix:
        # target: darwin/amd64 darwin/arm64
        goos: [ darwin ]
        goarch: [ amd64, arm64 ]
      fail-fast: true
    steps:
      - name: Code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'
      - name: Install Dependencies
        run: go get .
      - name: Get UI Resources
        uses: actions/download-artifact@v4
        with:
          name: sealdice-ui
          path: ./static/frontend
      - name: Sign Builtin Mod
        env:
          SEAL_MOD_PRIVATE_KEY: ${{ secrets.SEAL_MOD_PRIVATE_KEY }}
        run: go generate sealdice-core/signature
      - name: Set Env
        run: echo "PROJECT_VERSION=develop-${COMMIT_ID::7}" >> $GITHUB_ENV;
      - name: Build Binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GO111MODULE: on
          CGO_ENABLED: 1
          CGO_FLAGS: -Werror=unused-variable -Werror=implicit-function-declaration -O2 -mmacosx-version-min=10.12
          CGO_CFLAGS: -mmacosx-version-min=10.12
        run: go build -o "output/sealdice-core" -trimpath -ldflags "-s -w -X sealdice-core/dice.VERSION=$PROJECT_VERSION" .
      - name: Upload Core
        uses: actions/upload-artifact@v4
        with:
          name: sealdice-core_${{ env.PROJECT_VERSION }}_${{ matrix.goos }}_${{ matrix.goarch }}
          path: output

  core-android-build:
    name: Build Core (android, arm64)
    runs-on: ubuntu-20.04
    needs: ui-build
    steps:
      - name: Code
        uses: actions/checkout@v4
        with:
          submodules: true
      - name: Setup Android NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ env.ANDROID_NDK_VERSION }}
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'
      - name: Install dependencies
        run: go get .
      - name: Get UI Resources
        uses: actions/download-artifact@v4
        with:
          name: sealdice-ui
          path: ./static/frontend
      - name: Sign Builtin Mod
        env:
          SEAL_MOD_PRIVATE_KEY: ${{ secrets.SEAL_MOD_PRIVATE_KEY }}
        run: go generate sealdice-core/signature
      - name: Set Env
        run: echo "PROJECT_VERSION=develop-${COMMIT_ID::7}" >> $GITHUB_ENV;
      - name: Build binary
        env:
          GOOS: android
          GOARCH: arm64
          CGO_ENABLED: 1
          CC: ${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android33-clang
          CGO_FLAGS: -Werror=unused-variable -Werror=implicit-function-declaration -O2
        run: go build -o "output/sealdice-core" -trimpath -ldflags "-s -w -X sealdice-core/dice.VERSION=$PROJECT_VERSION" .
      - name: Upload Core
        uses: actions/upload-artifact@v4
        with:
          name: sealdice-core_${{ env.PROJECT_VERSION }}_android_arm64
          path: output

  clear-temp-artifact:
    name: Clear Temp Artifacts
    if: always()
    runs-on: ubuntu-latest
    needs:
      - core-build
      - core-darwin-build
      - core-android-build
    permissions:
      actions: write
    steps:
      - uses: geekyeggo/delete-artifact@v4
        with:
          token: ${{ github.token }}
          name: |
            sealdice-ui